<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DSA签名算法</title>
    <link href="/2024/12/29/RSA-wiener/"/>
    <url>/2024/12/29/RSA-wiener/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RSA两种特殊攻击情况"><a href="#RSA两种特殊攻击情况" class="headerlink" title="RSA两种特殊攻击情况"></a>RSA两种特殊攻击情况</h1><h2 id="P和q的不当分解"><a href="#P和q的不当分解" class="headerlink" title="P和q的不当分解"></a>P和q的不当分解</h2><p><strong>|p-q|很大</strong>时，一定存在某个参数ip较小，这里我们假设p较小我们可以通过穷举法分解模数，但是很少遇到</p><p><strong>|p-q|较小</strong></p><p>$(p+q)^2&#x2F;4-n&#x3D;(p-q)^2&#x2F;4$;</p><p>|p-q|较小，那么(p-q)&#x2F;2和n^1&#x2F;2^也比较接近</p><ul><li>顺序检查 √nn 的每一个整数 x，直到找到一个 x 使得 x2−nx2−n 是平方数，记为 y2y2</li><li>那么 x2−n&#x3D;y2x2−n&#x3D;y2，进而根据平方差公式即可分解 N</li></ul><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 生成 p 和 q</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = gmpy2.next_prime(p, p + <span class="hljs-number">10000</span>) <br>n = p * q<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor</span>(<span class="hljs-params">n</span>):<br>    a = gmpy2.iroot(n, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment">#a可以看作p+q</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a+=<span class="hljs-number">1</span><br>        b2 = a * a - n  <span class="hljs-comment">#</span><br><br>        <span class="hljs-keyword">if</span> gmpy2.is_square(b2):<span class="hljs-comment">#判断b2是否是全平方</span><br>            b2 = gmpy2.mpz(b2)  <span class="hljs-comment"># 转换为大整数</span><br>            b, xflag = gmpy2.iroot(b2, <span class="hljs-number">2</span>) <span class="hljs-comment">#返回元组</span><br>            <span class="hljs-keyword">assert</span> xflag  <span class="hljs-comment"># 如果能平方返回True</span><br>            <span class="hljs-keyword">return</span> (a - b, a + b)<br><br><span class="hljs-built_in">print</span>(factor(n))<br><br></code></pre></td></tr></table></figure><p>一个变式题目:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">5</span>]==<span class="hljs-string">b&#x27;flag&#123;&#x27;</span><br>​<br>m1 = bytes_to_long(flag[:<span class="hljs-number">20</span>])<br>p  = getPrime(<span class="hljs-number">512</span>)<br>p1 = gmpy2.next_prime(p)<br>q  = getPrime(<span class="hljs-number">512</span>)<br>q1 = gmpy2.next_prime(q)<br>n1 = p*q*p1*q1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n1 =&#x27;</span>,n1)<br>e = <span class="hljs-number">0x10001</span><br>c1 = <span class="hljs-built_in">pow</span>(m1,e,n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c1 =&#x27;</span>,c1)<br>​<br></code></pre></td></tr></table></figure><p>这里有n&#x3D;四个素数因子乘积</p><p>上述可以分为两种。。(p,q)(p1,q1)…(p,q1)(p1,q)这两组每组两个元素乘积相近，可以利用费马分解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, inverse, long_to_bytes<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> pywin.Demos.cmdserver <span class="hljs-keyword">import</span> flags<br><span class="hljs-keyword">from</span> scipy.signal <span class="hljs-keyword">import</span> qspline1d<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> factor_list<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor</span>(<span class="hljs-params">n</span>):<br>    a = gmpy2.iroot(n, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment">#a可以看作p+q</span><br>    factor_list = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a+=<span class="hljs-number">1</span><br>        b2 = a * a - n  <span class="hljs-comment">#</span><br><br>        <span class="hljs-comment"># 如果 b^2 是一个完全平方数</span><br>        <span class="hljs-keyword">if</span> gmpy2.is_square(b2):<br>            b2 = gmpy2.mpz(b2)  <span class="hljs-comment"># 转换为大整数</span><br>            b, xflag = gmpy2.iroot(b2, <span class="hljs-number">2</span>) <span class="hljs-comment">#返回元组</span><br>            <span class="hljs-keyword">assert</span> xflag<span class="hljs-comment"># 如果能平方返回True</span><br>            factor_list.append([a + b, a - b])<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(factor_list) == <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">return</span> factor_list<br>e = <span class="hljs-number">0x10001</span><br>c1 = <span class="hljs-number">6201882078995455673376327652982610102807874783073703018551044780440620679217833227711395689114659144506630609087600915116940111002026241056808189658969089532597757995423694966667948250438579639890580690392400661711864264184444018345499567505424672090632235109624193289954785503512742400960515331371813467034511130432319427185134018830006918682733848618201088649690422818940385123599468595766345668931882249779415788129316594083269412221804774856038796248038700275509397599351533280014908894068141056694660319816046357462684688942519849441237878018480036145051967731081582598773076490918572392784684372694103015244826</span><br>n = <span class="hljs-number">6348779979606280884589422188738902470575876294643492831465947360363568026280963989291591157710389629216109615274754718329987990551836115660879103234129921943824061416396264358110216047994331119920503431491509529604742468032906950984256964560405062345280120526771439940278606226153077959057882262745273394986607004406770035459301695806378598890589432538916219821477777021460189140081521779103226953544426441823244765828342973086422949017937701261348963541035128661464068769033772390320426795044617751909787914185985911277628404632533530390761257251552073493697518547350246993679844132297414094727147161169548160586911</span><br>factor_list=factor(n)<br>X1,Y1=factor_list[<span class="hljs-number">0</span>]<br>X2,Y2=factor_list[<span class="hljs-number">1</span>]<br>p=gcd(X1,X2)<br>p1=gcd(Y1,Y2)<br>q=X1//p<br>q1=Y1//p1<br>Phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(p1-<span class="hljs-number">1</span>)* (q1-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q1=&quot;</span>,q1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1&quot;</span>,p1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Phi=&quot;</span>,Phi)<br><br>d = inverse(e, Phi)<br>flag=<span class="hljs-built_in">pow</span>(c1,d,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag=&quot;</span>,long_to_bytes(flag),<span class="hljs-string">&quot;&#125;&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag= b&#x27;flag&#123;Euler_funct1ons&#x27; &#125;&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>私钥d&lt;1&#x2F;3N^1&#x2F;4^,选择较大的公钥e，用*e* ′代替*e*，其中*e* ′ &#x3D; *e* + *k* ⋅ *λ* ( *N* )，*k*为某个较大的数。当*e* ′ 足够大时，即*e* ′ &gt; <em>N</em> 3&#x2F;2 <em>，则无论d</em>有多小，都无法实施维纳攻击。假设p与q二进制长度相等即p&lt;q&lt;2p，可以得到p+q&lt;3p&lt;3(n)^0.5^</p><p>欧拉函数φ(N)&#x3D;N-p-q+1 满足N-3(N)^0.5^&lt;φ(N)&lt;N</p><ul><li>基于定理</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/wiener.99tfjay02x.webp"></p><h3 id="维纳攻击-1"><a href="#维纳攻击-1" class="headerlink" title="维纳攻击"></a>维纳攻击</h3><blockquote></blockquote><h3 id="维纳的方法"><a href="#维纳的方法" class="headerlink" title="维纳的方法"></a>维纳的方法</h3><blockquote><p>ed&#x3D;1+k*φ(N)</p><p>|$e\over φ(N) $-$k\over d$|&#x3D;$1 \over φ(n)$</p><p>φ(N)约等于N,K&#x2F;gd约等于e&#x2F;—&gt;|$e\over N$-$k\over d$|&#x3D;|$k(p+q-1)-1\over Nd$|</p><p>要使上述式子&lt;1&#x2F;(2d^2^) </p><p>p+q&lt;3(N)^0.5^,0&lt;K&lt;d可以推断，|$e\over N$-$k\over d$|&lt;3&#x2F;N)^0.5^</p><p>所以d&lt;3&#x2F;(n)^0.25^</p></blockquote><blockquote><p><em>e<strong>d</strong>g</em>&#x3D;<em>k</em>(<em>p</em>−1)(<em>q</em>−1)+<em>g</em>,<em>k</em>&gt;<em>g</em></p><p>同时除以k，k&#x2F;g&lt;1可以忽略</p><p>⌊<em>k<strong>e</strong>d**g</em>⌋&#x3D;(<em>p</em>−1)(<em>q</em>−1)</p><p>(<em>pq</em>−(<em>p</em>−1)(<em>q</em>−1)+1)&#x2F;2&#x3D;(p+q)&#x2F;2</p><p>($(p+q)\over 2$)^2^-pq&#x3D;($p-q\over 2$)^2^ #可以用这个判断连分数收敛是否为所需的k&#x2F;(dg)</p></blockquote><p>例题sagemath上的连分数扩展函数实现更便捷</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">possible</span>(<span class="hljs-params">e,alist,N</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> alist:<br>        <span class="hljs-keyword">if</span> x==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi=(e*x.denominator()-<span class="hljs-number">1</span>)//x.numerator()<br>        <span class="hljs-keyword">if</span> (N-phi+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> sqrt(<span class="hljs-built_in">pow</span>((N-phi+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)-N).is_integer():<br>            (p,q)=var(<span class="hljs-string">&#x27;p q&#x27;</span>)<br>            x=solve([(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)==phi,p*q==N],p,q)<br>            <span class="hljs-keyword">return</span> x <br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienner_attack</span>(<span class="hljs-params">e,N</span>):<br>    c=continued_fraction(e/N)<span class="hljs-comment">#获取连分数集合</span><br>    alist=c.convergents()<span class="hljs-comment">#利用连分数得到连分数收敛</span><br>    <span class="hljs-keyword">return</span> possible(e,alist,N)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">x.denominator():</span><br><span class="hljs-string"></span><br><span class="hljs-string">这个函数返回分数 x 的分母。</span><br><span class="hljs-string">x.numerator():</span><br><span class="hljs-string"></span><br><span class="hljs-string">这个函数返回分数 x 的分子。</span><br><span class="hljs-string">e * x.denominator():</span><br><span class="hljs-string"></span><br><span class="hljs-string">这个部分将 e 乘以 x 的分母。</span><br><span class="hljs-string">e * x.denominator() - 1:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这个代码返回的是p和q</p><h3 id="rrrrrrsa–一道题"><a href="#rrrrrrsa–一道题" class="headerlink" title="rrrrrrsa–一道题"></a>rrrrrrsa–一道题</h3><p><img src="https://rockfox0.github.io/picx-images-hosting/26a1d4b9c2b9329f06b882ccf7930df9.54xu78e8w8.webp"></p><p>这是一个关于rsa-wiener攻击拓展的推导</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">P1 = getPrime(<span class="hljs-number">1038</span>)<br>P2 = sympy.nextprime(P1)<br><span class="hljs-keyword">assert</span>(P2 - P1 &lt; <span class="hljs-number">1000</span>)<br><br>Q1 = getPrime(<span class="hljs-number">512</span>)<br>Q2 = sympy.nextprime(Q1)<br><br>N1 = P1 * P1 * Q1<br>N2 = P2 * P2 * Q2<br><br></code></pre></td></tr></table></figure><p>刚好可以应用在这里。</p><p>很明显是满足条件的。所以Q1&#x2F;Q2是N1&#x2F;N2的收敛连分数扩展</p><blockquote><p>N1&#x2F;N2&#x3D;(P1&#x2F;P1)^2^*(Q1&#x2F;Q2) </p><p>Q1&#x2F;Q1&gt;N1&#x2F;N2,N1&lt;N2,Q1&lt;Q2</p><p>n1&#x2F;n2&lt;Q1&#x2F;Q2&lt;1,然后我们用</p><p>因为Q1和Q2都是素数，我们可以直接得到Q1和Q2</p><p>并用N1%Q1来判断是否符合条件</p></blockquote><p>解题代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">possible</span>(<span class="hljs-params">alist,N1</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> alist:<br>        <span class="hljs-keyword">if</span> x==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        Q1=x.numerator()<br>        <span class="hljs-keyword">if</span> N1%Q1==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> Q1!=<span class="hljs-number">1</span>:<br>            Q2=x.denominator()<br>            <span class="hljs-keyword">return</span> Q1,Q2<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienner_attack</span>(<span class="hljs-params">N1,N2</span>):<br>    c=continued_fraction(N1/N2)<span class="hljs-comment">#获取连分数集合</span><br>    alist=c.convergents()<span class="hljs-comment">#利用连分数得到连分数收敛</span><br>    <span class="hljs-keyword">return</span> possible(alist,N1)<br>N1=<br>N2=<br>c1=<br>c2=<br>E1=<br>E2=<br>t=wienner_attack(N1,N2)<br>Q1=t[<span class="hljs-number">0</span>]<br>Q2=t[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(Q1)<br><span class="hljs-built_in">print</span>(Q2)<br>P2=gmpy2.iroot(N2//Q2,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>P1=gmpy2.iroot(N1//Q1,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>phi1=(P1-<span class="hljs-number">1</span>)*P1*(Q1-<span class="hljs-number">1</span>)<br>phi2=(P2-<span class="hljs-number">1</span>)*P2*(Q2-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(E1,phi1)<br>d2=gmpy2.invert(E2,phi2)<br>m1=gmpy2.powmod(c1,d1,N1)<br>m2=gmpy2.powmod(c2,d2,N2)<br>f1=long_to_bytes(m1)<br>f2=long_to_bytes(m2)<br><span class="hljs-built_in">print</span>(f1,f2)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644210947</span><br><span class="hljs-string">11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644211929</span><br><span class="hljs-string">b&#x27;GWHT&#123;3aadab41754799&#x27; b&#x27;f978669d53e64a3aca&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="扩展维纳"><a href="#扩展维纳" class="headerlink" title="扩展维纳"></a>扩展维纳</h3><p>参考：论文:<a href="https://dunkirkturbo.github.io/2020/05/04/WriteUp-De1CTF2020-Crypto/howgrave-graham1999.pdf">https://dunkirkturbo.github.io/2020/05/04/WriteUp-De1CTF2020-Crypto/howgrave-graham1999.pdf</a></p><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/">ctf-wiki-扩展维纳</a></p><h4 id="维纳的方法-1"><a href="#维纳的方法-1" class="headerlink" title="维纳的方法"></a>维纳的方法</h4><p>这里我们忽略前面提到的q&lt;p&lt;2q的条件。利用其他进行维纳攻击</p><p>这里有个前提，e约等于n,S约等于(n)^0.5^(大概就是2的指数差不多)</p><p>λ(N)&#x3D;lcm(p-1,q-1)….g&#x3D;gcd(p-1,q-1). s&#x3D;1-p-q</p><blockquote><p>$ed-k*λ(N)&#x3D;1$</p><p>$edg-kN&#x3D;g+ks$</p><p>$e\over N$-$k\over dg$&#x3D;($k\over dg$)($s\over N$)+$1\over dN$</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-144234.9rjh97w4em.webp"></p><p>这里原论文的证明近似的量有点多，不够严谨，不能算是严格的维纳证明，最开始的那个更细节</p></blockquote><h4 id="GUO的方法"><a href="#GUO的方法" class="headerlink" title="GUO的方法"></a>GUO的方法</h4><p>考虑存在两个e。</p><p>$e_1d_1g-k_1(p-1)(p-1)&#x3D;g$</p><p>$e_2d_2g-k_2(p-1)(q-1)&#x3D;g$</p><p>化简可以得到</p><p>$k_2d_1e_1−k_1d_2e_2&#x3D;k_2−k_1$</p><blockquote><p>同时除以$k_2d_1e_2$</p><p>$e_1\over e_2$-$k_1d_2\over k_2d_1$&#x3D;$k_2-k_1\over k_2d_1e_2$</p><p>设$d_i&lt;N^α$</p><p>$k_2-k_1\over k_2d_1e_2$≈N^−(1+α)^</p><p>为了满足上述定理</p><p>2(<em>k</em>2−<em>k</em>1)<em>d</em>1<em>k</em>2&lt;<em>e</em>2</p><p>但是通过$k_1d_2\over k_2 d_1$找到分解N不是很现实，这个扩展结合了上述两种方法利用格来求</p></blockquote><h4 id="扩展维纳攻击"><a href="#扩展维纳攻击" class="headerlink" title="扩展维纳攻击"></a>扩展维纳攻击</h4><p>两个关系：</p><blockquote><p>$d_ige_i−k_iN&#x3D;g+k_is$  —M</p><p>k_id_je_j−k_jd_ie_i&#x3D;k_i−k_j —G<sub>i,j</sub></p></blockquote><p>我们假设$d_i$ 和$k_i $都小于N^αn^，且g很小，s≈N^1&#x2F;2^。可以注意到$W_i$ 和Gi的右侧非常小，实际上分别最多为N^1&#x2F;2+α^ 和N^α^。</p><p>接下来我们可以利用四个等式构造格</p><p>$k_1 k_2&#x3D;k_1 k_2$</p><p>$d_1ge_1−k_1N&#x3D;g+k_1s$</p><p>$k_1d_2e_2−k_2d_1e_1&#x3D;k_1−k_2$</p><p>$d_1d_2g^2e_1e_2−d_1gk_2e_1N−d_2gk_1e_2N+k_1k_2N_2&#x3D;(g+k_1s)(g+k_2s)$</p><p>可以构造如下格</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-155922.8l060oyhju.webp" alt="屏幕截图-2025-01-05-155922"></p><p>视作A*L&#x3D;B</p><p>根据假设</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-155934.4xumd62jsr.webp" alt="屏幕截图-2025-01-05-155934"></p><p><img src="https://rockfox0.github.io/picx-images-hosting/eae24001bbe299decdd775bef1ea1800.73u0gaysyt.webp" alt="img"></p><p>明显|L|≈2N,但是明显N^2α^,N^1&#x2F;2+2α^,N^α2^,N^1+2α^.明显这里不符合定理要求需要构造一下，</p><blockquote><p>$M_1&#x3D;N$^1&#x2F;2^,$M_2&#x3D;N$^1+α^，得到</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-161454.83a4c4gc3x.webp" alt="屏幕截图-2025-01-05-161454"></p><p>根据上述条件</p><p><em>α</em>≤5&#x2F;14</p><p>把B2当作求出的最短向量。A&#x3D;B*L^-1^。这是我们就能得到A，A[1]&#x2F;A[0]&#x3D;$d_1g\over k_1$</p><p>φ(N)&#x3D;$edg\over k$-$g\over k$&#x3D;$edg\over k$</p></blockquote><h4 id="羊城杯-simple-py"><a href="#羊城杯-simple-py" class="headerlink" title="羊城杯 simple.py"></a>羊城杯 simple.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><br>key = <span class="hljs-string">&quot;abcdefgh&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">m</span>):<br>    des = DES.new(key, DES.MODE_ECB)<br>    res = des.encrypt(m)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    p = getPrime(<span class="hljs-number">2048</span>)<br>    q = getPrime(<span class="hljs-number">2048</span>)<br>    n = p * q<br>    bit = n.bit_length()<br>    phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    num = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        u = getPrime(bit / <span class="hljs-number">4</span> - num)<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(u, phi_n) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        t = gmpy2.invert(u, phi_n)<br>        e = bytes_to_long(des_encrypt(long_to_bytes(t)))<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(e, phi_n) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> (n, e)<br><br>P = getPrime(<span class="hljs-number">1024</span>)<br>Q = getPrime(<span class="hljs-number">1024</span>)<br>N = P * Q<br>E = <span class="hljs-number">65537</span><br>lcm = gmpy2.lcm(P-<span class="hljs-number">1</span>, Q-<span class="hljs-number">1</span>)<br>e1 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>e2 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, E, N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;N = &quot;</span> + <span class="hljs-built_in">str</span>(N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;e2 = &quot;</span> + <span class="hljs-built_in">str</span>(e2)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;c = &quot;</span> + <span class="hljs-built_in">str</span>(c)<br>_n, _e = gen_key()<br>_c = <span class="hljs-built_in">pow</span>(e1, _e, _n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_n = &quot;</span> + <span class="hljs-built_in">str</span>(_n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_e = &quot;</span> + <span class="hljs-built_in">str</span>(_e)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_c = &quot;</span> + <span class="hljs-built_in">str</span>(_c)<br><br><span class="hljs-comment"># N = 14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span><br><span class="hljs-comment"># e2 = 27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span><br><span class="hljs-comment"># c = 6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span><br><span class="hljs-comment"># _n = 440489238264900860776949063845200558734341182253911040104689726634414488997095518284964514078079911856352824174173937251558842251349762631716798307360995414545464514355957499460396352456341058329671470384493547042182238690727766731554287411757022792467324815342497916894285866240516524768645049867582541899123632009100512965460004548382054578461249990158442675234477122521189649316341623637146867589119951831385717513964941787562068891523060843170463600255518728070958509224053460041184869943038887434435024428311063533345514827827485121055022245800823723487812635502090530820946638405345755666124356919178290008475459419571761406117827422883820901663916276191422633940699113760516149002609672230610575442643822241126824287790055264162725209120192661985259423924307785452001927701323647247782658775780117642900694831475681037634691806232211286493187121464506122012889644137364079403183353774265910554863733455161820449073656744610495110838881353269890437984975607744603113572453211439334880155671730821755361054781243639407912133971530394031933785051770725331242932929244719594830548310768937037042243794551163891451545574837838357398072638709907958216067999891842395376953596940377457308329336524488962532620850237570279134567668379</span><br><span class="hljs-comment"># _e = 861605654852236668414010386016782729745549477722901970933220380452652052018502113737968204529790495739233258572209422774257139256367928649554562561889013164344608269555777150446651170697255381344437283003508476336814132594917061838422072660017477530465048729471603537912401826065081663165440462979219418291010867656746870617893935758241591032350010782861988742885918015532494020406350897048575155800941991107973433915573030255070411073793489218782862225921465295055907689734413881263179029741870520797816282420230090879687287575328294171448819803530205292587159921154471289747571107461754730577787617451127061265552788125691266357724955508391085485034126227212788895416902189479587194999818764639403752596165043883295506465916277734482380252399557395621566461322664559344483889187037851178431011220134914560438657522787409632677020269086895142488669203469256629173438313487046130238010206678820035631793666627274457756812810094004185303422637897314225624079032617334487815628021058997628511963565055629435278956251869329025544623291223984190562109149316159243565323565271491356378189561005084676592786453581431393651385181326525455441155960432946682976515756161038293313433862078763004704003356983371787414787104076401121444383911561</span><br><span class="hljs-comment"># _c = 305937839546594439230463861584604201077374759167468410827830943528403007941779658881672477705113617614828611332427199124217887937391378281943856159571057598203709366891547401974326016980711130197275312149966105151573748299654404630150641461765232935912266448303266990247145252052886920248198006212876273661195636104435277145396636985516064154534488750879453474211852461463041960835745695368577903786702607508492658563272121038693371752289017330781719235752018697635304458321008407930986565779826278048082764754367267460637798512780153281325733348999426407049795270044819657399403071013496169060640127279409914638535996355848933378734045908205536540619564723586905257569498716707820544351092379516465943537383422680357333849248129118148543389733395686399565999586899123087310025442994131218237679518267106194962305629529210402269726736072967966518381350920965727690274018080619332676536005722214955949897632990356174168234408837737546230730400434240785496100281815168806724358191550743656843853383646410487436540166360406982096949178466861150173527305369007546917550634679211293496458282787881244581230558011582720632502886494712233308474151958909251857281750741736910202763888790654287328846201724930302778996046434656839999091303411</span><br><br><br></code></pre></td></tr></table></figure><p>我们需要先求出e1，再通过e1和e2找到lcm，再通过lcm找到d和m</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">des_decrypt</span>(m):<br>    des = DES.<span class="hljs-built_in">new</span>(key, DES.MODE_ECB)<br>    res = des.<span class="hljs-built_in">decrypt</span>(m)<br>    return res<br>ciphertext = <span class="hljs-built_in">long_to_bytes</span>(_e)<br>decrypted_data = <span class="hljs-built_in">des_decrypt</span>(ciphertext)<br>_t=<span class="hljs-built_in">bytes_to_long</span>(decrypted_data)<br><span class="hljs-built_in">print</span>(_t)利用这个先求出_t<br></code></pre></td></tr></table></figure><p>t &#x3D; gmpy2.invert(u, phi_n)，这里t满足维纳攻击的条件可以利用t求出phi_n再解出_d和e1。_</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs excel">from gmpy2 import invert<br>def possible(e,alist,<span class="hljs-built_in">N</span>)<span class="hljs-symbol">:</span><br>    for x in ali<span class="hljs-symbol">st:</span><br>        <span class="hljs-built_in">if</span> x==<span class="hljs-symbol">0:</span><br>            continue<br>        <span class="hljs-built_in">phi</span>=(e*x.denominator()-<span class="hljs-number">1</span>)//x.numerator()<br>        <span class="hljs-built_in">if</span> (<span class="hljs-built_in">N</span>-<span class="hljs-built_in">phi</span>+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-built_in">and</span> <span class="hljs-built_in">sqrt</span>(pow((<span class="hljs-built_in">N</span>-<span class="hljs-built_in">phi</span>+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)-<span class="hljs-built_in">N</span>).is_integer()<span class="hljs-symbol">:</span><br>            (p,q)=<span class="hljs-built_in">var</span>(&#x27;p q&#x27;)<br>            <span class="hljs-built_in">Phi</span>=<span class="hljs-built_in">phi</span><br>            return <span class="hljs-built_in">Phi</span><br>        el<span class="hljs-symbol">se:</span><br>            continue<br>def wienner_attack(e,<span class="hljs-built_in">N</span>)<span class="hljs-symbol">:</span><br>    c=continued_fraction(e/<span class="hljs-built_in">N</span>)#获取连分数集合<br>    alist=c.convergents()#利用连分数得到连分数收敛<br>    return possible(e,alist,<span class="hljs-built_in">N</span>)<br>_<span class="hljs-built_in">t</span>=<br>_c = <br>_<span class="hljs-built_in">n</span> = <br>_e = <br><span class="hljs-built_in">phi</span>=wienner_attack(_<span class="hljs-built_in">t</span>,_<span class="hljs-built_in">n</span>)<br><span class="hljs-symbol">d1</span>=invert(_e,<span class="hljs-built_in">phi</span>)<br><span class="hljs-symbol">e1</span>=pow(_c,<span class="hljs-symbol">d1</span>,_<span class="hljs-built_in">n</span>)<br>print(<span class="hljs-symbol">e1</span>)<br></code></pre></td></tr></table></figure><p>利用e1构造矩阵得到phi在求出m</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from gmpy2 import invert<br>from Crypto<span class="hljs-selector-class">.Util</span><span class="hljs-selector-class">.number</span> import bytes_to_long, long_to_bytes<br>c = <br>e2 = <br>e1 = <br>N  = <br><span class="hljs-selector-tag">a</span>  = <span class="hljs-number">5</span>./<span class="hljs-number">14</span><br>M1=N**<span class="hljs-number">0.5</span><br>M2= N **(a+<span class="hljs-number">1</span>)<br>D = <span class="hljs-built_in">diagonal_matrix</span>(ZZ,<span class="hljs-selector-attr">[N,M1,M2,1]</span>)<br>M=<span class="hljs-built_in">matrix</span>(ZZ,<span class="hljs-selector-attr">[[1,-N,0,N**2]</span>,<span class="hljs-selector-attr">[0,e1,-e1,-e1*N]</span>,<span class="hljs-selector-attr">[0,0,e2,-e2*N]</span>,<span class="hljs-selector-attr">[0,0,0,e1*e2]</span>])*D<br>L=M<span class="hljs-selector-class">.LLL</span>()<br>t=<span class="hljs-built_in">vector</span>(ZZ,L<span class="hljs-selector-attr">[0]</span>)<br><span class="hljs-attribute">x</span>=t*M**(-<span class="hljs-number">1</span>)<br>phi = <span class="hljs-built_in">int</span>(<span class="hljs-attribute">x</span>[<span class="hljs-number">1</span>]/x[<span class="hljs-number">0</span>]*e1)<br>d = <span class="hljs-built_in">invert</span>(<span class="hljs-number">0</span>x10001,phi)<br>m=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,N))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(long_to_bytes(m)</span></span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>RSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DSA签名算法</title>
    <link href="/2024/12/29/DSA%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95/"/>
    <url>/2024/12/29/DSA%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DSA签名算法"><a href="#DSA签名算法" class="headerlink" title="DSA签名算法"></a>DSA签名算法</h1><h2 id="DSA算法简介"><a href="#DSA算法简介" class="headerlink" title="DSA算法简介"></a>DSA算法简介</h2><p>DSA（Digital Signature Algorithm）是Schnorr和ElGamal<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95&zhida_source=entity">签名算法</a>的变种，被美国NIST作为DSS(DigitalSignature Standard) 数字签名的标准。</p><p>DSA是一种更高级的验证方式，它是一种<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E7%AE%97%E6%B3%95&zhida_source=entity">公开密钥算法</a>，不能用来加密数据，一般用于数字签名和认证。DSA 不单单只有公钥、私钥，还有数字签名。私钥加密生成数字签名，公钥验证数据及签名。在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性，包括数据的完整性以及数据发送者的身份。如果数据和签名不匹配则认为验证失败！数字签名的作用就是校验数据在传输过程中不被修改。</p><p>DSA数字签名可以理解为是<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86&zhida_source=entity">单向加密</a>的升级，不仅校验数据完整性，还校验发送者身份，同时还由于使用了非对称的密钥来保证密钥的安全，所以相比消息摘要算法更安全。</p><p>DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2&zhida_source=entity">密钥交换</a>，只用于签名,它比RSA要快很多。</p><h2 id="DSA算法签名的过程"><a href="#DSA算法签名的过程" class="headerlink" title="DSA算法签名的过程"></a>DSA算法签名的过程</h2><ol><li>使用<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=2&q=%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95&zhida_source=entity">消息摘要算法</a>（例如sha-256&#x2F;md5)将要发送数据加密生成信息摘要。</li><li>发送方用自己的DSA私钥对信息摘要再加密，形成数字签名。</li><li>将原报文和加密后的数字签名一并通过互联网传给接收方。</li><li>接收方用发送方的公钥对数字签名进行解密，同时对收到的数据用消息摘要算法产生同一信息摘要。</li><li>将解密后的信息摘要和收到的数据在接收方重新加密产生的摘要进行比对校验，如果两者一致，则说明在传送过程中信息没有破坏和篡改；否则，则说明信息已经失去安全性和保密性。</li></ol><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>DSA是证书基于有限域离散对数的难题。</p><ul><li><strong>相关参数</strong></li></ul><p>p:一个素模数，其值满足:2^ (L-1)&lt;p&lt;2^L,  L是64的倍数满足512&lt;&#x3D;L&lt;&#x3D;1024</p><p>q:(p-1)的素数因子，其值满足2^159^&lt;p&lt;2^160^ 即q长度为160.</p><p>g:g&#x3D;pow(h,(p-1)&#x2F;q,p).h满足1&lt;h&lt;p-1 的任意整数，从而有pow(h,(p-1)&#x2F;q,p)&gt;1</p><p>x:私钥。x为一个伪随机或随机生成的整数，其值满足0&lt;x&lt;q</p><p>y:公钥。y&#x3D;pow(g,x,p)</p><ul><li><strong>DSA签名过程:</strong></li></ul><ol><li>产生一个随机数k，其值大小满足0&lt;k&lt;q</li><li>计算r&#x3D;pow(g,k,p) mod p,其值满足r&gt;0</li><li>计算S&#x3D;（K^(-1)(SHA(M)+x*r))mod q,其值满足s&gt;0</li></ol><p>k^(-1)表示整数k关于某个模的逆元。k在每次签名都重新生成</p><p>sha(M):M的hash值，M为待签名的明文，sha是一个单向散列函数。SHA(M)是一个长为160bites的字符串。</p><p>4。 最终签名是证书对(r,s)，它们和M一起发送到验证方</p><ol start="5"><li>尽管 r 和 s 为 0 的概率相当小，但只要有任何一个为 0 ，必须重新生成 k，并重新计算 r 和 s</li></ol><ul><li><strong>DSA验证签名过程</strong></li></ul><blockquote><p>w&#x3D;s^-1^(mod p);计算u1&#x3D;SHA(M)*w(mod p)</p><p>u2&#x3D;r*w(mod q) </p><p>v&#x3D;(g^u1^y^u2^(mod p))(mod q)</p><p>验证v&#x3D;r</p><p>r&#x3D;pow(g,k,p)(mod q)</p><p>我们要证v&#x3D;r， 只需证明gu1⋅yu2≡gk(modp)mod q</p></blockquote><img src="https://raw.githubusercontent.com/rockfox0/picx-images-hosting/master/dsa1.7lk2cajx72.webp" style="zoom:33%;" /><h2 id="一道关于签名的题"><a href="#一道关于签名的题" class="headerlink" title="一道关于签名的题"></a>一道关于签名的题</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><br>from secret import r<span class="hljs-punctuation">,</span> t<span class="hljs-punctuation">,</span>flag<br>from Crypto.Util.number import *<br><br>flag <span class="hljs-punctuation">=</span> bytes_to_long<span class="hljs-punctuation">(</span>flag.encode<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>e <span class="hljs-punctuation">=</span> <span class="hljs-number">65537</span><br><br>def gen_keys<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">:</span><br>    p <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>    q <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>    phi <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>p<span class="hljs-punctuation">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span>*<span class="hljs-punctuation">(</span>q<span class="hljs-punctuation">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    d <span class="hljs-punctuation">=</span> inverse<span class="hljs-punctuation">(</span>e<span class="hljs-punctuation">,</span>phi<span class="hljs-punctuation">)</span><br>    n <span class="hljs-punctuation">=</span> p*q<br>    print<span class="hljs-punctuation">(</span>f&#x27;n = &#123;n&#125;&#x27;<span class="hljs-punctuation">)</span><br>    Gensin_imapct <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>d ** <span class="hljs-number">6</span> <span class="hljs-punctuation">+</span> <span class="hljs-number">7</span><span class="hljs-punctuation">)</span> % phi<br>    print<span class="hljs-punctuation">(</span>f&#x27;Gensin_imapct= &#123;Gensin_imapct&#125;&#x27;<span class="hljs-punctuation">)</span><br>    return d<span class="hljs-punctuation">,</span> n<span class="hljs-punctuation">,</span> Gensin_imapct<br><br>def sign_in<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">,</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">:</span><br>    m <span class="hljs-punctuation">=</span> flag * <span class="hljs-built_in">pow</span><span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">,</span>e**<span class="hljs-number">3</span><span class="hljs-punctuation">+</span>d**<span class="hljs-number">4</span><span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">)</span> % n<br>    s <span class="hljs-punctuation">=</span> <span class="hljs-built_in">pow</span><span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">,</span>d**<span class="hljs-number">2</span><span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">)</span><br>    return s<br><br>def clue<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">:</span><br>    assert t &gt; <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>r &gt; <span class="hljs-number">1</span><br>    clue <span class="hljs-punctuation">=</span> <span class="hljs-built_in">pow</span><span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">,</span>t<span class="hljs-punctuation">)</span><span class="hljs-punctuation">+</span><span class="hljs-number">1</span><br>    <span class="hljs-meta">#print(t)</span><br>    print<span class="hljs-punctuation">(</span>isPrime<span class="hljs-punctuation">(</span>clue<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>d<span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">,</span>Gensin_imapct <span class="hljs-punctuation">=</span> gen_keys<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>clue<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>sign <span class="hljs-punctuation">=</span> sign_in<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">,</span>d<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;sign = &#123;sign&#125;&#x27;<span class="hljs-punctuation">)</span><br><br>&#x27;&#x27;&#x27;<br>n = <span class="hljs-number">19639600328223</span><span class="hljs-number">84467170448912</span><span class="hljs-number">35469885019032</span><span class="hljs-number">91473349872361</span><span class="hljs-number">01873374900992</span><span class="hljs-number">35320163949095</span><span class="hljs-number">67762757637482</span><span class="hljs-number">27981733198307</span><span class="hljs-number">18606820715206</span><span class="hljs-number">55098361565285</span><span class="hljs-number">24171541461838</span><span class="hljs-number">07043355911537</span><span class="hljs-number">76055798928550</span><span class="hljs-number">29596256255556</span><span class="hljs-number">09821531659803</span><span class="hljs-number">97579235902710</span><span class="hljs-number">14581030885883</span><span class="hljs-number">83616253063214</span><span class="hljs-number">88259768221057</span><span class="hljs-number">35233257594943</span><span class="hljs-number">49507721269702</span><span class="hljs-number">11685369981876</span><span class="hljs-number">61347072502855</span><span class="hljs-number">83246543964703</span><span class="hljs-number">04051821380286</span><span class="hljs-number">34998049047122</span><span class="hljs-number">05450221890639</span><span class="hljs-number">94727777531050</span><span class="hljs-number">92338755867733</span><span class="hljs-number">86805066295473</span><span class="hljs-number">93515821317364</span><span class="hljs-number">70784436503385</span><span class="hljs-number">51391338657593</span><span class="hljs-number">55286813851518</span><span class="hljs-number">29489714323857</span><span class="hljs-number">99295497313102</span><span class="hljs-number">23985355362071</span><span class="hljs-number">60512827633675</span><span class="hljs-number">81487024513259</span><span class="hljs-number">80353936486982</span><span class="hljs-number">95761231935673</span><span class="hljs-number">28112121558438</span><span class="hljs-number">88427077650287</span><span class="hljs-number">47574728595160</span>1<br>Gensin_imapct= <span class="hljs-number">18615555428360</span><span class="hljs-number">73720385848311</span><span class="hljs-number">97613798031066</span><span class="hljs-number">44123408751679</span><span class="hljs-number">93935871527101</span><span class="hljs-number">93226223071624</span><span class="hljs-number">05939351971133</span><span class="hljs-number">49434361718733</span><span class="hljs-number">61429064747281</span><span class="hljs-number">42088496643169</span><span class="hljs-number">39425060989161</span><span class="hljs-number">84658671434281</span><span class="hljs-number">66101133715080</span><span class="hljs-number">08672890560522</span><span class="hljs-number">58234178266565</span><span class="hljs-number">87225513551367</span><span class="hljs-number">39429001353366</span><span class="hljs-number">55190422227648</span><span class="hljs-number">01563252344045</span><span class="hljs-number">26317511663378</span><span class="hljs-number">66573505541269</span><span class="hljs-number">06044647802447</span><span class="hljs-number">91115016937996</span><span class="hljs-number">85793286356164</span><span class="hljs-number">55291791600544</span><span class="hljs-number">04011586231897</span><span class="hljs-number">77493819354020</span><span class="hljs-number">23854289083858</span><span class="hljs-number">69456073212978</span><span class="hljs-number">84481858791649</span><span class="hljs-number">09390679473356</span><span class="hljs-number">53489678909744</span><span class="hljs-number">38067150657024</span><span class="hljs-number">02663094294822</span><span class="hljs-number">60023169901634</span><span class="hljs-number">43409951591975</span><span class="hljs-number">84811683173565</span><span class="hljs-number">57541315705141</span><span class="hljs-number">19138583237472</span><span class="hljs-number">95630124277461</span><span class="hljs-number">05236672734074</span><span class="hljs-number">08969327099398</span><span class="hljs-number">98865571387315</span><span class="hljs-number">26292041808679</span>6<br>1<br>sign = <span class="hljs-number">18261288204538</span><span class="hljs-number">98118157203048</span><span class="hljs-number">27597984265847</span><span class="hljs-number">90136542118628</span><span class="hljs-number">59672989593212</span><span class="hljs-number">17958474429167</span><span class="hljs-number">05403582815245</span><span class="hljs-number">84790036056298</span><span class="hljs-number">52836449001592</span><span class="hljs-number">84591973184497</span><span class="hljs-number">64410933317169</span><span class="hljs-number">82897124114044</span><span class="hljs-number">41725787627481</span><span class="hljs-number">26221751595280</span><span class="hljs-number">43832658613950</span><span class="hljs-number">76527124697355</span><span class="hljs-number">90424448908497</span><span class="hljs-number">68659898808439</span><span class="hljs-number">29716655444342</span><span class="hljs-number">66745079347402</span><span class="hljs-number">89112385815614</span><span class="hljs-number">97418112019001</span><span class="hljs-number">37134278753663</span><span class="hljs-number">90061291630074</span><span class="hljs-number">54921434977528</span><span class="hljs-number">44144796958648</span><span class="hljs-number">14381738638647</span><span class="hljs-number">29524626228931</span><span class="hljs-number">57776771994548</span><span class="hljs-number">62423889409624</span><span class="hljs-number">27531910977068</span><span class="hljs-number">38634387659596</span><span class="hljs-number">60041452765723</span><span class="hljs-number">20724583981474</span><span class="hljs-number">33491427033501</span><span class="hljs-number">64863896170184</span><span class="hljs-number">40139421924715</span><span class="hljs-number">45946760153334</span><span class="hljs-number">90120458473155</span><span class="hljs-number">24603087767378</span><span class="hljs-number">61250198418837</span><span class="hljs-number">67276980680906</span><span class="hljs-number">18376138788002</span><span class="hljs-number">60718292723081</span>1<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>欧拉定理的应用。</p><p>如果a&#x3D;b mod(ϕ(n))</p><p>那么r^a&#x3D;r^b(mod n)</p><p>关于r，因为r&gt;1。r^t+1为素数</p><p>当t&#x3D;1时，r&#x3D;一个素数-1有无数中情况</p><p>当t!&#x3D;1，r^t^+1&#x3D;(r-1)(r^t-1^+r^t-2^+…+r-1)。r&gt;1，仅当r&#x3D;2时r-1&#x3D;1，才可能出现r^t^+1为质数。</p><p>sign&#x3D;flag^d2^*pow(r,e^3^+d^6^,n)(mod n)</p><p>利用欧拉定理化简，ed&#x3D;1mod(ϕ(n))</p><p>sign&#x3D;flag^d2^*pow(r,e+Gensin_imapct-7,n)mod(n)</p><p>解题代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">from Crypto.Util.number import long_to_bytes, inverse</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">n = 19639600328223844671704489123546988501903291473349872361018733749009923532016394909567762757637482279817331983071860682071520655098361565285241715414618380704335591153776055798928550295962562555560982153165980397579235902710145810308858838361625306321488259768221057352332575949434950772126970211685369981876613470725028558324654396470304051821380286349980490471220545022189063994727777531050923387558677338680506629547393515821317364707844365033855139133865759355286813851518294897143238579929549731310223985355362071605128276336758148702451325980353936486982957612319356732811212155843888427077650287475747285951601</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">Gensin_imapct= 18615555428360737203858483119761379803106644123408751679939358715271019322622307162405939351971133494343617187336142906474728142088496643169394250609891618465867143428166101133715080086728905605225823417826656587225513551367394290013533665519042222764801563252344045263175116633786657350554126906044647802447911150169379968579328635616455291791600544040115862318977749381935402023854289083858694560732129788448185879164909390679473356534896789097443806715065702402663094294822600231699016344340995159197584811683173565575413157051411913858323747295630124277461052366727340740896932709939898865571387315262920418086796</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">r=2</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">e=65537</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">sign = 18261288204538981181572030482759798426584790136542118628596729895932121795847442916705403582815245847900360562985283644900159284591973184497644109333171698289712411404441725787627481262217515952804383265861395076527124697355904244489084976865989880843929716655444342667450793474028911238581561497418112019001371342787536639006129163007454921434977528441447969586481438173863864729524626228931577767719945486242388940962427531910977068386343876595966004145276572320724583981474334914270335016486389617018440139421924715459467601533349012045847315524603087767378612501984188376727698068090618376138788002607182927230811</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">flagd2=sign*inverse(pow(r,e+Gensin_imapct-7,n),n)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">flag=pow(flagd2,e**2,n)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">print</span>(long_to_bytes(flag))</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-string">b&#x27;</span>SYC&#123;G0od_Math_h3lps_S1gnature_in_RSA&#125;<span class="hljs-string">&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span></span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CRT中国剩余定理复现</title>
    <link href="/2024/12/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/12/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="极客大挑战2024中国剩余定理复现"><a href="#极客大挑战2024中国剩余定理复现" class="headerlink" title="极客大挑战2024中国剩余定理复现"></a>极客大挑战2024中国剩余定理复现</h1><h2 id="CRT-中国剩余定理"><a href="#CRT-中国剩余定理" class="headerlink" title="CRT(中国剩余定理)"></a>CRT(中国剩余定理)</h2><h3 id="一些定理的证明"><a href="#一些定理的证明" class="headerlink" title="一些定理的证明"></a>一些定理的证明</h3><p>1.证明辗转相除法</p><blockquote><p>a&#x3D;bq+r</p><p>证明gcd(a,b)&#x3D;gcd(b,r)</p><p>已知gcd(a,b)|a,gcd(a,b)|b</p><p>r&#x3D;a-bq,—&gt;gcd(a,b)|r</p><p>所有gcd(a,b)&lt;&#x3D;gcd(b,r)</p><p>gcd(b,r)|b,gcd(b,r)|r并且gcd(b,r)|a</p><p>所以gcd(b,c)&lt;&#x3D;gcd(a,b)</p></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs PY"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">while</span> b!=<span class="hljs-number">0</span>:<br>        r=a%b<br>        a=b<br>        b=r<br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入a&quot;</span>)<br>a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入b&quot;</span>)<br>b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(gcd(a,b))<br>n=<span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> n!=<span class="hljs-number">0</span>:<br>    n=n-<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(n)<br><br></code></pre></td></tr></table></figure><ol start="2"><li>证明裴蜀定理</li></ol><blockquote><p>如果a和b是不为0的整数，则有整数x,y，是的ax+by&#x3D;gcd(a,b)</p><p>gcd(a,b)&#x3D;gcd(b,a%b&#x3D;r1)&#x3D;gcd(r1,b%r1&#x3D;r2)&#x3D;gcd(r2,r1%r2&#x3D;r3)&#x3D;gcd(r3,r2%r3&#x3D;0),,r3为最大公约数</p><p>r3&#x3D;r1-?r2,&#x3D;r1-(b-?r1)&#x3D;?r1+?b&#x3D;?(a-b?)+?b&#x3D;?a+?b(?为任意整数)</p><p>推论：</p><p><strong>a,b互质&lt;–&gt;ax+by&#x3D;1</strong>(a,b不全为0)</p><p><strong>如果a和b是不全为0的整数，并且ax+by&#x3D;c有解，那么c一定是gcd(a,b)的整数倍</strong></p><p>a和b两项的裴蜀定理可以推广到多项（ax+by+cz&#x3D;gcd(a,b,c)</p></blockquote><ol start="3"><li>扩展欧几里得算法</li></ol><blockquote></blockquote><p>1.用于处理一元线性同余方程组问题</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b3e3b83a47f7942fa7337d9157658625d6685ef0"></p><p>举例一个类似的线性矩阵，满足m之间互质，则对于任意a，X有解。</p><p>Mi表示m<sub>1</sub>*m<sub>2</sub>*…*m<sub>n-1</sub></p><p>$$\prod_{i&#x3D;1}^{n} i&#x3D;M$$</p><p>t<sub>i</sub>&#x3D;M<sub>i</sub><sup>-1</sup>即他们互为倒数</p><p>可以得到t<sub>i</sub>*m<sub>i</sub>&#x3D;1mod(m<sub>i</sub>)</p><p>可以得到</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/105e4e1aa217620e7ebfa31a2c894845dd2ca1df" alt="{\displaystyle x=a_{1}t_{1}M_{1}+a_{2}t_{2}M_{2}+\cdots +a_{n}t_{n}M_{n}+kM=kM+\sum _{i=1}^{n}a_{i}t_{i}M_{i},\quad k\in \mathbb {Z} .}"></p><p>如果对x去模M则就有<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/56e89d12fd609dc39d5c6919c2d9c47252dbf829" alt="{\displaystyle x=\sum _{i=1}^{n}a_{i}t_{i}M_{i}.}">唯一解，也是最小解</p><p>做题WP</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br><span class="hljs-keyword">from</span><span class="hljs-built_in"> secret </span>import flag<br><br>p = [getPrime(1024) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4)]<br>A = random_matrix(ZZ,4,4)<br>x = vector(p)<br>C = A*x<br>m = bytes_to_long(flag)<br>C_list = [m^2 % p[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p]<br><br><span class="hljs-built_in">print</span>(A.list())<br><span class="hljs-built_in">print</span>(C.list())<br><span class="hljs-built_in">print</span>(C_list)<br></code></pre></td></tr></table></figure><p>p &#x3D; [getPrime(1024) for i in range(4)]随机生成四个1024位的大素数。</p><p>A &#x3D; random_matrix(ZZ,4,4)随机生成一个4*4矩阵。</p><p>x &#x3D; vector(p)将p变成4维向量X。</p><p>C&#x3D;A*X&#x2F;&#x2F;A与X矩阵相乘得到C。</p><p>m &#x3D; bytes_to_long(flag)。将flag从字节转换成一个长整数。</p><p>C_list &#x3D; [m^2 % p[i] for i in p]。将m<sup>2</sup>模p中的每个数，得到有四个元素的列表C_list。</p><p>我们反推这个题，已知C，A，C_list。先通过C &#x3D; A*x反推出X然后得到P。然后通过P利用中国剩余定理，得到m<sup>2</sup>最后得到flag</p><p>python解密代码如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from sympy import Matrix, floor, sqrt<br>from sympy.ntheory.modular import solve_congruence<br>from Crypto.Util.number import long_to_bytes<br><br><span class="hljs-comment"># 已知矩阵 A 和向量 C</span><br>A = Matrix([[0, 3, 13, -14], [3, 23, 0, -2], [1, 0, -2, -2], [0, 6, 23, -1]])<br>C = Matrix([<br>    240291916026450853326299190970230346016172195881040521282143062887044415649037529786726996601318182310764736460576505905853588791461834136499382728467644441025444276310127878088660033443492552638740545000926442503220444210798223930409598242340803157100462304319147723884276724762657521839584789559871925165760,<br>    2717720293948071692375399406613869670771599238582123998465247515177734926976499453293454850275431149956050441808723146824893873695181057831740557746748569414755121567964485941329619805530387035869417797456365550166284561344481782536841750836701781173446215190576686468572143336023976555984489188188587442599216,<br>    -533548100977056273203151152482369923618163132589214562561487066657940175907095576692149455190734101432827064737665463493053792538736227178020400115918642405290979502807029452417998359787492016936318980930297669652709045919397558996256596914383243332942443302758025216611814306941895320000161610678184972875739,<br>    4222318758561393352580663599337085248915805543151591039306576069590530359211724446951051459283547556643285440266930522614603788902068741368143298763016144907986405290404635699093289327803758616517987063925407686664235188616756483626348375811993157044295992929396465160478520815655459249252288507190574794338922<br>])<br><br><span class="hljs-comment"># 求解 x 向量</span><br>x = A.LUsolve(C)  <span class="hljs-comment"># 使用 sympy 的 LU 分解来解线性方程组，避免浮点数溢出</span><br><br><span class="hljs-comment"># 模数和余数列表</span><br>p = list(x)<br>C_list = [<br>    1480960470329638043680688727038239738930475793098218659683171073192289938334049452419257815941575064684613256921077170955193683633002228493232830695650419041071577617101320586384<br>] * 4<br><br><span class="hljs-comment"># 使用 solve_congruence 求解 m^2</span><br>congruences = [(C_list[i], p[i]) for i in range(4)]<br>m_squared, _ = solve_congruence(*congruences)<br><br><span class="hljs-comment"># 求解 m</span><br>m = floor(sqrt(m_squared))<br>flag = long_to_bytes(m)<br><br>print(<span class="hljs-string">&quot;解出的 flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><p>flag: b’MaybeLinearAlgebraStillNeedYourEffort’</p><h3 id="扩展知识–如果模数不互质"><a href="#扩展知识–如果模数不互质" class="headerlink" title="扩展知识–如果模数不互质"></a>扩展知识–如果模数不互质</h3><h4 id="扩展欧几里得定理和裴蜀定理。"><a href="#扩展欧几里得定理和裴蜀定理。" class="headerlink" title="扩展欧几里得定理和裴蜀定理。"></a>扩展欧几里得定理和裴蜀定理。</h4><p>描述：<strong>一定存在整数 x, y 满足等式 a * x + b * y &#x3D; gcd(a,b)</strong></p><p>证明，。</p><blockquote><ul><li>如果b&#x3D;0,，则 gcd⁡(a,b)&#x3D;∣a∣,此时我们取x&#x3D;1或-1和y&#x3D;0显然满足a<em>x+b</em>y&#x3D;d。</li><li>如果b≠0,根据欧几里得几何算法，可以写出：</li></ul><p>a&#x3D;b*q+r即a其中 q 是商，r是余数，且 0≤r&lt;∣b∣。根据这一表示法，我们有gcd(a,b)&#x3D;gcd(b,r)</p><p>现在我将问题转化为证明：存在整数x’和y’，是的</p><ul><li><strong>b<em>x’+r</em>y’&#x3D;gcd(b,r)</strong></li></ul><p>根据数学归纳法，这个等式成立。</p><ul><li>由于r&#x3D;a-bq,我们可以将r带入上式</li></ul><p>*<em>bx’+(a-bq)<em>y’&#x3D;d,</em></em></p><p><strong>ay’+b(x’-qy’)&#x3D;d</strong></p><p>这表明，若令x&#x3D;y’和y&#x3D;x’-qy’，那么ax+by&#x3D;d</p><p>那么我们一步步递归就能得到余数，有点类似辗转相除，递归的每一步b,q,d,,a都是整数，递归到最后一步的整除倍数</p><p>r<sub>k-2</sub>&#x3D;r<sub>k-1</sub>*q<sub>k</sub>+r<sub>k</sub></p><p>r<sub>k-1</sub>&#x3D;r<sub>k</sub>*q<sub>k+1</sub>+0</p><p>r<sub>k</sub>&#x3D;r<sub>k-2</sub>-q<sub>k</sub>r<sub>k-1</sub></p><p>d&#x3D;x<sub>k</sub>r<sub>k-2</sub>+y<sub>k</sub>r<sub>k-1</sub></p><p>明显x<sub>k</sub>&#x3D;1,y<sub>k</sub>&#x3D;-q<sub>k</sub>为整数</p><p>向上步步递归可以得到的x和y也为整数。</p><ul><li>我们通过扩展欧几里得算法一般得到的是特解(x<sub>0</sub>,y<sub>0</sub>)满足</li></ul><p>ax+by&#x3D;d.我们需要证明所有满足此方程的整数解（x,y)的形式是。k为任意整数。</p><p><strong>x&#x3D;x<sub>0</sub>+(b&#x2F;d)k,</strong></p><p><strong>y&#x3D;y<sub>0</sub>-(a&#x2F;d)k;</strong></p><p>我们将两对解相减得到</p><p><em><em>a*(x<sub>1</sub>-x<sub>0</sub>)+b</em>(y<sub>1</sub>-y<sub>0</sub>)&#x3D;0</em>*</p><p>a*(x<sub>1</sub>-x<sub>0</sub>)&#x3D;-b*(y<sub>1</sub>-y<sub>0</sub>)</p><p>满足比例关系-b&#x2F;a&#x3D;(x<sub>1</sub>-x<sub>0</sub>)&#x2F;(y<sub>1</sub>-y<sub>0</sub>)</p><p>并且gcd(a,b)&#x3D;d，对a和b同时除以公因子,b&#x2F;a完成化简。</p><p>就能得到*<em>x<sub>1</sub>-x<sub>0</sub>&#x3D;(b&#x2F;d)<em>k</em></em>||y<sub>1</sub>-y<sub>0</sub>&#x3D;-(a&#x2F;d)*k</p><p>最后得到通解。</p></blockquote><h4 id="中国剩余不互质的应用（假设求的数为ans"><a href="#中国剩余不互质的应用（假设求的数为ans" class="headerlink" title="中国剩余不互质的应用（假设求的数为ans)"></a>中国剩余不互质的应用（假设求的数为ans)</h4><blockquote><p>中国剩余定理是用于求一个最小的xx，满足$x≡ci(modmi)cocrt$</p><p>一般的中国剩余定理都满足mi之间互质，这里扩展的是不互质的情况</p><p>假设我们现在有两条方程:</p></blockquote><p>$$<br>\left{<br>\begin{aligned}<br>x &amp; ≡ c_1(modm_1) \<br>x &amp;≡ c_2(mod m_2)\<br>\end{aligned}<br>\right.<br>$$</p><p>展开同余<br>$$<br>\left{<br>\begin{aligned}<br>x&#x3D;c_1+m_1k_1 \<br>x&#x3D;c_2+m_2k_2\<br>\end{aligned}<br>\right.<br>$$</p><p>联立得解:$m_1k_1&#x3D;(c_2-c_1)+m_2k_2$</p><p>若方程有解,$(m1,m2)|(c2−c1)$</p><p>令$d&#x3D;(m1,m2)$</p><p>两边同时除以d</p><p>$m_1 k_1\over d$&#x3D;$c_2-c_1\over d$(mod $m_2 \over d$)</p><p>k1&#x3D;inv($m_1 \over d$,$m_2 \over d$)*$c_2-c_1\over d$(mod $m_2 \over d$)</p><p>最后得到：$x≡inv(m1&#x2F;d,m2&#x2F;d)×(c2−c1)&#x2F;d×m1+c1(mod(m1m2)&#x2F;d)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">b&#x27;SYC&#123;...&#125;&#x27;</span><br>m = bytes_to_long(flag+<span class="hljs-string">b&#x27;\x01&#x27;</span>*<span class="hljs-number">23</span>)<br><br>p = [<span class="hljs-number">0</span>]*<span class="hljs-number">5</span><br>c = [<span class="hljs-number">0</span>]*<span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    p0 = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">100</span>,<span class="hljs-number">2</span>**<span class="hljs-number">101</span>)<br>    p[i] = p0<br>c = [m%p[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = [1921232050179818686537976490035, 2050175089402111328155892746480, 1960810970476421389691930930824, 1797713136323968089432024221276, 2326915607951286191807212748022]</span><br><span class="hljs-string">c = [1259284928311091851012441581576, 1501691203352712190922548476321, 1660842626322200346728249202857, 657314037433265072289232145909, 2056630082529583499248887436721]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>m模p得到c，并且p不是互质的。这里要使用不互质的算法</p><p>解题代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> gcdex<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uni</span>(<span class="hljs-params">P,Q</span>):<br>    c1,m1=P<br>    c2,m2=Q<br>    d=gcd(m1,m2)<br>    <span class="hljs-keyword">assert</span> (c2-c1)%d==<span class="hljs-number">0</span><br>    l=inverse(m1//d,m2//d)<br>    <span class="hljs-built_in">print</span>(l)<br>    <span class="hljs-keyword">return</span> (c1 + (c2 - c1) // d * l * m1) % lcm(m1, m2), lcm(m1, m2)<span class="hljs-comment">#返回的是一个元组</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">eq</span>):<br>    <span class="hljs-keyword">return</span> reduce(uni, eq)<span class="hljs-comment">#</span><br><br><br>ms = [<span class="hljs-number">1921232050179818686537976490035</span>, <span class="hljs-number">2050175089402111328155892746480</span>, <span class="hljs-number">1960810970476421389691930930824</span>,<br>      <span class="hljs-number">1797713136323968089432024221276</span>, <span class="hljs-number">2326915607951286191807212748022</span>]<br>cs = [<span class="hljs-number">1259284928311091851012441581576</span>, <span class="hljs-number">1501691203352712190922548476321</span>, <span class="hljs-number">1660842626322200346728249202857</span>,<br>      <span class="hljs-number">657314037433265072289232145909</span>, <span class="hljs-number">2056630082529583499248887436721</span>]<br>flag, lcm = CRT(<span class="hljs-built_in">zip</span>(cs, ms))<span class="hljs-comment">#把两个列表打包，依次对应有点像二维数组,但其实返回的是元组</span><br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">90728466640069861245808807287</span><br><span class="hljs-string">88626484234357944548738818769</span><br><span class="hljs-string">341093009098982253215042305269</span><br><span class="hljs-string">635742831101395206473512021361</span><br><span class="hljs-string">b&#x27;SYC&#123;wha+s_wr0n9!_CRT_bu+_n0+_&lt;0mpr1me!&#125;\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="rnocrt"><a href="#rnocrt" class="headerlink" title="rnocrt"></a>rnocrt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> x<br><br>m = [getRandomNBitInteger(<span class="hljs-number">256</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>u = hashlib.sha256(x).hexdigest()<br><span class="hljs-keyword">assert</span> u[:<span class="hljs-number">5</span>]==<span class="hljs-string">b&#x27;6a651&#x27;</span><br>flag = <span class="hljs-string">b&#x27;SYC&#123;&#x27;</span>+u+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br>c = [x % i  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment">#[207867980504656835313307696396607264603, 245036212212570610987366430554968489325, 270836744824069537438646110613439698666, 319275775495422875474878625752594133023, 254268823435329877199449670714528712873, 213093607196415232366564484229844568444, 246921085368773491003187313772615702950]</span><br><span class="hljs-comment">#[150031581047390726903711035932621949276, 21260202376534810598778595491323328519, 144049733622518360270048059408969512643, 236920143187836025924037873968303507493, 99781504248790469459151935530031893836, 69236016568483424294966410179787943383, 20613188366058016717435734248097940419]</span><br></code></pre></td></tr></table></figure><p>这个题跟上个题很像，但是上一个返回的最小值就是flag这个需要一定的爆破，并且注意数据的类型</p><p>因为f是被mod各个mi最大公约数的结果，属于值最小的可能,我们可以挨个f+i&#x2F;*lcm知道得到最大值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uni</span>(<span class="hljs-params">P,Q</span>):<br>    c1,m1=P<br>    c2,m2=Q<br>    d=gcd(m1,m2)<br>    <span class="hljs-keyword">assert</span> (c2-c1)%d==<span class="hljs-number">0</span><br>    l=inverse(m1//d,m2//d)<br>    <span class="hljs-built_in">print</span>(l)<br>    <span class="hljs-keyword">return</span> (c1 + (c2 - c1) // d * l * m1) % lcm(m1, m2), lcm(m1, m2)<span class="hljs-comment">#返回的是一个元组</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">eq</span>):<br>    <span class="hljs-keyword">return</span> reduce(uni, eq)<span class="hljs-comment">#</span><br><br><br>ms = [<span class="hljs-number">207867980504656835313307696396607264603</span>, <span class="hljs-number">245036212212570610987366430554968489325</span>, <span class="hljs-number">270836744824069537438646110613439698666</span>, <span class="hljs-number">319275775495422875474878625752594133023</span>, <span class="hljs-number">254268823435329877199449670714528712873</span>, <span class="hljs-number">213093607196415232366564484229844568444</span>, <span class="hljs-number">246921085368773491003187313772615702950</span>]<br>cs = [<span class="hljs-number">150031581047390726903711035932621949276</span>, <span class="hljs-number">21260202376534810598778595491323328519</span>, <span class="hljs-number">144049733622518360270048059408969512643</span>, <span class="hljs-number">236920143187836025924037873968303507493</span>, <span class="hljs-number">99781504248790469459151935530031893836</span>, <span class="hljs-number">69236016568483424294966410179787943383</span>, <span class="hljs-number">20613188366058016717435734248097940419</span>]<br>f, lcm = CRT(<span class="hljs-built_in">zip</span>(cs, ms))<span class="hljs-comment">#把两个列表打包，依次对应有点像二维数组,但其实返回的是元组</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>    x=<span class="hljs-built_in">str</span>(f+i*lcm).encode()<br>    u=hashlib.sha256(x).hexdigest()<br>    flag=<span class="hljs-string">&quot;SYC&#123;&quot;</span>+u+<span class="hljs-string">&quot;&#125;&quot;</span><br>    <span class="hljs-keyword">if</span> u[:<span class="hljs-number">5</span>]==<span class="hljs-string">&quot;6a651&quot;</span>:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">SYC&#123;6a651b7ce47b35cc1aca565028fb633fab9e35ca08e45d5ce987a6caeb500465&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES加密以及代码实现</title>
    <link href="/2024/12/24/AES%E5%8A%A0%E5%AF%86%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/12/24/AES%E5%8A%A0%E5%AF%86%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AES加密回顾以及代码实现"><a href="#AES加密回顾以及代码实现" class="headerlink" title="AES加密回顾以及代码实现"></a>AES加密回顾以及代码实现</h1><p><a href="https://formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng-html5.html">Rijndael_Animation_v4_eng-html5</a></p><p>这里放了一个动态演示AES加密过程的网站，有兴趣的可以观看，建议挂代理食用</p><p>Rcon是轮常量：<img src="https://pic4.zhimg.com/v2-1b2965b8a4932014106cee1a392ec980_r.jpg" alt="对称加密与非对称加密算法原理详解（对称加密篇） - 知乎"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接触密码学也两个月了，之前是学过AES的但是都是简单看了下大概，打CTF的时候喜欢python库脚本一把梭，对AES涉及的一些数学原理不理解，希望尝试用python实现AES加密。</p><h2 id="重要的前置知识，有限域多项式乘法运算。"><a href="#重要的前置知识，有限域多项式乘法运算。" class="headerlink" title="重要的前置知识，有限域多项式乘法运算。"></a>重要的前置知识，有限域多项式乘法运算。</h2><h3 id="1-GF-28-中的多项式"><a href="#1-GF-28-中的多项式" class="headerlink" title="1.GF(28)中的多项式"></a>1.GF(2<Sup>8</sup>)中的多项式</h3><p>伽罗瓦域之前以及了解过，大家有兴趣可以自己搜一下</p><p>$f(x)&#x3D;a_7x^7+a_6x^6+…+a_1x^1+a_2x^2$</p><p>其中ai是x&#x3D;2的系数&#x3D;只能为1或者0，该多项式可以表示一个二进制整数</p><h3 id="2-不可约的多项式规"><a href="#2-不可约的多项式规" class="headerlink" title="2.不可约的多项式规"></a>2.不可约的多项式规</h3><p>$m(X)&#x3D;x^8+x^4+x^3+x+1$</p><p>称之为不可约多项式，也就是质数</p><h3 id="多项式模运算"><a href="#多项式模运算" class="headerlink" title="多项式模运算"></a>多项式模运算</h3><p>接下来估计又是长篇大论了。多项式模运算我可以写的详细点</p><p>多项式运算分为三种</p><ul><li><p>使用代数方法运算的普通多项式</p></li><li><p>系数运算是模P的多项式，即再系数GF(p)中</p></li><li><p>系数在GF(p)中，且多项式被定义为模一个n次多项式m(x)的多项式运算</p></li></ul><p>我们乘法逆元要用到第三章，然后正常运算后对M(X)取余数，才是最终运算结果。</p><blockquote><p>例如f(x)&#x3D;x<sup>6</sup>+x<sup>3</sup>++1与g(x)&#x3D;x<sup>5</sup>+x<sup>4</sup>+x<sup>3</sup>相加</p><p>f(x)+g(x)&#x3D;x<sup>5</sup>+x<sup>4</sup>+1,和异或一样。作乘法时</p><p>f(x)*g(x)&#x3D;</p></blockquote><blockquote><p>讲一下多项式有限域相乘。先进行正常的代数相乘</p><p>得到，记得相加的时候是异或相加f(x)*g(x)&#x3D;x11+x10+x9+x8+x7+x6+x5+x4+x3 mod(m(x))</p><h6 id="x11-x3-x8—-多项式异或x3m-x-x11-x7-x6-x4-x3"><a href="#x11-x3-x8—-多项式异或x3m-x-x11-x7-x6-x4-x3" class="headerlink" title="x11&#x3D;x3*x8—&gt;多项式异或x3m(x)&#x3D;x11+x7+x6+x4+x3"></a>x<sup>11</sup>&#x3D;x<sup>3</sup>*x<sup>8</sup>—&gt;多项式异或x<sup>3</sup>m(x)&#x3D;x11+x7+x6+x4+x3</h6><p>f(x)&#x3D;x10+x9+x10+x9+x8+x5再异或x<sup>2</sup>m(x)&#x3D;x10+x6+x5+x3+x2</p><p>得到f(x)&#x3D;x9+x6+x3+x2异或相加xm(x)和m(x)求出结果</p><p>f(x)&#x3D;x<sup>7</sup>+x<sup>6</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>2</sup>+x</p></blockquote><p>GF(2<sup>8</sup>)还定义了运算，称为x乘法，其定义为</p><p>x*b(x)&#x3D;b<sub>7</sub>x<sup>8</sup>+b<sub>6</sub>x<sup>7</sup>+…+b<sub>0</sub>x(mod m(x))</p><p>如果b<sub>7</sub>&#x3D;0,求模结果不变，否则乘积减去m(x),即求乘积的结果与m(x)异或。</p><p>由此的得出十六进制02乘b(x)相当于在字节上左移一位（最后一位补0），若b<sup>7</sup>&#x3D;1,则再与1B（00011011）做逐比特异或来实现，该运算记为b&#x3D;xtime(a)</p><p>上述运算将会应用在列混淆之中</p><p>接下来示例57(16进制)在该条件下乘02</p><blockquote><p>57&#x3D;01010111,02&#x3D;00000010相当于，第7位小于0，57左移一位后面补0。57&#x3D;10101110&#x3D;AE</p><p>如果是57*03可以看作57*（01+02)</p><p>如果AE*02,因为AE&#x3D;10101110,先将AE左移一位补0</p><p>01011100*02 mod(00011011),这些都是为了满足有限域内的条件，具体数学原理，我也不太明白</p></blockquote><h2 id="1-AES加密"><a href="#1-AES加密" class="headerlink" title="1. AES加密"></a>1. AES加密</h2><p>首先我们要知道，AES本身只能处理128位(16字节)的明文。在处理时将其按字节分成16块，4*4</p><table><thead><tr><th>A</th><th>E</th><th>I</th><th>N</th></tr></thead><tbody><tr><td>B</td><td>F</td><td>J</td><td>O</td></tr><tr><td>C</td><td>G</td><td>K</td><td>P</td></tr><tr><td>D</td><td>H</td><td>M</td><td>Q</td></tr></tbody></table><p>如果少了则填充0A。多了则重新排在另一个4*4的表格。</p><p>AES支持三种长度的密钥：<strong>128位，192位，256位</strong></p><p>128位经历10轮，之后两种多64位增加两轮。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/AES.5q7hdo4b6l.webp"></p><p>可以看出，AES加密有三个过程。初始轮，中间轮，最后轮。中间轮的数量在128Bites密钥中有</p><p>基础的四个过程。</p><ol><li>字节替换（SubBytes）q</li></ol><p>依据一个被称为S盒（Subtitution Box）的16*16大小的二维常量数组。示例如图。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/Shex.8l05jgfe41.webp"></p><p>如果我们要替换4d字节，那么我们就找到第4行，第d列即为e3。</p><ol start="2"><li><p>行位移（ShiftRows）</p><p>第一行不变，第二行左移一个字节，第三行左移三个字节，第四行左移四个字节。</p><table><thead><tr><th>A</th><th>E</th><th>I</th><th>N</th></tr></thead><tbody><tr><td>O</td><td>B</td><td>F</td><td>J</td></tr><tr><td>K</td><td>P</td><td>C</td><td>G</td></tr><tr><td>H</td><td>M</td><td>Q</td><td>D</td></tr></tbody></table><ol start="3"><li>列混淆（MixColumns）。</li></ol><p><img src="https://img2018.cnblogs.com/i-beta/1810390/201911/1810390-20191115142019897-587484033.png" alt="img"></p><p>用给定的一段矩阵左乘我们的数据，但是不完全跟矩阵乘法相同，示例结果如下，左乘的数</p><p>例如第一行第一列，得到的结果是<br>$$<br>q1&#x3D;(02<em>p1)⊕(03</em>p2)⊕(01<em>p3)⊕(01</em>p4)<br>$$<br>⊕是异或(^)的意思。</p><ol start="4"><li>轮密钥加(AddRoundKey)</li></ol><p>用明文矩阵和给定的轮密钥每一列进行异或。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-12-24-145502.1lbw1l0ect.webp"></p></li></ol><p>例如如同。</p><p>这个密钥矩阵每轮都会改变。关于每轮的密钥扩展，</p><ul><li>每一轮都会生成一个新的轮密钥</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/Keyadd.1vypuqh6zf.webp"></p><p>初始轮密钥为a0&#x2F;1&#x2F;2&#x2F;3.第<strong>i</strong>列的数据。</p><p>当 <strong>i!&#x3D;4</strong>n时。     **ai&#x3D;a[i-4] ^ a[i-1]**。</p><p>当i&#x3D;4n时。      <strong>a[i]&#x3D;a[i-4]^T(a[i-1])</strong></p><p>T(a[i-1])需要做出解释。</p><p>分为三步。例如a4&#x3D;a0^T(a[3])</p><ol><li><p>b3&#x3D;[09,cf,4f,3c]左移一位&lt;&lt;得a3&#x3D;[cf,4f,3c,09]</p></li><li><p>字节代换</p><p> 根据S盒。c3&#x3D;[8a,84,eb,01]</p></li><li><p>将前两步的结果同轮常量Rcon[j],j表示轮数，</p></li></ol><p>Rcon[j]是一个给定的4*j的表。</p><p>d3&#x3D;b3^c3^rj</p><p>就能得到T(a[3])&#x3D;d3</p><h3 id="AES加密的不同模式"><a href="#AES加密的不同模式" class="headerlink" title="AES加密的不同模式"></a>AES加密的不同模式</h3><p>AES加密算法的模式主要有五种,主要区别在于加密过程中明文和密文的处理方式以及安全性特</p><p>1.ECB模式</p><blockquote><ol><li>每个明文块被独立加密，相同的明文块得到相同的密文块。</li><li>不适合加密大量数据或具有重复模式的数据，容易受到攻击。</li></ol></blockquote><ol start="2"><li>CBC模式</li></ol><blockquote><ol><li><p>使用前一个密文块对当前明文块进行加密，增加了随机性，相同的明文块在不同位置得到</p></li><li><p>需要使用初始化向量（IV）来增加安全性。</p></li></ol></blockquote><ol start="3"><li>CFB模式。</li></ol><blockquote><ul><li>使用前一个密文块作为输入生成伪随机密钥流与明文进行异或运算得到密文。</li><li>可以支持实时加密和流加密。</li></ul></blockquote><ol start="4"><li>OFB模式</li></ol><blockquote><ul><li>类似于CFB，使用前一个密文块生成伪随机密钥流，然后与明文进行异或运算。</li><li>对加密和解密中的错误更加鲁棒，但不支持部分更新。</li></ul></blockquote><ol start="5"><li>CTR模式</li></ol><blockquote><ul><li>使用一个计数器与密钥输入加密算法生成伪随机密钥流，与明文进行异或运算。</li><li>可以并行加密和解密，适用于需要高效加密的场景。</li></ul></blockquote><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">import copy<br>def <span class="hljs-keyword">mul</span>(poly1, poly2):   # 两个多项式相乘<br>result = <span class="hljs-number">0</span><br>for index <span class="hljs-keyword">in</span> range(poly2<span class="hljs-number">.</span>bit_length()):<br>if poly2 &amp; (<span class="hljs-number">1</span> &lt;&lt; index):<br>result ^= (poly1 &lt;&lt; index)<br>return result<br><br>def mod(poly, mod = <span class="hljs-number">0b100011011</span>):    # 多项式poly模多项式<span class="hljs-number">100011011</span><br>while poly<span class="hljs-number">.</span>bit_length() &gt; <span class="hljs-number">8</span>:<br>poly ^= (mod &lt;&lt; (poly<span class="hljs-number">.</span>bit_length() - <span class="hljs-number">9</span>))<br>return poly<br><br>def substitute(m_hex, inverse=False):<br>    m_s = []<br>    box = s_box if <span class="hljs-keyword">not</span> inverse else i_s_box<br>    for i <span class="hljs-keyword">in</span> m_hex:<br>        x, y = <span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>) // <span class="hljs-number">16</span>, <span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>) % <span class="hljs-number">16</span><br>        temp = hex(box[x*<span class="hljs-number">16</span>+y])<br>        m_s<span class="hljs-number">.</span>append(temp)<br>    return m_s<br><br>s_box =   [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>]<br>i_s_box = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7D</span>]<br>rcon = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x36</span>]<br>mix_column_matrix   = [<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>] # 列混合乘的矩阵<br>i_mix_column_matrix = [<span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>] # 列混合乘的逆矩阵<br>def gen_key(key):<br>    key_hex = get_hex(key)<br>    key_rotate = []<br>    w = [[] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">44</span>)]<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):<br>        w[i // <span class="hljs-number">4</span>].append(key_hex[i])<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>, <span class="hljs-number">44</span>):<br>        gw = copy<span class="hljs-number">.</span>deepcopy(w[i - <span class="hljs-number">1</span>])<br>        if i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:<br>            gw[<span class="hljs-number">0</span>], gw[<span class="hljs-number">1</span>], gw[<span class="hljs-number">2</span>], gw[<span class="hljs-number">3</span>] = gw[<span class="hljs-number">1</span>], gw[<span class="hljs-number">2</span>], gw[<span class="hljs-number">3</span>], gw[<span class="hljs-number">0</span>]<br>            gw = substitute(gw) #g(w(i-<span class="hljs-number">1</span>))<br>            gw[<span class="hljs-number">0</span>] = hex(<span class="hljs-keyword">int</span>(gw[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>) ^ rcon[i // <span class="hljs-number">4</span> - <span class="hljs-number">1</span>]) #ppt上说的<span class="hljs-number">2</span>^(i-<span class="hljs-number">4</span>)/<span class="hljs-number">4</span>有误，看书p84<br>        for j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            w[i].append(hex(<span class="hljs-keyword">int</span>(gw[j], <span class="hljs-number">16</span>) ^ <span class="hljs-keyword">int</span>(w[i-<span class="hljs-number">4</span>][j], <span class="hljs-number">16</span>)))<br>    key_rotate = [w[i * <span class="hljs-number">4</span>] + w[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] + w[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] + w[ i* <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)] # 轮密钥列表,每个元素都是有<span class="hljs-number">16</span>个字节的列表<br>    return key_rotate<br><br>def <span class="hljs-keyword">xor</span>(a, key): #a和key都是列表，都存了<span class="hljs-number">16</span>字节<br>    return [hex(<span class="hljs-keyword">int</span>(a[i], <span class="hljs-number">16</span>) ^ <span class="hljs-keyword">int</span>(key[i], <span class="hljs-number">16</span>)) for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)]<br><br>def get_hex(s): #得到一个字符串的十六进制值，以列表形式返回<br>    return [hex(ord(i)) for i <span class="hljs-keyword">in</span> s]<br><br>def shiftrows(a, inverse=False): #inverse为True时表示为逆操作，默认为False<br>    return [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">3</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">11</span>] ] if <span class="hljs-keyword">not</span> inverse else [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">11</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">3</span>] ]<br><br>def mixcolumn(m_row, inverse=False):<br>    matrix = mix_column_matrix if <span class="hljs-keyword">not</span> inverse else i_mix_column_matrix<br>    m_col = []<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):<br>        x, y = i % <span class="hljs-number">4</span>, i // <span class="hljs-number">4</span><br>        result = <span class="hljs-number">0</span><br>        for j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            result ^= (<span class="hljs-keyword">mul</span>(matrix[x * <span class="hljs-number">4</span> + j], <span class="hljs-keyword">int</span>(m_row[y * <span class="hljs-number">4</span> + j], <span class="hljs-number">16</span>)))<br>        result = mod(result)<br>        m_col<span class="hljs-number">.</span>append(hex(result))<br>    return m_col<br><br>def aes_encrypt(m, key_rotate):<br>    m_hex = get_hex(m) #得到明文的hex列表<br>    m_xor = <span class="hljs-keyword">xor</span>(m_hex, key_rotate[<span class="hljs-number">0</span>]) #将明文初始<span class="hljs-keyword">xor</span>密钥 w0 w1 w2 w3<br>    for rotate <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>): #十轮<br>        m_s = substitute(m_xor) # 字节代替<br>        m_row = shiftrows(m_s)<br>        m_col = m_row #列混合<br>        if rotate != <span class="hljs-number">10</span>: #最后一轮不用列混合<br>            m_col = mixcolumn(m_row)<br>        m_xor = <span class="hljs-keyword">xor</span>(m_col, key_rotate[rotate])<br>    ciphertext = <span class="hljs-string">&quot;&quot;</span> #输出的密文为每个十六进制字符的联结，类似e365e09962d634a8fbfe8359c57b22c5。一共<span class="hljs-number">32</span>个，每两个字母对应了一个字节的十六进制。<span class="hljs-number">16</span>个进制，<span class="hljs-number">128</span>位。<br>    for i <span class="hljs-keyword">in</span> m_xor:<br>        ciphertext += (i[<span class="hljs-number">2</span>:] if len(i[<span class="hljs-number">2</span>:]) == <span class="hljs-number">2</span> else <span class="hljs-string">&quot;0&quot;</span> + i[<span class="hljs-number">2</span>:]) #对类似<span class="hljs-number">0xf</span>的十六进制格式化为<span class="hljs-number">0x0f</span><br>    return ciphertext<br><br>def aes_decrypt(c, key_rotate):<br>    c_hex = [<span class="hljs-string">&#x27;0x&#x27;</span> + c[i * <span class="hljs-number">2</span>] + c[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)] #将密文恢复为列表<br>    c_xor = <span class="hljs-keyword">xor</span>(c_hex, key_rotate[<span class="hljs-number">10</span>])<br>    c_row = shiftrows(c_xor, inverse=True)<br>    c_s = substitute(c_row, inverse=True)<br>    for rotate <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>): #循环<span class="hljs-number">9</span>次<br>        c_xor = <span class="hljs-keyword">xor</span>(c_s, key_rotate[rotate])<br>        c_col = mixcolumn(c_xor, inverse=True)<br>        c_row = shiftrows(c_col, inverse=True)<br>        c_s = substitute(c_row, inverse=True)<br>    plaintext = <span class="hljs-string">&quot;&quot;</span><br>    for i <span class="hljs-keyword">in</span> <span class="hljs-keyword">xor</span>(c_s, key_rotate[<span class="hljs-number">0</span>]): #将明文的hex列表转化为字母<br>        plaintext += chr(<span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>))<br>    return plaintext<br># 原始明文和密钥<br>m = <span class="hljs-string">&quot;1234567890abcdef&quot;</span><br>key = <span class="hljs-string">&quot;1234567890abcdef&quot;</span><br><br># 生成轮密钥<br>key_rotate = gen_key(key)<br><br># 加密<br>ciphertext = aes_encrypt(m, key_rotate)<br>print(<span class="hljs-string">&quot;Ciphertext:&quot;</span>, ciphertext)<br><br># 解密<br>plaintext = aes_decrypt(ciphertext, key_rotate)<br>print(<span class="hljs-string">&quot;Decrypted text:&quot;</span>, plaintext)<br><br></code></pre></td></tr></table></figure><h3 id="一道题"><a href="#一道题" class="headerlink" title="一道题"></a>一道题</h3><h3 id="Knuckle-Buster"><a href="#Knuckle-Buster" class="headerlink" title="Knuckle Buster"></a>Knuckle Buster</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">在这个挑战中，两个人 Alice 和 Bob 正在秘密交流。他们使用 Diffie-Hellman 密钥交换协议来保护他们的通信。我将为您提供足够的信息来解密他们之间截获的消息。您需要做的就是计算共享密钥并对其进行解密以获取标志。<br><br>这是加密的标志。它使用 AES-256-CBC 加密，其中 SHA-256 用于密钥派生，并预置了 16 字节 IV。<br><br>publicA<br>-----BEGIN PUBLIC KEY-----<br>MIGaMFMGCSqGSIb3DQEDATBGAkEAiBB/FlC3W8aPLJxYGXzKsnpEmPKIKR4JetlA1ky+TKTYofXUKSFucGxtrmWlVFjnLZUqJFjj0bVDKSiYOfod1wIBAgNDAAJAN3YrjXtIssyugO9tQ3BRy2TN92Qkhkp/VP5zfLEMQg1AE/YofkCIc/KSZOBpuroiQoCK0qTNkD4HzCzDa7ap5Q==<br><span class="hljs-section">-----END PUBLIC KEY</span><br><span class="hljs-section">-----</span><br>privateB<br>-----BEGIN PRIVATE KEY<br>-----MIGcAgEAMFMGCSqGSIb3DQEDATBGAkEAiBB/FlC3W8aPLJxYGXzKsnpEmPKIKR4JetlA1ky<span class="hljs-code">+TKTYofXUKSFucGxtrmWlVFjnLZUqJFjj0bVDKSiYOfod1wIBAgRCAkBSsgvp3xivPK6Wp2X+</span>SIjGllg1MT4zJdEoyUjV6iDLGytdeLpokYOO6xss GIiVb8b6A/5onnopra2iXBb0dS5rn<br><span class="hljs-section">-----END PRIVATE KEY</span><br><span class="hljs-section">-----</span><br>dhparam<br>-----BEGIN DH 参数-----<br>MEYCQQCIEH8WULdbxo8snFgZfMqyekSY8ogpHgl62UDWTL5MpNih9dQpIW5wbG2uZaVUWOctlSokWOPRtUMpKJg5+h3XAgEC<br><span class="hljs-section">-----END DH 参数</span><br><span class="hljs-section">-----</span><br></code></pre></td></tr></table></figure><p>这是一个基础的AES-CBC加密的DH密钥协商通信。</p><p>整数A，b和dhpraram&#x3D;p分别代表了不同的内容。</p><p>P代表了DH中的那个大素数</p><p>协商密钥s&#x3D;A^b^ modp。我们可以用python库或者在线网站提取证书内容，我这里直接用在线网站提取。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import long_to_bytes<br><span class="hljs-keyword">from</span> nacl.hash import sha256<br><br><span class="hljs-attribute">A</span>=2904759796559791913432271862881153382405066619449245072640765589088056204557610156688164735437813811038059974077392278848266560053756599200768336365791717<br><br><span class="hljs-attribute">b</span>=4331114469004424101417452893702925534425506579657643668189751982919697469877978008431455296821274876511281317445036625437218508812066778389432224377969383<br><br><span class="hljs-attribute">P</span>=7126272917341517371021493195431918906260195973018916295547365059382419902222692924409321274266211448465008202837786841249505239162738008847348464904445399<br><span class="hljs-attribute">s</span>=pow(A,b,P)<br><span class="hljs-attribute">key</span>=sha256(long_to_bytes(s))<br>with open(<span class="hljs-string">&quot;C:\\Users\\24055\OneDrive\文档\Crypto200-1_flag.txt (1).enc&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:<br>    <span class="hljs-attribute">iv</span>=f.read(16)<br>    <span class="hljs-attribute">cipher</span>=f.read()<br><span class="hljs-attribute">cipher1</span>=cipher.hex()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;IV:&quot;</span>,iv.hex())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cipher1:&quot;</span>,cipher1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Key:&quot;</span>,key)#之后可以拿到在线网站解密即可<br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">IV: fe942f31b9579db8905e4202793cd70e</span><br><span class="hljs-string">Cipher1: c206bd30b9339b208876fa125faac03f461db5cd6cf87ddf232ba7ff118d0d25</span><br><span class="hljs-string">Key: b&#x27;</span>bb7d44a422b90bb2b585c1639e46a7a7dff2cca315f564450694295d187b85d8<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>flag: poctf&#123;uwsp_f1r3_4nd_br1m570n3&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>python</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DH密钥交换协议</title>
    <link href="/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DH-密钥交换协议"><a href="#DH-密钥交换协议" class="headerlink" title="DH 密钥交换协议"></a>DH 密钥交换协议</h1><p>在基于<a href="https://zhida.zhihu.com/search?content_id=221358888&content_type=Article&match_order=1&q=%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&zhida_source=entity">对称加密</a>进行安全通信的过程中，通信双方需要持有一个共享的密钥。只有这样，由任何一方加密的信息才能由另一方使用相同的密钥解密。但是<strong>在能够安全的通信之前，通信双方应该如何约定一个共享的密钥呢？这就是安全中的经典问题：密钥配送问题（Key Distribution Problem</strong>[<a href="https://zhuanlan.zhihu.com/p/599518034#ref_1">1]</a><strong>）</strong>。</p><p>Diffe-Hellman密钥交换协议只是其中一种约定功能共享密钥的方式，</p><h2 id="DHKE协议简介"><a href="#DHKE协议简介" class="headerlink" title="DHKE协议简介"></a>DHKE协议简介</h2><p><strong>DHKE是一种通过公共通道安全地交换加密密钥的数学方法，以Whitfield Diffi</strong>e和Martin Hellman的名字命名。</p><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><blockquote><p>$c&#x3D;G^e mod P(0&lt;&#x3D;c&lt;P)$</p><p>G是P的原根，满足条件</p><p>{g1modp,g2modp,g3modp,…,gp−1modp}&#x3D;{1,2,3,…,p−1}</p></blockquote><h2 id="DHKE协议的过程"><a href="#DHKE协议的过程" class="headerlink" title="DHKE协议的过程"></a>DHKE协议的过程</h2><p><img src="https://rockfox0.github.io/picx-images-hosting/v2-39cb492c048f5f2a643368c135626925_1440w.175g9ciqha.webp"></p><ol><li><p>客户端和服务端生成协商大素数P及其原根G</p></li><li><p>客户端生成私钥和公钥a和A</p><blockquote><p>A&#x3D;G<sup>a</sup> mod p</p></blockquote></li><li><p>将公钥A发送给服务端</p></li><li><p>服务端生成私钥b和公钥B</p></li></ol><blockquote><p>$B&#x3D;G^b mod P$</p></blockquote><ol><li><p>服务端将公钥B发送给客户端</p></li><li><p>客户端已知G,P,A,a,B计算密钥S1</p></li><li><blockquote><p>$S1&#x3D;B^a mod P$ </p></blockquote></li><li><p>服务端已知A B b G P计算共享密钥</p></li></ol><blockquote><p>$S2&#x3D;A^b mod p$</p></blockquote><ol start="9"><li>客户端和服务端共享密钥S</li></ol><blockquote><p>$S&#x3D;S1&#x3D;B^a mod P&#x3D;(G^b) mod p&#x3D;A^b mod P&#x3D;S2$</p></blockquote><p>可以知道共享密钥的原理，</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格密码</title>
    <link href="/2024/12/23/%E6%A0%BC%E6%A0%BC%E6%A0%BC%E5%AF%86%E7%A0%81/"/>
    <url>/2024/12/23/%E6%A0%BC%E6%A0%BC%E6%A0%BC%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h1><ol><li>简介：LLL算法用于解决最短向量问题的多项式时间复杂度算法。</li></ol><h2 id="LLL算法解释"><a href="#LLL算法解释" class="headerlink" title="LLL算法解释"></a>LLL算法解释</h2><h2 id="对格的认识"><a href="#对格的认识" class="headerlink" title="对格的认识"></a>对格的认识</h2><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/0368780808a7e1b750e955cf6b101d73.2yyf2pk3ws.webp" alt="0368780808a7e1b750e955cf6b101d73"></p><p>不同的基也可以生成同一个格。</p><p>例如一个基向量是（1,0)和（0，1）构成的格。该格用数学符号表示。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.5xap69j4x6.webp"></p><p><img src="https://www.helloimg.com/i/2024/12/17/6760eb205ecb2.png"></p><p>格的维数:即向量的个数，上述表示的是一个二维的格。</p><p>然后根据系数a的不同就能得到不同的L集合。</p><p>假定现在v1,v2,v3…vn(称为张空间) 是格L的基，让存在不同个集合属于L 即w1 w2 …,wm。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.99tf0nbkwz.webp" alt="img"></p><p>可以转化位矩阵运算。</p><p>AV&#x3D;W</p><blockquote><p>线性无关（linearly independence）v1 , v2 , … , vn线性无关，当且仅当方程a1v1+…+anvn&#x3D;0的唯一解是a全部为0；否则线性相关（linearly dependent）</p><p>正交基（orthogonal basis）v1 , v2 , … , vn 中任意不同的两个v点积的结果为0</p><p>规范正交（orthonormal） 上面的每一个v的**欧几里得范数(类似于模 长度)**为1</p><p>据此在上面的w的||w||2 &#x3D; 所有系数a的平方和</p></blockquote><p>A(转置)&#x3D;(a1,a2…,an) V&#x3D;(v1,v2…,vn) w&#x3D;(w1,w2..,wn)</p><p>AV&#x3D;W;</p><p>示例一个有关向量的问题</p><p>选定基向量生成格L:</p><p><img src="https://rockfox0.github.io/picx-images-hosting/eaba6027147f175e55cc60cb4c6b0e6c.1lbw05nx6x.webp"></p><p>化作行矩阵<img src="https://rockfox0.github.io/picx-images-hosting/d333e18fcc3fa9fcd7c7939bdc22f328.7ax8bqja7e.webp"></p><p>将设L的某向量组：</p><p><img src="https://rockfox0.github.io/picx-images-hosting/ecdebf47b0420ef33e2e6ff92c32262d.39l8xcg9ch.webp"></p><p>其系数a形成向量组U&#x3D;</p><p><img src="https://rockfox0.github.io/picx-images-hosting/a5f5017c9499507f3eca6345e218dec0.8s3ddhost5.webp"></p><p>W(转置)&#x3D;（w1,w2,w3).</p><p>W&#x3D;A*U</p><p>操作代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#sage</span><br>v1 = <span class="hljs-selector-attr">[2, 1, 3]</span><br>v2 = <span class="hljs-selector-attr">[1, 2, 0]</span><br>v3 = <span class="hljs-selector-attr">[2, -3, -5]</span><br><br>A= <span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[v1, v2, v3]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(A)</span></span><br>U=<span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[[1, 0, 1]</span>, <span class="hljs-selector-attr">[1, -1, 2]</span>, <span class="hljs-selector-attr">[1, 2, 0]</span>])<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U.det()</span></span>)<br>W=A*U<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(W)</span></span><br>int_U=U<span class="hljs-selector-class">.inverse</span>()#求矩阵的逆<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;.............&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int_U)</span></span><br>assert int_U*W==A<br></code></pre></td></tr></table></figure><p>SVP(最短向量问题)</p><p>一个格会有无数多个向量集合v</p><p>最短向量问题，指的格L中最短的非零向量，即寻找一个v满足<em><strong>欧几里得范数</strong></em>最小（指的该集合每一个元素的平方和再开平方，类似于模的长度）范数就是长度。</p><blockquote><ol><li>基：</li></ol><p>在向量空间的每一个点，都可以通过对基的线性组合变化得到，叫做基向量</p><p>一个格可能会有很多个基 不唯一</p><ol start="2"><li>正交基：</li></ol><p>基相互垂直，就是正交基</p><ol start="3"><li><strong>格基约规</strong></li></ol><p><img src="https://rockfox0.github.io/picx-images-hosting/32a8129eef81a915f4b4f7ace6f8d010.361mzmnojh.webp"></p><p>random basis也是一组基，可以构成这个格子中的所有点 但是不是正交基</p><p>通过LLL或BKZ算法 得到正交基或者是最接近正交基，我们通过到他们，在之中</p></blockquote><p>Cvp(最近向量问题)—不是很能理解这里先留着</p><h2 id="接下来实战一些格的题"><a href="#接下来实战一些格的题" class="headerlink" title="接下来实战一些格的题"></a>接下来实战一些格的题</h2><h3 id="hermite-定理"><a href="#hermite-定理" class="headerlink" title="hermite 定理"></a>hermite 定理</h3><p><img src="https://rockfox0.github.io/picx-images-hosting/eae24001bbe299decdd775bef1ea1800.73u0gaysyt.webp"></p><p>给出最短向量的上限。</p><p>2024极客大挑战</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c">from Crypto.Util.number import *<br><br>flag <span class="hljs-punctuation">=</span> b&#x27;******&#x27;<br>m <span class="hljs-punctuation">=</span> bytes_to_long<span class="hljs-punctuation">(</span>flag<span class="hljs-punctuation">)</span><br><br>assert m.bit_length<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">=</span><span class="hljs-punctuation">=</span> <span class="hljs-number">327</span><br>p <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>a <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>c <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">400</span><span class="hljs-punctuation">)</span><br><br>b <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>a*m <span class="hljs-punctuation">+</span> c<span class="hljs-punctuation">)</span> % p<br><br>print<span class="hljs-punctuation">(</span>f&#x27;a = &#123;a&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;b = &#123;b&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;p = &#123;p&#125;&#x27;<span class="hljs-punctuation">)</span><br><br>&#x27;&#x27;&#x27;<br>a = <span class="hljs-number">16979084980432</span><span class="hljs-number">35409461972047</span><span class="hljs-number">08402762862586</span><span class="hljs-number">19760418310258</span><span class="hljs-number">92707418597085</span><span class="hljs-number">50301920348112</span><span class="hljs-number">94130599976409</span><span class="hljs-number">21979969292984</span><span class="hljs-number">74590062625556</span><span class="hljs-number">80679361326852</span><span class="hljs-number">77637740137726</span><span class="hljs-number">85954699561684</span><span class="hljs-number">24494543484365</span><span class="hljs-number">65153078018829</span><span class="hljs-number">95934869499880</span><span class="hljs-number">28859414291938</span><span class="hljs-number">15017964888150</span><span class="hljs-number">33294127591623</span><span class="hljs-number">26089476475021</span><span class="hljs-number">45889934568404</span><span class="hljs-number">04443515671353</span><span class="hljs-number">80261445041171</span>7<br>b = <span class="hljs-number">87985708831523</span><span class="hljs-number">23898094893816</span><span class="hljs-number">54149843183794</span><span class="hljs-number">59926002798504</span><span class="hljs-number">43596453820344</span><span class="hljs-number">38779885998886</span><span class="hljs-number">15810231215118</span><span class="hljs-number">82813830689557</span><span class="hljs-number">20628331079889</span><span class="hljs-number">65151522391460</span><span class="hljs-number">21683769192796</span><span class="hljs-number">02498745118188</span><span class="hljs-number">78134399363147</span><span class="hljs-number">00804256222291</span><span class="hljs-number">02347399406975</span><span class="hljs-number">53852540265617</span><span class="hljs-number">60348299509120</span><span class="hljs-number">31050401874604</span><span class="hljs-number">85673579382171</span><span class="hljs-number">26019729178374</span><span class="hljs-number">88867659293761</span><span class="hljs-number">79151804062085</span><br>p = <span class="hljs-number">13172449451206</span><span class="hljs-number">56588010397665</span><span class="hljs-number">46788821718063</span><span class="hljs-number">96314446781873</span><span class="hljs-number">57680406313670</span><span class="hljs-number">69153816254855</span><span class="hljs-number">22965544955909</span><span class="hljs-number">91886944032600</span><span class="hljs-number">44990366292026</span><span class="hljs-number">91608534025007</span><span class="hljs-number">71987352157741</span><span class="hljs-number">49087025577263</span><span class="hljs-number">76984665072859</span><span class="hljs-number">31801010739405</span><span class="hljs-number">07285459917860</span><span class="hljs-number">72655138522748</span><span class="hljs-number">17158735036126</span><span class="hljs-number">83249433020201</span><span class="hljs-number">72919086243047</span><span class="hljs-number">60548221028654</span><span class="hljs-number">41136763977415</span><span class="hljs-number">82433185880161</span>7<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><p>已知a,b,p。</p><p>接下来构造函数</p><blockquote><p>b&#x3D;am+c-kp</p><p>c&#x3D;b+kp-am</p><p>m&#x3D;0+m+0</p><p>1&#x3D;[1,0,0]</p><p>[1,m,k]*[1,0,b&#x2F;&#x2F;0,1,-a&#x2F;&#x2F;0,0,p]&#x3D;[1,m,c]</p><p>如果m和c远远小于a,b,p则[1,m,c]可视为最短向量,通过求出最短向量即可求出m和c。但是这里[1,0,b]不能确定是否一定比[1,m,c]大很多，所以我们可以先尝试</p></blockquote><img src="https://www.helloimg.com/i/2024/12/19/67642106d12f7.jpg" style="zoom:33%;" /><p>这里构造出来，$b-a*m +kp &#x3D; c$<br>$$(1\quad m\quad k )\begin{bmatrix}1&amp;0&amp;b\0&amp;1&amp;-<br>a\0&amp;0&amp;p\end{bmatrix}&#x3D;\begin{pmatrix}1&amp;m&amp;c\end{pmatrix}$$<br>$||\mathbf{v}||&#x3D;\sqrt{1+|m|2+|c|2}\approx2^{401}&gt;|p|{1&#x2F;3}&#x3D;2^{341}$<br>补个$2^{200}$<br>|V|&lt;&#x3D;|p|*1&#x2F;3，并且大小接近，但是为了它解决一些问题（我也不知道是啥），但是加了ZZ之后早格的范围变大了一些。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><span class="hljs-attribute">a</span> = <span class="hljs-number">169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717</span><br><span class="hljs-attribute">b</span> = <span class="hljs-number">87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085</span><br><span class="hljs-attribute">p</span> = <span class="hljs-number">131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617</span><br><br><br><span class="hljs-attribute">M</span> = matrix([[<span class="hljs-number">2</span>^<span class="hljs-number">377</span>,<span class="hljs-number">0</span>, b],<span class="hljs-meta"> [0,1, -a],[0,0,p]])</span><br><span class="hljs-meta">L = M.LLL()[0]</span><br><br><span class="hljs-attribute">print</span>(long_to_bytes(L[<span class="hljs-number">1</span>]))<br><br><span class="hljs-comment">#b&#x27;SYC&#123;1e989433efffd767589e989ad0f091075c06&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="easyLattice"><a href="#easyLattice" class="headerlink" title="easyLattice"></a>easyLattice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">47</span><br><br>f = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>g = getPrime(<span class="hljs-number">128</span>)<br>h = (gmpy2.invert(f, p) * g %<br>     p)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h =&#x27;</span>, h)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, p)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span><br><span class="hljs-string">p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/12/20/6765634b5c0e0.jpg"></p><p>造格，(2p)**1&#x2F;2&gt;&#x3D;(f^2+ g^2) ^1&#x2F;2  不成立，所以我们需要配平，对h和p同时乘256如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br>import gmpy2<br>h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443<br>p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     <br><span class="hljs-attribute">b</span>=2^256<br><span class="hljs-attribute">L</span>=matrix(ZZ,[[1,b*h],[0,b*p]])<br><span class="hljs-built_in">print</span>(L.LLL()[0])<br>f,<span class="hljs-attribute">g</span>=L.LLL()[0]<br><span class="hljs-attribute">f</span>=abs(f)<br><span class="hljs-built_in">print</span>(long_to_bytes(f)<br>’‘’<br>(-50073894085033274448337202692453522746880698077702322983028272289946704698284083256500537353714697134260425361796, -29555150073396592208680335494684523983684143293301981158157800432304888982432677680588686983225737089584138075242496)<br>b<span class="hljs-string">&#x27;SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;A\xf0\x89\x84&#x27;</span><br>‘’‘<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
