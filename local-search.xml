<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/12/25/%E6%A0%BC%E6%A0%BC%E6%A0%BC%E5%AF%86%E7%A0%81/"/>
    <url>/2024/12/25/%E6%A0%BC%E6%A0%BC%E6%A0%BC%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h1><hr><p>title: 格密码<br>date: 2024-12-23 14:13:09<br>tags:</p><ul><li>crypto</li></ul><p>categories:</p><ul><li>crypto</li></ul><p>banner_img: &#x2F;img&#x2F;R-C.jpg</p><p> banner_img_height: 300px</p><hr><ol><li>简介：LLL算法用于解决最短向量问题的多项式时间复杂度算法。</li></ol><h2 id="LLL算法解释"><a href="#LLL算法解释" class="headerlink" title="LLL算法解释"></a>LLL算法解释</h2><h2 id="对格的认识"><a href="#对格的认识" class="headerlink" title="对格的认识"></a>对格的认识</h2><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/0368780808a7e1b750e955cf6b101d73.2yyf2pk3ws.webp" alt="0368780808a7e1b750e955cf6b101d73"></p><p>不同的基也可以生成同一个格。</p><p>例如一个基向量是（1,0)和（0，1）构成的格。该格用数学符号表示。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.5xap69j4x6.webp"></p><p><img src="https://www.helloimg.com/i/2024/12/17/6760eb205ecb2.png"></p><p>格的维数:即向量的个数，上述表示的是一个二维的格。</p><p>然后根据系数a的不同就能得到不同的L集合。</p><p>假定现在v1,v2,v3…vn(称为张空间) 是格L的基，让存在不同个集合属于L 即w1 w2 …,wm。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.99tf0nbkwz.webp" alt="img"></p><p>可以转化位矩阵运算。</p><p>AV&#x3D;W</p><blockquote><p>线性无关（linearly independence）v1 , v2 , … , vn线性无关，当且仅当方程a1v1+…+anvn&#x3D;0的唯一解是a全部为0；否则线性相关（linearly dependent）</p><p>正交基（orthogonal basis）v1 , v2 , … , vn 中任意不同的两个v点积的结果为0</p><p>规范正交（orthonormal） 上面的每一个v的**欧几里得范数(类似于模 长度)**为1</p><p>据此在上面的w的||w||2 &#x3D; 所有系数a的平方和</p></blockquote><p>A(转置)&#x3D;(a1,a2…,an) V&#x3D;(v1,v2…,vn) w&#x3D;(w1,w2..,wn)</p><p>AV&#x3D;W;</p><p>示例一个有关向量的问题</p><p>选定基向量生成格L:</p><p><img src="https://rockfox0.github.io/picx-images-hosting/eaba6027147f175e55cc60cb4c6b0e6c.1lbw05nx6x.webp"></p><p>化作行矩阵<img src="https://rockfox0.github.io/picx-images-hosting/d333e18fcc3fa9fcd7c7939bdc22f328.7ax8bqja7e.webp"></p><p>将设L的某向量组：</p><p><img src="https://rockfox0.github.io/picx-images-hosting/ecdebf47b0420ef33e2e6ff92c32262d.39l8xcg9ch.webp"></p><p>其系数a形成向量组U&#x3D;</p><p><img src="https://rockfox0.github.io/picx-images-hosting/a5f5017c9499507f3eca6345e218dec0.8s3ddhost5.webp"></p><p>W(转置)&#x3D;（w1,w2,w3).</p><p>W&#x3D;A*U</p><p>操作代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#sage</span><br>v1 = <span class="hljs-selector-attr">[2, 1, 3]</span><br>v2 = <span class="hljs-selector-attr">[1, 2, 0]</span><br>v3 = <span class="hljs-selector-attr">[2, -3, -5]</span><br><br>A= <span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[v1, v2, v3]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(A)</span></span><br>U=<span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[[1, 0, 1]</span>, <span class="hljs-selector-attr">[1, -1, 2]</span>, <span class="hljs-selector-attr">[1, 2, 0]</span>])<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U.det()</span></span>)<br>W=A*U<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(W)</span></span><br>int_U=U<span class="hljs-selector-class">.inverse</span>()#求矩阵的逆<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;.............&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int_U)</span></span><br>assert int_U*W==A<br></code></pre></td></tr></table></figure><p>SVP(最短向量问题)</p><p>一个格会有无数多个向量集合v</p><p>最短向量问题，指的格L中最短的非零向量，即寻找一个v满足<em><strong>欧几里得范数</strong></em>最小（指的该集合每一个元素的平方和再开平方，类似于模的长度）范数就是长度。</p><blockquote><ol><li>基：</li></ol><p>在向量空间的每一个点，都可以通过对基的线性组合变化得到，叫做基向量</p><p>一个格可能会有很多个基 不唯一</p><ol start="2"><li>正交基：</li></ol><p>基相互垂直，就是正交基</p><ol start="3"><li><strong>格基约规</strong></li></ol><p><img src="https://rockfox0.github.io/picx-images-hosting/32a8129eef81a915f4b4f7ace6f8d010.361mzmnojh.webp"></p><p>random basis也是一组基，可以构成这个格子中的所有点 但是不是正交基</p><p>通过LLL或BKZ算法 得到正交基或者是最接近正交基，我们通过到他们，在之中</p></blockquote><p>Cvp(最近向量问题)—不是很能理解这里先留着</p><h2 id="接下来实战一些格的题"><a href="#接下来实战一些格的题" class="headerlink" title="接下来实战一些格的题"></a>接下来实战一些格的题</h2><h3 id="hermite-定理"><a href="#hermite-定理" class="headerlink" title="hermite 定理"></a>hermite 定理</h3><p><img src="https://rockfox0.github.io/picx-images-hosting/eae24001bbe299decdd775bef1ea1800.73u0gaysyt.webp"></p><p>给出最短向量的上限。</p><p>2024极客大挑战</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c">from Crypto.Util.number import *<br><br>flag <span class="hljs-punctuation">=</span> b&#x27;******&#x27;<br>m <span class="hljs-punctuation">=</span> bytes_to_long<span class="hljs-punctuation">(</span>flag<span class="hljs-punctuation">)</span><br><br>assert m.bit_length<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">=</span><span class="hljs-punctuation">=</span> <span class="hljs-number">327</span><br>p <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>a <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>c <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">400</span><span class="hljs-punctuation">)</span><br><br>b <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>a*m <span class="hljs-punctuation">+</span> c<span class="hljs-punctuation">)</span> % p<br><br>print<span class="hljs-punctuation">(</span>f&#x27;a = &#123;a&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;b = &#123;b&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;p = &#123;p&#125;&#x27;<span class="hljs-punctuation">)</span><br><br>&#x27;&#x27;&#x27;<br>a = <span class="hljs-number">16979084980432</span><span class="hljs-number">35409461972047</span><span class="hljs-number">08402762862586</span><span class="hljs-number">19760418310258</span><span class="hljs-number">92707418597085</span><span class="hljs-number">50301920348112</span><span class="hljs-number">94130599976409</span><span class="hljs-number">21979969292984</span><span class="hljs-number">74590062625556</span><span class="hljs-number">80679361326852</span><span class="hljs-number">77637740137726</span><span class="hljs-number">85954699561684</span><span class="hljs-number">24494543484365</span><span class="hljs-number">65153078018829</span><span class="hljs-number">95934869499880</span><span class="hljs-number">28859414291938</span><span class="hljs-number">15017964888150</span><span class="hljs-number">33294127591623</span><span class="hljs-number">26089476475021</span><span class="hljs-number">45889934568404</span><span class="hljs-number">04443515671353</span><span class="hljs-number">80261445041171</span>7<br>b = <span class="hljs-number">87985708831523</span><span class="hljs-number">23898094893816</span><span class="hljs-number">54149843183794</span><span class="hljs-number">59926002798504</span><span class="hljs-number">43596453820344</span><span class="hljs-number">38779885998886</span><span class="hljs-number">15810231215118</span><span class="hljs-number">82813830689557</span><span class="hljs-number">20628331079889</span><span class="hljs-number">65151522391460</span><span class="hljs-number">21683769192796</span><span class="hljs-number">02498745118188</span><span class="hljs-number">78134399363147</span><span class="hljs-number">00804256222291</span><span class="hljs-number">02347399406975</span><span class="hljs-number">53852540265617</span><span class="hljs-number">60348299509120</span><span class="hljs-number">31050401874604</span><span class="hljs-number">85673579382171</span><span class="hljs-number">26019729178374</span><span class="hljs-number">88867659293761</span><span class="hljs-number">79151804062085</span><br>p = <span class="hljs-number">13172449451206</span><span class="hljs-number">56588010397665</span><span class="hljs-number">46788821718063</span><span class="hljs-number">96314446781873</span><span class="hljs-number">57680406313670</span><span class="hljs-number">69153816254855</span><span class="hljs-number">22965544955909</span><span class="hljs-number">91886944032600</span><span class="hljs-number">44990366292026</span><span class="hljs-number">91608534025007</span><span class="hljs-number">71987352157741</span><span class="hljs-number">49087025577263</span><span class="hljs-number">76984665072859</span><span class="hljs-number">31801010739405</span><span class="hljs-number">07285459917860</span><span class="hljs-number">72655138522748</span><span class="hljs-number">17158735036126</span><span class="hljs-number">83249433020201</span><span class="hljs-number">72919086243047</span><span class="hljs-number">60548221028654</span><span class="hljs-number">41136763977415</span><span class="hljs-number">82433185880161</span>7<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><p>已知a,b,p。</p><p>接下来构造函数</p><blockquote><p>b&#x3D;am+c-kp</p><p>c&#x3D;b+kp-am</p><p>m&#x3D;0+m+0</p><p>1&#x3D;[1,0,0]</p><p>[1,m,k]*[1,0,b&#x2F;&#x2F;0,1,-a&#x2F;&#x2F;0,0,p]&#x3D;[1,m,c]</p><p>如果m和c远远小于a,b,p则[1,m,c]可视为最短向量,通过求出最短向量即可求出m和c。但是这里[1,0,b]不能确定是否一定比[1,m,c]大很多，所以我们可以先尝试</p></blockquote><img src="https://www.helloimg.com/i/2024/12/19/67642106d12f7.jpg" style="zoom:33%;" /><p>这里构造出来，$b-a*m +kp &#x3D; c$<br>$$(1\quad m\quad k )\begin{bmatrix}1&amp;0&amp;b\0&amp;1&amp;-<br>a\0&amp;0&amp;p\end{bmatrix}&#x3D;\begin{pmatrix}1&amp;m&amp;c\end{pmatrix}$$<br>$||\mathbf{v}||&#x3D;\sqrt{1+|m|2+|c|2}\approx2^{401}&gt;|p|{1&#x2F;3}&#x3D;2^{341}$<br>补个$2^{200}$<br>|V|&lt;&#x3D;|p|*1&#x2F;3，并且大小接近，但是为了它解决一些问题（我也不知道是啥），但是加了ZZ之后早格的范围变大了一些。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><span class="hljs-attribute">a</span> = <span class="hljs-number">169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717</span><br><span class="hljs-attribute">b</span> = <span class="hljs-number">87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085</span><br><span class="hljs-attribute">p</span> = <span class="hljs-number">131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617</span><br><br><br><span class="hljs-attribute">M</span> = matrix([[<span class="hljs-number">2</span>^<span class="hljs-number">377</span>,<span class="hljs-number">0</span>, b],<span class="hljs-meta"> [0,1, -a],[0,0,p]])</span><br><span class="hljs-meta">L = M.LLL()[0]</span><br><br><span class="hljs-attribute">print</span>(long_to_bytes(L[<span class="hljs-number">1</span>]))<br><br><span class="hljs-comment">#b&#x27;SYC&#123;1e989433efffd767589e989ad0f091075c06&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="easyLattice"><a href="#easyLattice" class="headerlink" title="easyLattice"></a>easyLattice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">47</span><br><br>f = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>g = getPrime(<span class="hljs-number">128</span>)<br>h = (gmpy2.invert(f, p) * g %<br>     p)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h =&#x27;</span>, h)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, p)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span><br><span class="hljs-string">p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/12/20/6765634b5c0e0.jpg"></p><p>造格，(2p)**1&#x2F;2&gt;&#x3D;(f^2+ g^2) ^1&#x2F;2  不成立，所以我们需要配平，对h和p同时乘256如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br>import gmpy2<br>h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443<br>p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     <br><span class="hljs-attribute">b</span>=2^256<br><span class="hljs-attribute">L</span>=matrix(ZZ,[[1,b*h],[0,b*p]])<br><span class="hljs-built_in">print</span>(L.LLL()[0])<br>f,<span class="hljs-attribute">g</span>=L.LLL()[0]<br><span class="hljs-attribute">f</span>=abs(f)<br><span class="hljs-built_in">print</span>(long_to_bytes(f)<br>’‘’<br>(-50073894085033274448337202692453522746880698077702322983028272289946704698284083256500537353714697134260425361796, -29555150073396592208680335494684523983684143293301981158157800432304888982432677680588686983225737089584138075242496)<br>b<span class="hljs-string">&#x27;SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;A\xf0\x89\x84&#x27;</span><br>‘’‘<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AES加密以及代码实现</title>
    <link href="/2024/12/24/AES%E5%8A%A0%E5%AF%86%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/12/24/AES%E5%8A%A0%E5%AF%86%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="AES加密回顾以及代码实现"><a href="#AES加密回顾以及代码实现" class="headerlink" title="AES加密回顾以及代码实现"></a>AES加密回顾以及代码实现</h1><p><a href="https://formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng-html5.html">Rijndael_Animation_v4_eng-html5</a></p><p>这里放了一个动态演示AES加密过程的网站，有兴趣的可以观看，建议挂代理食用</p><p>Rcon是轮常量：<img src="https://pic4.zhimg.com/v2-1b2965b8a4932014106cee1a392ec980_r.jpg" alt="对称加密与非对称加密算法原理详解（对称加密篇） - 知乎"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接触密码学也两个月了，之前是学过AES的但是都是简单看了下大概，打CTF的时候喜欢python库脚本一把梭，对AES涉及的一些数学原理不理解，希望尝试用python实现AES加密。</p><h2 id="重要的前置知识，有限域多项式乘法运算。"><a href="#重要的前置知识，有限域多项式乘法运算。" class="headerlink" title="重要的前置知识，有限域多项式乘法运算。"></a>重要的前置知识，有限域多项式乘法运算。</h2><h3 id="1-GF-28-中的多项式"><a href="#1-GF-28-中的多项式" class="headerlink" title="1.GF(28)中的多项式"></a>1.GF(2<Sup>8</sup>)中的多项式</h3><p>伽罗瓦域之前以及了解过，大家有兴趣可以自己搜一下</p><p>$f(x)&#x3D;a_7x^7+a_6x^6+…+a_1x^1+a_2x^2$</p><p>其中ai是x&#x3D;2的系数&#x3D;只能为1或者0，该多项式可以表示一个二进制整数</p><h3 id="2-不可约的多项式规"><a href="#2-不可约的多项式规" class="headerlink" title="2.不可约的多项式规"></a>2.不可约的多项式规</h3><p>$m(X)&#x3D;x^8+x^4+x^3+x+1$</p><p>称之为不可约多项式，也就是质数</p><h3 id="多项式模运算"><a href="#多项式模运算" class="headerlink" title="多项式模运算"></a>多项式模运算</h3><p>接下来估计又是长篇大论了。多项式模运算我可以写的详细点</p><p>多项式运算分为三种</p><ul><li><p>使用代数方法运算的普通多项式</p></li><li><p>系数运算是模P的多项式，即再系数GF(p)中</p></li><li><p>系数在GF(p)中，且多项式被定义为模一个n次多项式m(x)的多项式运算</p></li></ul><p>我们乘法逆元要用到第三章，然后正常运算后对M(X)取余数，才是最终运算结果。</p><blockquote><p>例如f(x)&#x3D;x<sup>6</sup>+x<sup>3</sup>++1与g(x)&#x3D;x<sup>5</sup>+x<sup>4</sup>+x<sup>3</sup>相加</p><p>f(x)+g(x)&#x3D;x<sup>5</sup>+x<sup>4</sup>+1,和异或一样。作乘法时</p><p>f(x)*g(x)&#x3D;</p></blockquote><blockquote><p>讲一下多项式有限域相乘。先进行正常的代数相乘</p><p>得到，记得相加的时候是异或相加f(x)*g(x)&#x3D;x11+x10+x9+x8+x7+x6+x5+x4+x3 mod(m(x))</p><h6 id="x11-x3-x8—-多项式异或x3m-x-x11-x7-x6-x4-x3"><a href="#x11-x3-x8—-多项式异或x3m-x-x11-x7-x6-x4-x3" class="headerlink" title="x11&#x3D;x3*x8—&gt;多项式异或x3m(x)&#x3D;x11+x7+x6+x4+x3"></a>x<sup>11</sup>&#x3D;x<sup>3</sup>*x<sup>8</sup>—&gt;多项式异或x<sup>3</sup>m(x)&#x3D;x11+x7+x6+x4+x3</h6><p>f(x)&#x3D;x10+x9+x10+x9+x8+x5再异或x<sup>2</sup>m(x)&#x3D;x10+x6+x5+x3+x2</p><p>得到f(x)&#x3D;x9+x6+x3+x2异或相加xm(x)和m(x)求出结果</p><p>f(x)&#x3D;x<sup>7</sup>+x<sup>6</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>2</sup>+x</p></blockquote><p>GF(2<sup>8</sup>)还定义了运算，称为x乘法，其定义为</p><p>x*b(x)&#x3D;b<sub>7</sub>x<sup>8</sup>+b<sub>6</sub>x<sup>7</sup>+…+b<sub>0</sub>x(mod m(x))</p><p>如果b<sub>7</sub>&#x3D;0,求模结果不变，否则乘积减去m(x),即求乘积的结果与m(x)异或。</p><p>由此的得出十六进制02乘b(x)相当于在字节上左移一位（最后一位补0），若b<sup>7</sup>&#x3D;1,则再与1B（00011011）做逐比特异或来实现，该运算记为b&#x3D;xtime(a)</p><p>上述运算将会应用在列混淆之中</p><p>接下来示例57(16进制)在该条件下乘02</p><blockquote><p>57&#x3D;01010111,02&#x3D;00000010相当于，第7位小于0，57左移一位后面补0。57&#x3D;10101110&#x3D;AE</p><p>如果是57*03可以看作57*（01+02)</p><p>如果AE*02,因为AE&#x3D;10101110,先将AE左移一位补0</p><p>01011100*02 mod(00011011),这些都是为了满足有限域内的条件，具体数学原理，我也不太明白</p></blockquote><h2 id="1-AES加密"><a href="#1-AES加密" class="headerlink" title="1. AES加密"></a>1. AES加密</h2><p>首先我们要知道，AES本身只能处理128位(16字节)的明文。在处理时将其按字节分成16块，4*4</p><table><thead><tr><th>A</th><th>E</th><th>I</th><th>N</th></tr></thead><tbody><tr><td>B</td><td>F</td><td>J</td><td>O</td></tr><tr><td>C</td><td>G</td><td>K</td><td>P</td></tr><tr><td>D</td><td>H</td><td>M</td><td>Q</td></tr></tbody></table><p>如果少了则填充0A。多了则重新排在另一个4*4的表格。</p><p>AES支持三种长度的密钥：<strong>128位，192位，256位</strong></p><p>128位经历10轮，之后两种多64位增加两轮。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/AES.5q7hdo4b6l.webp"></p><p>可以看出，AES加密有三个过程。初始轮，中间轮，最后轮。中间轮的数量在128Bites密钥中有</p><p>基础的四个过程。</p><ol><li>字节替换（SubBytes）q</li></ol><p>依据一个被称为S盒（Subtitution Box）的16*16大小的二维常量数组。示例如图。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/Shex.8l05jgfe41.webp"></p><p>如果我们要替换4d字节，那么我们就找到第4行，第d列即为e3。</p><ol start="2"><li><p>行位移（ShiftRows）</p><p>第一行不变，第二行左移一个字节，第三行左移三个字节，第四行左移四个字节。</p><table><thead><tr><th>A</th><th>E</th><th>I</th><th>N</th></tr></thead><tbody><tr><td>O</td><td>B</td><td>F</td><td>J</td></tr><tr><td>K</td><td>P</td><td>C</td><td>G</td></tr><tr><td>H</td><td>M</td><td>Q</td><td>D</td></tr></tbody></table><ol start="3"><li>列混淆（MixColumns）。</li></ol><p><img src="https://img2018.cnblogs.com/i-beta/1810390/201911/1810390-20191115142019897-587484033.png" alt="img"></p><p>用给定的一段矩阵左乘我们的数据，但是不完全跟矩阵乘法相同，示例结果如下，左乘的数</p><p>例如第一行第一列，得到的结果是<br>$$<br>q1&#x3D;(02<em>p1)⊕(03</em>p2)⊕(01<em>p3)⊕(01</em>p4)<br>$$<br>⊕是异或(^)的意思。</p><ol start="4"><li>轮密钥加(AddRoundKey)</li></ol><p>用明文矩阵和给定的轮密钥每一列进行异或。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-12-24-145502.1lbw1l0ect.webp"></p></li></ol><p>例如如同。</p><p>这个密钥矩阵每轮都会改变。关于每轮的密钥扩展，</p><ul><li>每一轮都会生成一个新的轮密钥</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/Keyadd.1vypuqh6zf.webp"></p><p>初始轮密钥为a0&#x2F;1&#x2F;2&#x2F;3.第<strong>i</strong>列的数据。</p><p>当 <strong>i!&#x3D;4</strong>n时。     **ai&#x3D;a[i-4] ^ a[i-1]**。</p><p>当i&#x3D;4n时。      <strong>a[i]&#x3D;a[i-4]^T(a[i-1])</strong></p><p>T(a[i-1])需要做出解释。</p><p>分为三步。例如a4&#x3D;a0^T(a[3])</p><ol><li><p>b3&#x3D;[09,cf,4f,3c]左移一位&lt;&lt;得a3&#x3D;[cf,4f,3c,09]</p></li><li><p>字节代换</p><p> 根据S盒。c3&#x3D;[8a,84,eb,01]</p></li><li><p>将前两步的结果同轮常量Rcon[j],j表示轮数，</p></li></ol><p>Rcon[j]是一个给定的4*j的表。</p><p>d3&#x3D;b3^c3^rj</p><p>就能得到T(a[3])&#x3D;d3</p><h3 id="AES加密的不同模式"><a href="#AES加密的不同模式" class="headerlink" title="AES加密的不同模式"></a>AES加密的不同模式</h3><p>AES加密算法的模式主要有五种,主要区别在于加密过程中明文和密文的处理方式以及安全性特</p><p>1.ECB模式</p><blockquote><ol><li>每个明文块被独立加密，相同的明文块得到相同的密文块。</li><li>不适合加密大量数据或具有重复模式的数据，容易受到攻击。</li></ol></blockquote><ol start="2"><li>CBC模式</li></ol><blockquote><ol><li><p>使用前一个密文块对当前明文块进行加密，增加了随机性，相同的明文块在不同位置得到</p></li><li><p>需要使用初始化向量（IV）来增加安全性。</p></li></ol></blockquote><ol start="3"><li>CFB模式。</li></ol><blockquote><ul><li>使用前一个密文块作为输入生成伪随机密钥流与明文进行异或运算得到密文。</li><li>可以支持实时加密和流加密。</li></ul></blockquote><ol start="4"><li>OFB模式</li></ol><blockquote><ul><li>类似于CFB，使用前一个密文块生成伪随机密钥流，然后与明文进行异或运算。</li><li>对加密和解密中的错误更加鲁棒，但不支持部分更新。</li></ul></blockquote><ol start="5"><li>CTR模式</li></ol><blockquote><ul><li>使用一个计数器与密钥输入加密算法生成伪随机密钥流，与明文进行异或运算。</li><li>可以并行加密和解密，适用于需要高效加密的场景。</li></ul></blockquote><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">import copy<br>def <span class="hljs-keyword">mul</span>(poly1, poly2):   # 两个多项式相乘<br>result = <span class="hljs-number">0</span><br>for index <span class="hljs-keyword">in</span> range(poly2<span class="hljs-number">.</span>bit_length()):<br>if poly2 &amp; (<span class="hljs-number">1</span> &lt;&lt; index):<br>result ^= (poly1 &lt;&lt; index)<br>return result<br><br>def mod(poly, mod = <span class="hljs-number">0b100011011</span>):    # 多项式poly模多项式<span class="hljs-number">100011011</span><br>while poly<span class="hljs-number">.</span>bit_length() &gt; <span class="hljs-number">8</span>:<br>poly ^= (mod &lt;&lt; (poly<span class="hljs-number">.</span>bit_length() - <span class="hljs-number">9</span>))<br>return poly<br><br>def substitute(m_hex, inverse=False):<br>    m_s = []<br>    box = s_box if <span class="hljs-keyword">not</span> inverse else i_s_box<br>    for i <span class="hljs-keyword">in</span> m_hex:<br>        x, y = <span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>) // <span class="hljs-number">16</span>, <span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>) % <span class="hljs-number">16</span><br>        temp = hex(box[x*<span class="hljs-number">16</span>+y])<br>        m_s<span class="hljs-number">.</span>append(temp)<br>    return m_s<br><br>s_box =   [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>]<br>i_s_box = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7D</span>]<br>rcon = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x36</span>]<br>mix_column_matrix   = [<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>] # 列混合乘的矩阵<br>i_mix_column_matrix = [<span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>] # 列混合乘的逆矩阵<br>def gen_key(key):<br>    key_hex = get_hex(key)<br>    key_rotate = []<br>    w = [[] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">44</span>)]<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):<br>        w[i // <span class="hljs-number">4</span>].append(key_hex[i])<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>, <span class="hljs-number">44</span>):<br>        gw = copy<span class="hljs-number">.</span>deepcopy(w[i - <span class="hljs-number">1</span>])<br>        if i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:<br>            gw[<span class="hljs-number">0</span>], gw[<span class="hljs-number">1</span>], gw[<span class="hljs-number">2</span>], gw[<span class="hljs-number">3</span>] = gw[<span class="hljs-number">1</span>], gw[<span class="hljs-number">2</span>], gw[<span class="hljs-number">3</span>], gw[<span class="hljs-number">0</span>]<br>            gw = substitute(gw) #g(w(i-<span class="hljs-number">1</span>))<br>            gw[<span class="hljs-number">0</span>] = hex(<span class="hljs-keyword">int</span>(gw[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>) ^ rcon[i // <span class="hljs-number">4</span> - <span class="hljs-number">1</span>]) #ppt上说的<span class="hljs-number">2</span>^(i-<span class="hljs-number">4</span>)/<span class="hljs-number">4</span>有误，看书p84<br>        for j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            w[i].append(hex(<span class="hljs-keyword">int</span>(gw[j], <span class="hljs-number">16</span>) ^ <span class="hljs-keyword">int</span>(w[i-<span class="hljs-number">4</span>][j], <span class="hljs-number">16</span>)))<br>    key_rotate = [w[i * <span class="hljs-number">4</span>] + w[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] + w[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] + w[ i* <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)] # 轮密钥列表,每个元素都是有<span class="hljs-number">16</span>个字节的列表<br>    return key_rotate<br><br>def <span class="hljs-keyword">xor</span>(a, key): #a和key都是列表，都存了<span class="hljs-number">16</span>字节<br>    return [hex(<span class="hljs-keyword">int</span>(a[i], <span class="hljs-number">16</span>) ^ <span class="hljs-keyword">int</span>(key[i], <span class="hljs-number">16</span>)) for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)]<br><br>def get_hex(s): #得到一个字符串的十六进制值，以列表形式返回<br>    return [hex(ord(i)) for i <span class="hljs-keyword">in</span> s]<br><br>def shiftrows(a, inverse=False): #inverse为True时表示为逆操作，默认为False<br>    return [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">3</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">11</span>] ] if <span class="hljs-keyword">not</span> inverse else [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">11</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">3</span>] ]<br><br>def mixcolumn(m_row, inverse=False):<br>    matrix = mix_column_matrix if <span class="hljs-keyword">not</span> inverse else i_mix_column_matrix<br>    m_col = []<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):<br>        x, y = i % <span class="hljs-number">4</span>, i // <span class="hljs-number">4</span><br>        result = <span class="hljs-number">0</span><br>        for j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            result ^= (<span class="hljs-keyword">mul</span>(matrix[x * <span class="hljs-number">4</span> + j], <span class="hljs-keyword">int</span>(m_row[y * <span class="hljs-number">4</span> + j], <span class="hljs-number">16</span>)))<br>        result = mod(result)<br>        m_col<span class="hljs-number">.</span>append(hex(result))<br>    return m_col<br><br>def aes_encrypt(m, key_rotate):<br>    m_hex = get_hex(m) #得到明文的hex列表<br>    m_xor = <span class="hljs-keyword">xor</span>(m_hex, key_rotate[<span class="hljs-number">0</span>]) #将明文初始<span class="hljs-keyword">xor</span>密钥 w0 w1 w2 w3<br>    for rotate <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>): #十轮<br>        m_s = substitute(m_xor) # 字节代替<br>        m_row = shiftrows(m_s)<br>        m_col = m_row #列混合<br>        if rotate != <span class="hljs-number">10</span>: #最后一轮不用列混合<br>            m_col = mixcolumn(m_row)<br>        m_xor = <span class="hljs-keyword">xor</span>(m_col, key_rotate[rotate])<br>    ciphertext = <span class="hljs-string">&quot;&quot;</span> #输出的密文为每个十六进制字符的联结，类似e365e09962d634a8fbfe8359c57b22c5。一共<span class="hljs-number">32</span>个，每两个字母对应了一个字节的十六进制。<span class="hljs-number">16</span>个进制，<span class="hljs-number">128</span>位。<br>    for i <span class="hljs-keyword">in</span> m_xor:<br>        ciphertext += (i[<span class="hljs-number">2</span>:] if len(i[<span class="hljs-number">2</span>:]) == <span class="hljs-number">2</span> else <span class="hljs-string">&quot;0&quot;</span> + i[<span class="hljs-number">2</span>:]) #对类似<span class="hljs-number">0xf</span>的十六进制格式化为<span class="hljs-number">0x0f</span><br>    return ciphertext<br><br>def aes_decrypt(c, key_rotate):<br>    c_hex = [<span class="hljs-string">&#x27;0x&#x27;</span> + c[i * <span class="hljs-number">2</span>] + c[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)] #将密文恢复为列表<br>    c_xor = <span class="hljs-keyword">xor</span>(c_hex, key_rotate[<span class="hljs-number">10</span>])<br>    c_row = shiftrows(c_xor, inverse=True)<br>    c_s = substitute(c_row, inverse=True)<br>    for rotate <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>): #循环<span class="hljs-number">9</span>次<br>        c_xor = <span class="hljs-keyword">xor</span>(c_s, key_rotate[rotate])<br>        c_col = mixcolumn(c_xor, inverse=True)<br>        c_row = shiftrows(c_col, inverse=True)<br>        c_s = substitute(c_row, inverse=True)<br>    plaintext = <span class="hljs-string">&quot;&quot;</span><br>    for i <span class="hljs-keyword">in</span> <span class="hljs-keyword">xor</span>(c_s, key_rotate[<span class="hljs-number">0</span>]): #将明文的hex列表转化为字母<br>        plaintext += chr(<span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>))<br>    return plaintext<br># 原始明文和密钥<br>m = <span class="hljs-string">&quot;1234567890abcdef&quot;</span><br>key = <span class="hljs-string">&quot;1234567890abcdef&quot;</span><br><br># 生成轮密钥<br>key_rotate = gen_key(key)<br><br># 加密<br>ciphertext = aes_encrypt(m, key_rotate)<br>print(<span class="hljs-string">&quot;Ciphertext:&quot;</span>, ciphertext)<br><br># 解密<br>plaintext = aes_decrypt(ciphertext, key_rotate)<br>print(<span class="hljs-string">&quot;Decrypted text:&quot;</span>, plaintext)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>python</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DH密钥交换协议</title>
    <link href="/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="DH-密钥交换协议"><a href="#DH-密钥交换协议" class="headerlink" title="DH 密钥交换协议"></a>DH 密钥交换协议</h1><p>在基于<a href="https://zhida.zhihu.com/search?content_id=221358888&content_type=Article&match_order=1&q=%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&zhida_source=entity">对称加密</a>进行安全通信的过程中，通信双方需要持有一个共享的密钥。只有这样，由任何一方加密的信息才能由另一方使用相同的密钥解密。但是<strong>在能够安全的通信之前，通信双方应该如何约定一个共享的密钥呢？这就是安全中的经典问题：密钥配送问题（Key Distribution Problem</strong>[<a href="https://zhuanlan.zhihu.com/p/599518034#ref_1">1]</a><strong>）</strong>。</p><p>Diffe-Hellman密钥交换协议只是其中一种约定功能共享密钥的方式，</p><h2 id="DHKE协议简介"><a href="#DHKE协议简介" class="headerlink" title="DHKE协议简介"></a>DHKE协议简介</h2><p><strong>DHKE是一种通过公共通道安全地交换加密密钥的数学方法，以Whitfield Diffi</strong>e和Martin Hellman的名字命名。</p><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><blockquote><p>$c&#x3D;G^e mod P(0&lt;&#x3D;c&lt;P)$</p><p>G是P的原根，满足条件</p><p>{g1modp,g2modp,g3modp,…,gp−1modp}&#x3D;{1,2,3,…,p−1}</p></blockquote><h2 id="DHKE协议的过程"><a href="#DHKE协议的过程" class="headerlink" title="DHKE协议的过程"></a>DHKE协议的过程</h2><p><img src="https://rockfox0.github.io/picx-images-hosting/v2-39cb492c048f5f2a643368c135626925_1440w.175g9ciqha.webp"></p><ol><li><p>客户端和服务端生成协商大素数P及其原根G</p></li><li><p>客户端生成私钥和公钥a和A</p><blockquote><p>A&#x3D;G<sup>a</sup> mod p</p></blockquote></li><li><p>将公钥A发送给服务端</p></li><li><p>服务端生成私钥b和公钥B</p></li></ol><blockquote><p>$B&#x3D;G^b mod P$</p></blockquote><ol><li><p>服务端将公钥B发送给客户端</p></li><li><p>客户端已知G,P,A,a,B计算密钥S1</p></li><li><blockquote><p>$S1&#x3D;B^a mod P$ </p></blockquote></li><li><p>服务端已知A B b G P计算共享密钥</p></li></ol><blockquote><p>$S2&#x3D;A^b mod p$</p></blockquote><ol start="9"><li>客户端和服务端共享密钥S</li></ol><blockquote><p>$S&#x3D;S1&#x3D;B^a mod P&#x3D;(G^b) mod p&#x3D;A^b mod P&#x3D;S2$</p></blockquote><p>可以知道共享密钥的原理，</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/23/hello-world/"/>
    <url>/2024/12/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
