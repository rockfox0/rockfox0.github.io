<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker-desktop 代理冲突问题解决方式</title>
    <link href="/2025/08/08/docker/"/>
    <url>/2025/08/08/docker/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker-代理冲突问题的解决"><a href="#docker-代理冲突问题的解决" class="headerlink" title="docker 代理冲突问题的解决"></a>docker 代理冲突问题的解决</h1><p>docker的配置在网上已经有很多，大多数用的是配置镜像的方法，但是有的盆友可能和我一样发现不开代理登录不上去docker–desktop，登录上去之后呢，拉去镜像会出现这个问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">docker pull nginx<br>Using default tag: latest<br>Error response <span class="hljs-keyword">from</span> daemon: failed to resolve reference <span class="hljs-string">&quot;docker.io/library/nginx:latest&quot;</span>: failed to do request: Head <span class="hljs-string">&quot;https://hub-mirror.c.163.com/v2/library/nginx/manifests/latest?ns=docker.io&quot;</span>: proxyconnect tcp: dial tcp <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">7897</span>: connect: connection refused<br></code></pre></td></tr></table></figure><p>因为用clash-verge这样的软件进入代理之后，会自动设置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">HTTP_PROXY</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7897</span><br><br><span class="hljs-attr">HTTP_PROXYs</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">7897</span><br></code></pre></td></tr></table></figure><p>然鹅这样是拉去不了镜像的，一个很好的解决方法是，</p><ul><li><p>关掉系统代理，开启虚拟网卡模式，这样的坏处可能就是下东西卡了点。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-08-08-220336.7lkb75nvtm.png" alt="image-20250808221124189"></p></li></ul><p>在clashverge里面可以调整。</p><p>之后就可以拉去了</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-3711的原理解析以及简单复现</title>
    <link href="/2025/07/20/%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90/"/>
    <url>/2025/07/20/%E8%BF%87%E7%A8%8B%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CVE-2021-3711漏洞解析"><a href="#CVE-2021-3711漏洞解析" class="headerlink" title="CVE-2021-3711漏洞解析"></a>CVE-2021-3711漏洞解析</h1><ul><li>这个文件位置在1.1.1不同的版本位置可能也有变化，具体可以gpt或者官方文档看看这里示例的是)</li></ul><p>在crypto&#x2F;pkcs7&#x2F;pk7_doit.c，有这个函数，是对被包装的密文进行解密的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pkcs7_decrypt_rinfo</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> **pek, <span class="hljs-type">int</span> *peklen,</span><br><span class="hljs-params">                               PKCS7_RECIP_INFO *ri, EVP_PKEY *pkey)</span><br>&#123;<br>    EVP_PKEY_CTX *pctx = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *ek = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">size_t</span> eklen;<br><br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">-1</span>;<br><br>    pctx = EVP_PKEY_CTX_new(pkey, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (!pctx)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_decrypt_init(pctx) &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_CTX_ctrl(pctx, <span class="hljs-number">-1</span>, EVP_PKEY_OP_DECRYPT,<br>                          EVP_PKEY_CTRL_PKCS7_DECRYPT, <span class="hljs-number">0</span>, ri) &lt;= <span class="hljs-number">0</span>) &#123;<br>        PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, PKCS7_R_CTRL_ERROR);<br>        <span class="hljs-keyword">goto</span> err;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_decrypt(pctx, <span class="hljs-literal">NULL</span>, &amp;eklen,<br>                         ri-&gt;enc_key-&gt;data, ri-&gt;enc_key-&gt;length) &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">goto</span> err;<br><br>    ek = OPENSSL_malloc(eklen);<br><br>    <span class="hljs-keyword">if</span> (ek == <span class="hljs-literal">NULL</span>) &#123;<br>        PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, ERR_R_MALLOC_FAILURE);<br>        <span class="hljs-keyword">goto</span> err;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_decrypt(pctx, ek, &amp;eklen,<br>                         ri-&gt;enc_key-&gt;data, ri-&gt;enc_key-&gt;length) &lt;= <span class="hljs-number">0</span>) &#123;<br>        ret = <span class="hljs-number">0</span>;<br>        PKCS7err(PKCS7_F_PKCS7_DECRYPT_RINFO, ERR_R_EVP_LIB);<br>        <span class="hljs-keyword">goto</span> err;<br>    &#125;<br><br>    ret = <span class="hljs-number">1</span>;<br><br>    OPENSSL_clear_free(*pek, *peklen);<br>    *pek = ek;<br>    *peklen = eklen;<br><br> err:<br>    EVP_PKEY_CTX_free(pctx);<br>    <span class="hljs-keyword">if</span> (!ret)<br>        OPENSSL_free(ek);<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>EVP_PKEY_decrypt()是解密函数，根据传入内容会自行判断解析结构体内的哪个解密函数，里面就包含SM2的解密函数。</p><p>我们最开始也不知道outlen有多长，这个outlen预先分配给密文的缓冲区长度。是如何分配的呢，我们得先跳转一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pkey_sm2_decrypt</span><span class="hljs-params">(EVP_PKEY_CTX *ctx,</span><br><span class="hljs-params">                            <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *out, <span class="hljs-type">size_t</span> *outlen,</span><br><span class="hljs-params">                            <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *in, <span class="hljs-type">size_t</span> inlen)</span><br>&#123;<br>    EC_KEY *ec = ctx-&gt;pkey-&gt;pkey.ec;<br>    SM2_PKEY_CTX *dctx = ctx-&gt;data;<br>    <span class="hljs-type">const</span> EVP_MD *md = (dctx-&gt;md == <span class="hljs-literal">NULL</span>) ? EVP_sm3() : dctx-&gt;md;<br><br>    <span class="hljs-keyword">if</span> (out == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!sm2_plaintext_size(ec, md, inlen, outlen))<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sm2_decrypt(ec, md, in, inlen, out, outlen);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pkey_sm2_ctrl</span><span class="hljs-params">(EVP_PKEY_CTX *ctx, <span class="hljs-type">int</span> type, <span class="hljs-type">int</span> p1, <span class="hljs-type">void</span> *p2)</span><br></code></pre></td></tr></table></figure><p>第一次传入out&#x3D;NULL,使用sm2_plaintext_size(ec, md, inlen, outlen)函数，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">sm2_plaintext_size</span><span class="hljs-params">(<span class="hljs-type">const</span> EC_KEY *key, <span class="hljs-type">const</span> EVP_MD *digest, <span class="hljs-type">size_t</span> msg_len,</span><br><span class="hljs-params">                       <span class="hljs-type">size_t</span> *pt_size)</span><br>    <br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> field_size = ec_field_size(EC_KEY_get0_group(key));<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> md_size = EVP_MD_size(digest);<br>    <span class="hljs-type">size_t</span> overhead;<br><br>    <span class="hljs-keyword">if</span> (md_size &lt; <span class="hljs-number">0</span>) &#123;<br>        SM2err(SM2_F_SM2_PLAINTEXT_SIZE, SM2_R_INVALID_DIGEST);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (field_size == <span class="hljs-number">0</span>) &#123;<br>        SM2err(SM2_F_SM2_PLAINTEXT_SIZE, SM2_R_INVALID_FIELD);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    overhead = <span class="hljs-number">10</span> + <span class="hljs-number">2</span> * field_size + (<span class="hljs-type">size_t</span>)md_size;<br>    <span class="hljs-keyword">if</span> (msg_len &lt;= overhead) &#123;<br>        SM2err(SM2_F_SM2_PLAINTEXT_SIZE, SM2_R_INVALID_ENCODING);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    *pt_size = msg_len - overhead;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">const</span> <span class="hljs-type">size_t</span> field_size = ec_field_size(EC_KEY_get0_group(key));<br></code></pre></td></tr></table></figure><p>这个函数是获取key所在椭圆曲线的域的大小，那么这个域的大小就是p，sm2固定的域的大小是32字节，这里用域的大小代替了x和y的大小，不过这里是不严谨的。因为x,y的大小也可能小于32字节.</p><p>这里得到的</p><p> overhead &#x3D; 10 + 2 * field_size + (size_t)md_size;</p><p>  *pt_size &#x3D; msg_len - overhead;</p><p>即即将分配的给输出明文的缓冲区(通过密文的大概长度推算出明文的)。</p><p>我们可以介绍一些ANS.1的大概结构见文档另一部分。10就是前面的TAG和lenth占的</p><p>我们计算得出value是*pt_size，不过如果field_silze偏大，那么缓冲区就会偏小，得到明文的时候就会导致缓冲区溢出。</p><p>我们只需要用缓冲区为31bit的明文加密，后续进行解密的时候就会发现触发了缓冲区溢出的漏洞。</p><ul><li><p>补充，由于这个openssl1.1.1系列还没有对sm2做专门的签名接口，命令也只能用于生成公钥私钥。不过可以复杂一点的方式来调用evp来进行。</p><p>该代码在openssl1.1.1-x64运行。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;openssl/ec.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;openssl/evp.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;openssl/bn.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sm2_encrypt</span><span class="hljs-params">(EVP_PKEY* pkey, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* message, <span class="hljs-type">size_t</span> message_len,</span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>** ciphertext, <span class="hljs-type">size_t</span>* ciphertext_len)</span><br>&#123;<br>    EVP_PKEY_CTX* ectx = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (!(ectx = EVP_PKEY_CTX_new(pkey, <span class="hljs-literal">NULL</span>))) <span class="hljs-keyword">goto</span> end;<br>    <span class="hljs-keyword">if</span> (EVP_PKEY_encrypt_init(ectx) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> end;<br><br>    <span class="hljs-comment">// 查询密文长度</span><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_encrypt(ectx, <span class="hljs-literal">NULL</span>, ciphertext_len, message, message_len) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> end;<br><br>    *ciphertext = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(*ciphertext_len);<br>    <span class="hljs-keyword">if</span> (!(*ciphertext)) <span class="hljs-keyword">goto</span> end;<br><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_encrypt(ectx, *ciphertext, ciphertext_len, message, message_len) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> end;<br><br>    ret = <span class="hljs-number">0</span>;<br><br>end:<br>    <span class="hljs-keyword">if</span> (ectx) EVP_PKEY_CTX_free(ectx);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sm2_decrypt</span><span class="hljs-params">(EVP_PKEY* pkey, <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* ciphertext, <span class="hljs-type">size_t</span> ciphertext_len,</span><br><span class="hljs-params">    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>** plaintext, <span class="hljs-type">size_t</span>* plaintext_len)</span><br>&#123;<br>    EVP_PKEY_CTX* dctx = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (!(dctx = EVP_PKEY_CTX_new(pkey, <span class="hljs-literal">NULL</span>))) <span class="hljs-keyword">goto</span> end;<br>    <span class="hljs-keyword">if</span> (EVP_PKEY_decrypt_init(dctx) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> end;<br><br>    <span class="hljs-comment">// 查询明文长度</span><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_decrypt(dctx, <span class="hljs-literal">NULL</span>, plaintext_len, ciphertext, ciphertext_len) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> end;<br><br>    *plaintext = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(*plaintext_len);<br>    <span class="hljs-keyword">if</span> (!(*plaintext)) <span class="hljs-keyword">goto</span> end;<br><br>    <span class="hljs-keyword">if</span> (EVP_PKEY_decrypt(dctx, *plaintext, plaintext_len, ciphertext, ciphertext_len) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> end;<br><br>    ret = <span class="hljs-number">0</span>;<br><br>end:<br>    <span class="hljs-keyword">if</span> (dctx) EVP_PKEY_CTX_free(dctx);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">-1</span>, i;<br>    EVP_PKEY_CTX* pctx = <span class="hljs-literal">NULL</span>;<br>    EVP_PKEY* pkey = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> message[<span class="hljs-number">16</span>] = &#123; <span class="hljs-number">0x0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x7</span>,<br>                                  <span class="hljs-number">0x8</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xA</span>, <span class="hljs-number">0xB</span>, <span class="hljs-number">0xC</span>, <span class="hljs-number">0xD</span>, <span class="hljs-number">0xE</span>, <span class="hljs-number">0xF</span> &#125;;<br>    <span class="hljs-type">size_t</span> message_len = <span class="hljs-keyword">sizeof</span>(message);<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* ciphertext = <span class="hljs-literal">NULL</span>, * plaintext = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">size_t</span> ciphertext_len, plaintext_len;<br><br>    <span class="hljs-comment">// 生成 SM2 密钥对</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span> (!(pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, <span class="hljs-literal">NULL</span>))) <span class="hljs-keyword">goto</span> clean_up;<br>        <span class="hljs-keyword">if</span> (EVP_PKEY_paramgen_init(pctx) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> clean_up;<br>        <span class="hljs-keyword">if</span> (EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_sm2) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">goto</span> clean_up;<br>        <span class="hljs-keyword">if</span> (EVP_PKEY_keygen_init(pctx) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> clean_up;<br>        <span class="hljs-keyword">if</span> (EVP_PKEY_keygen(pctx, &amp;pkey) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> clean_up;<br><br>        <span class="hljs-comment">// 设置 SM2 类型</span><br>        <span class="hljs-keyword">if</span> (EVP_PKEY_set_alias_type(pkey, EVP_PKEY_SM2) != <span class="hljs-number">1</span>) <span class="hljs-keyword">goto</span> clean_up;<br><br>        <span class="hljs-comment">// 加密</span><br>        <span class="hljs-keyword">if</span> (sm2_encrypt(pkey, message, message_len, &amp;ciphertext, &amp;ciphertext_len) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Encryption failed!\n&quot;</span>);<br>            <span class="hljs-keyword">goto</span> clean_up;<br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Ciphertext length: %zu\nCiphertext (ASN.1 encoded):\n&quot;</span>, ciphertext_len);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-type">int</span>)ciphertext_len; i++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%02x &quot;</span>, ciphertext[i]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>        <span class="hljs-keyword">if</span> (ciphertext_len == <span class="hljs-number">121</span> ) &#123;<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//判断，让由于其他两个C2和C3如果在密文不变的情况下是不变的，所以我们只需要限定它小于正常生成长度的小一些就行</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 解密</span><br>    <span class="hljs-keyword">if</span> (sm2_decrypt(pkey, ciphertext, ciphertext_len, &amp;plaintext, &amp;plaintext_len) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decryption failed!\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> clean_up;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Decrypted plaintext length: %zu\nPlaintext:\n&quot;</span>, plaintext_len);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-type">int</span>)plaintext_len; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%02x &quot;</span>, plaintext[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n&quot;</span>);<br><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SM2 encryption and decryption succeeded.\n&quot;</span>);<br>    ret = <span class="hljs-number">0</span>;<br><br>clean_up:<br>    <span class="hljs-keyword">if</span> (pctx) EVP_PKEY_CTX_free(pctx);<br>    <span class="hljs-keyword">if</span> (pkey) EVP_PKEY_free(pkey);<br>    <span class="hljs-keyword">if</span> (ciphertext) <span class="hljs-built_in">free</span>(ciphertext);<br>    <span class="hljs-keyword">if</span> (plaintext) <span class="hljs-built_in">free</span>(plaintext);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(_WIN32) || defined(_WIN64)</span><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>原理已经讲解过，具体内容见代码。</p><p>运行截图如下</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-21-022651.2dozt8fp5d.webp"></p><ul><li><p>一些吐槽</p><p>由于sm在openssl1.1.1刚刚引入openssl，所以sm2并没有做适配的接口，要从evp调用，还是有点麻烦。并且生成证书的命令也没有给，只能生成公私钥。加上sm其实用的人本来也不多，应用范围就更少了，难怪没什么人复现，应用也没什么人有，在本地触发这个漏洞，就当作学习吧.2333。如果有爱折腾的Pwn手也可以本地搭一个传入docker做ctf题。也可以在web做DOS。还是这个漏洞做了断断续续10天，emm，openssl的还是挺有趣的。</p></li><li><p>学密码也10个月了，还是比较菜，如有问题还请谅解。如果有人想讨论这个也可以私信我的邮箱<a href="mailto:&#x32;&#x34;&#x30;&#x35;&#x35;&#48;&#x38;&#x31;&#51;&#52;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;">&#x32;&#x34;&#x30;&#x35;&#x35;&#48;&#x38;&#x31;&#51;&#52;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109;</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>tools</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>openssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openssl使用-1</title>
    <link href="/2025/07/06/openssl/"/>
    <url>/2025/07/06/openssl/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Openssl使用-1"><a href="#Openssl使用-1" class="headerlink" title="Openssl使用-1"></a>Openssl使用-1</h1><p>这一章介绍一些基础的命令。openssl用的地方有点多，分两张写</p><h2 id="openssl的安装和配置"><a href="#openssl的安装和配置" class="headerlink" title="openssl的安装和配置"></a>openssl的安装和配置</h2><p><a href="https://slproweb.com/products/Win32OpenSSL.html">Win32&#x2F;Win64 OpenSSL Installer for Windows - Shining Light Productions</a></p><p>下载地址</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-000005.7i0nyoqjt3.webp"></p><p>使用这里是别人配置好的安装包</p><p>下好之后点击安装，之后就傻瓜式点点点。</p><ul><li>配置环境变量</li></ul><p><img src="C:/Users/24055/AppData/Roaming/Typora/typora-user-images/image-20250707002024482.png" alt="image-20250707002024482"></p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-001850.icegseekn.webp" alt="image-20250707002030726"></p><p>这样就配置好了</p><ul><li>lunix下配置</li></ul><p>Lunix配置比较简单这里就省略了嘿嘿。。。</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>OpenSSL 是一个功能强大的开源工具，用于实现安全通信的加密协议。它提供了 <strong>加密算法、密钥生成、证书管理、SSL&#x2F;TLS 协议实现</strong> 等一系列功能，广泛用于 Web 服务器、安全邮件、VPN、代码签名等领域。</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol><li>查看版本</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Users\<span class="hljs-number">24055</span>&gt;openssl version<br><span class="hljs-attribute">OpenSSL</span> <span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span> <span class="hljs-number">1</span> Jul <span class="hljs-number">2025</span> (Library: OpenSSL <span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span> <span class="hljs-number">1</span> Jul <span class="hljs-number">2025</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>生成随机数</li></ol><p>用 <code>openssl rand</code> 命令生成随机字节</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>openssl rand [选项] <span class="hljs-tag">&lt;<span class="hljs-name">字节数</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例如，生成 16 字节随机数据（以二进制输出）：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">openssl</span> rand <span class="hljs-number">16</span> &gt; random.bin<br></code></pre></td></tr></table></figure><p>生成 16 字节随机数据（以十六进制输出）：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">openssl <span class="hljs-keyword">rand</span> -<span class="hljs-keyword">hex</span> <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><hr><p>生成 Base64 编码的随机数openssl rand -base64</p><p>输出类似：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">t3jv5Q9Qs9k1J9YTqxBfGQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><ol start="3"><li>摘要函数</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">(openssl) fox@localhost:/mnt/c/Users/24055$ vi ms.txt<br>(openssl) fox@localhost:/mnt/c/Users/24055$ openssl dgst -SHA256 -hex ms.txt<br>SHA2-256(ms.txt)= e5e94ea36193df8f2b31f31cd50ab0db3affbf28cd8c0b6158355e5104a7b8d1<br></code></pre></td></tr></table></figure><p>使用SHA-235将ms.txt内的文本进行摘要函数计算。之后进行hex编码尽管hex是默认的编码方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">(openssl) fox@localhost:/mnt/c/Users/24055$ openssl dgst -SHA256 -out dgst.d ms.txt<br>(openssl) fox@localhost:/mnt/c/Users/24055$ vi dgst.d<br></code></pre></td></tr></table></figure><p>hash后的内容写入文件dgst.d中 -out <filename> 指定摘要输出文件</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><ol><li>生成rsa公钥和私钥</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl genpkey -algorithm RSA -out rsa.key -pkeyopt rsa_keygen_bits:2048<br></code></pre></td></tr></table></figure><p><code>openssl genpkey</code><br> OpenSSL 生成私钥的命令，是比旧命令 <code>genrsa</code> 更通用、推荐的新命令。</p><p><code>-algorithm RSA</code><br> 指定生成的是 RSA 算法的密钥对。</p><p><code>-out rsa.key</code><br> 将生成的私钥保存到名为 <code>rsa.key</code> 的文件中。</p><p><code>-pkeyopt rsa_keygen_bits:2048</code><br> 私钥生成参数，指定密钥长度为 2048 位（2048-bit RSA 密钥）。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-035712.73u87titiz.webp"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">(openssl) fox@localhost:/mnt/c/Users/24055$ openssl dgst -sha256 -sign rsa.key -out signature.sign msg.txt<br>(openssl) fox@localhost:/mnt/c/Users/24055$ <span class="hljs-built_in">cat</span> signature.sign<br>�<span class="hljs-string">&quot;�e�E��l4�tCyR�`�=@f</span><br><span class="hljs-string">                     ]���       ܔ�m�0�����٣�?-</span><br><span class="hljs-string">����ے(�,&amp;�␦5k�뾉��_h�-��,?&amp;K��NO9��,s��7B��o��w�ڇv&#x27;������</span><br><span class="hljs-string">                                                         T9*]`)�Z�N��d8*P_�0Y�BN5���ĸ</span><br><span class="hljs-string">                                                                                     N�89��</span><br><span class="hljs-string">                                                                                           �Q�U���|M���@�LYӺ��T7���8ulj֯�dh�M�@$�m/&amp;���+�����O���F�      B�P���oP���aI�_NB(openssl) (openssl) fox@localhost:/mnt/c/Users/24055$</span><br></code></pre></td></tr></table></figure><p>我们用</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">(openssl) fox<span class="hljs-variable">@localhost</span><span class="hljs-symbol">:/mnt/c/Users/</span><span class="hljs-number">24055</span><span class="hljs-variable">$ </span>openssl dgst -sha256 -sign rsa.key -out signature.sign msg.txt<br></code></pre></td></tr></table></figure><p>加密签名。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">(openssl) fox@localhost:/mnt/c/Users/24055$ openssl rsa -<span class="hljs-keyword">in</span> rsa.key -pubout -out rsa_pu<br>b.key<br><br></code></pre></td></tr></table></figure><p>生成对应的公钥在rsa_pub.key</p><p>然后用它验证签名。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">(openssl) fox@localhost:/mnt/c/Users/24055$ openssl dgst -sha256 -verify rsa_pub.key -signature signature.sign msg.txt<br>Verified OK#验证成功显示<br></code></pre></td></tr></table></figure><p> 🔹 <code>openssl</code></p><p>调用 OpenSSL 命令行工具。</p><hr><p> 🔹 <code>dgst</code></p><p>是 OpenSSL 的“digest”子命令，用于处理<strong>哈希摘要相关操作</strong>，包括计算、签名、验证等。</p><hr><p> 🔹 <code>-sha256</code></p><p>表示用 <strong>SHA-256 哈希算法</strong>对输入文件 <code>msg.txt</code> 进行摘要。<br> 数字签名的流程中一般先做摘要，所以必须指定摘要算法（和签名时用的一致）。</p><hr><p> 🔹 <code>-verify rsa_pub.key</code></p><p>表示使用 <code>rsa_pub.key</code> 这个文件中保存的<strong>RSA公钥</strong>进行验证。<br> 公钥的作用是：<strong>验证签名是否合法</strong>（也就是验证这份签名是否是由私钥对 msg.txt 的 SHA256 摘要签的名）</p><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl enc -aes-128-cbc -e -a -p -pbkdf2 -<span class="hljs-keyword">in</span> msg.txt -out<br> cipher.enc<br></code></pre></td></tr></table></figure><p>🔹 <code>enc</code></p><p>是 OpenSSL 的加密&#x2F;解密模块，支持对称加密算法（AES、DES、BF 等）进行加密&#x2F;解密操作。</p><hr><p> 🔹 <code>-aes-128-cbc</code></p><p>指定加密算法为 <strong>AES（高级加密标准）128位密钥，使用 CBC 模式（Cipher Block Chaining）</strong>。</p><ul><li><code>128</code>：表示使用 128 位密钥（16 字节）。</li><li><code>cbc</code>：表示使用“密文块链接模式”，需要 IV（初始化向量）。</li></ul><hr><p> 🔹 <code>-e</code></p><p>表示 <strong>加密模式</strong>（encrypt），相对应的解密是 <code>-d</code>。</p><hr><p> 🔹 <code>-a</code></p><p>表示对加密结果进行 <strong>Base64 编码</strong>，使输出是可打印字符（文本文件也能存储），否则默认是二进制格式。</p><hr><p> 🔹 <code>-p</code></p><p>加上这个参数会在加密时<strong>打印出所用的 key 和 IV</strong>（以十六进制显示），用于调试或记录。</p><hr><p> 🔹 <code>-pbkdf2</code></p><p>表示使用 <strong>PBKDF2 密钥派生函数</strong>从口令中派生出加密密钥（而不是旧版默认的 EVP_BytesToKey，它已经不安全了）。<strong>现代 OpenSSL 建议强烈加上这个选项</strong>。</p><ul><li>简单来说，如果你输入口令 <code>mypassword</code>，OpenSSL 不会直接用它做密钥，而是用 PBKDF2 做拉伸（加盐 + 多轮 hash）来生成强密码。</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-041814.51efjrkrhc.webp"></p><blockquote><p>在执行加密时，会让输入password，并不是实际加密的密钥。实际加密的密钥是根据输入的password，利用kdf算法（如pbkdf2）生成的。实际密钥和偏移值可以使用-p选项，在加密后输出。</p><p>同时，也可以通过-K key指定实际使用的密钥。</p><p>在加密的时候会默认加入随机值盐salt，使得每次加密的生成密钥和加密值不一致，增加爆破难度。可以使用-nosalt选项不使用盐，通过-p可以发现，password一致时，每次生成的key都一样的。</p><p>同样的，也可以使用-S salt指定使用的盐而不使用随机值。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl enc -aes-128-cbc -d -a -p -pbkdf2 -<span class="hljs-keyword">in</span> cipher.enc -<br>out plain.d<br></code></pre></td></tr></table></figure><p>现在我们使用-d来解密，解密过程中我们需要输入我们之前输入的。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-042322.8s3l509qhh.webp" alt="image-20250707042323266"></p><ul><li>-aes-128-cbc指定解密算法。</li><li>-d表示解密</li><li>-a指定先进行base64解码，再进行解密。</li><li>-pbkdf2表示加密时的密钥使用pbkdf2算法生成。</li><li>-p表示解密后，输出实际使用的盐、密钥和偏移值到标准输出。</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-042644.5c19cx072h.webp" alt="image-20250707042644981"></p><h3 id="密钥处理"><a href="#密钥处理" class="headerlink" title="密钥处理"></a>密钥处理</h3><ol><li>生成rsa公私钥</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl genrsa -out rsa.pem 1024<br></code></pre></td></tr></table></figure><ul><li>genrsa</li></ul><p>表示生成rsa私钥</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-043657.9o02kgjrgw.webp" alt="image-20250707043659450"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl rsa -<span class="hljs-keyword">in</span> rsa.pem -pubout -out rsa_pub.pem<br></code></pre></td></tr></table></figure><p>导出公钥</p><ul><li>-in指定输入的私钥文件。</li><li>-pubout：默认输出为私钥，利用该选项指定输出为公钥。</li></ul><blockquote><p>-in -out 默认都是私钥，当输入或输出为公钥时，要分别加上-pubin、-pubout。若输入已经加上-pubin时，若输出也为公钥-pubout一般不用加，因为输入为公钥，输出默认也为公钥。</p><p>该原则适用于以下所有openssl rsa指令。</p></blockquote><ol start="2"><li>密钥格式转化</li></ol><p>默认生成和输入的都是Pem格式，他们之间咳哟转化</p><blockquote><ol><li>PEM格式</li></ol><ul><li><p><strong>全称</strong>：Privacy-Enhanced Mail</p></li><li><p><strong>文件内容</strong>：是经过Base64编码的文本格式，内容是可打印的ASCII字符。</p></li><li><p><strong>结构</strong>：有明确的头尾标识，比如私钥通常是：</p></li></ul> <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN RSA <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>（Base64编码的数据）<br>-----<span class="hljs-keyword">END</span> RSA <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><ul><li><p><strong>用途</strong>：广泛用于各种证书和密钥文件，尤其是在Linux、OpenSSL环境中常见。</p></li><li><p><strong>优点</strong>：</p></li><li><p>易于在文本文件中传输和阅读</p></li><li><p>支持添加注释、分隔符</p></li><li><p><strong>文件扩展名</strong>：<code>.pem</code>、<code>.crt</code>、<code>.cer</code>、<code>.key</code>（不完全统一）</p></li></ul><hr><ol start="2"><li>DER格式</li></ol><ul><li><strong>全称</strong>：Distinguished Encoding Rules</li><li><strong>文件内容</strong>：二进制格式，没有经过Base64编码，直接存储二进制数据。</li><li><strong>结构</strong>：纯二进制，不能直接用文本编辑器打开阅读。</li><li><strong>用途</strong>：通常用于Java平台和某些二进制传输协议，或者Windows系统的某些证书。</li><li><strong>优点</strong>：</li><li>紧凑，不需要编码，文件体积较小</li><li><strong>文件扩展名</strong>：<code>.der</code>、<code>.cer</code>（也可能是.pem的二进制形式）</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl rsa -pubin -<span class="hljs-keyword">in</span> rsa_pub.pem -outform DER -out rsa_pub.der<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl rsa -<span class="hljs-keyword">in</span> rsa.pem -outform DER -out rsa.der<br></code></pre></td></tr></table></figure><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-044805.6wr0cdvygr.webp" alt="image-20250707044822133"></p><ul><li>-outform 指定输出格式。</li><li>-pubin：默认输入为私钥，利用该选项指定输入为公钥。</li></ul><ol start="3"><li>查看密钥参数</li></ol><h3 id="RSA私钥中的关键参数解释"><a href="#RSA私钥中的关键参数解释" class="headerlink" title="RSA私钥中的关键参数解释"></a>RSA私钥中的关键参数解释</h3><table><thead><tr><th>参数名</th><th>含义与作用</th></tr></thead><tbody><tr><td><strong>Private-Key: (1024 bit, 2 primes)</strong></td><td>表示这是一个1024位的RSA密钥，使用了两个大质数（RSA标准）</td></tr><tr><td><strong>modulus (n)</strong></td><td>模数 n &#x3D; p × q，是RSA公钥和私钥的核心参数，所有加解密计算都围绕它进行。</td></tr><tr><td><strong>publicExponent (e)</strong></td><td>公钥指数 e，通常是 65537 (0x10001)，是公钥加密和签名验证时使用的指数。</td></tr><tr><td><strong>privateExponent (d)</strong></td><td>私钥指数 d，用于私钥解密和签名，满足 <code>(e × d) mod φ(n) = 1</code>，其中φ是欧拉函数。</td></tr><tr><td><strong>prime1 (p)</strong></td><td>大质数 p，模数 n 的一个质因子。</td></tr><tr><td><strong>prime2 (q)</strong></td><td>大质数 q，模数 n 的另一个质因子。</td></tr><tr><td><strong>exponent1 (d mod (p-1))</strong></td><td>私钥指数 d 对 p-1 取模的结果。用于加速私钥运算（中国剩余定理CRT优化）</td></tr><tr><td><strong>exponent2 (d mod (q-1))</strong></td><td>私钥指数 d 对 q-1 取模的结果。也用于CRT优化，提高运算效率。</td></tr><tr><td><strong>coefficient (q^(-1) mod p)</strong></td><td>q 关于 p 的模逆，即 q 的逆元 mod p。CRT计算时用到，用于组合两个模运算的结果，提升解密速度。</td></tr></tbody></table><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-07-07-045136.3k8ai0hfmt.webp" alt="image-20250707045143443"></p><ul><li>-text指明输出密钥的组件</li><li>-noout指明不输出编码的密钥</li></ul><h3 id="非对称算法"><a href="#非对称算法" class="headerlink" title="非对称算法"></a>非对称算法</h3><p>这里以rsa为例子</p><ol><li>加密</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">openssl pkeyutl -encrypt -<span class="hljs-keyword">in</span> msg.txt -pubin -inkey rsa_pub.pem -out rsa_chiper.enc<br></code></pre></td></tr></table></figure><p>pkeyutl 不仅支持rsa， OpenSSL 的公钥实用工具（用于公钥加密&#x2F;解密等操作）</p><p>rsautl相比过于简单老旧</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl pkeyutl -encrypt -<span class="hljs-keyword">in</span> msg.txt -pubin -inkey rsa_pub.pem -out rsa_chiper.enc -pkeyopt rsa_padding_mode:oaep -pkeyopt rsa_oaep_md:sha256<br></code></pre></td></tr></table></figure><p>这里是加了新的填充方式和sha256</p><ul><li>encrypt 表示加密</li><li>in 要加密的文件</li><li>pubin：默认输入私有密钥，表示输入密钥为公钥</li><li>inkey 指明加密的公钥文件</li><li>out输出的加密文件</li><li>-pkeyopt rsa_padding_mode:oaep指明填充模式为oaep</li><li>-pkeyopt rsa_oaep_md:sha256指明oaep使用的摘要算法为SHA256</li></ul><ol start="2"><li>解密</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">(openssl) fox@localhost:~/fox/text$ openssl pkeyutl -decrypt -<span class="hljs-keyword">in</span> rsa_chiper.enc -inkey rsa.pem -out rsa_plain.d<br>(openssl) fox@localhost:~/fox/text$ <span class="hljs-built_in">cat</span> rsa_plain.d<br>Icandoit<br></code></pre></td></tr></table></figure><ul><li>decrypt表示解密</li></ul><ol start="3"><li><p>签名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl dgst -sha256 -binary -out hash.dgst msg.txt<br></code></pre></td></tr></table></figure><p>先生成hash文件。这个要求验签的适合只能是binary格式o</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl pkeyutl -sign -inkey rsa.pem -<span class="hljs-keyword">in</span> hash.dgst -out signature.sign<br></code></pre></td></tr></table></figure><p>-sign</p><p>表示签名操作</p></li><li><p>验签</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">openssl pkeyutl -verify -pubin -inkey rsa_pub.pem -<span class="hljs-keyword">in</span> hash.dgst -sigfile signature.sign<br><br></code></pre></td></tr></table></figure><ul><li>verify</li></ul><p>表示验签。</p>]]></content>
    
    
    <categories>
      
      <category>TLS</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>algorithm</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/03/%E7%BC%96%E7%A0%81%E5%9F%BA%E7%A1%80-jsfuck/"/>
    <url>/2025/06/03/%E7%BC%96%E7%A0%81%E5%9F%BA%E7%A1%80-jsfuck/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="摩斯电码（Morse-Code"><a href="#摩斯电码（Morse-Code" class="headerlink" title="摩斯电码（Morse Code"></a>摩斯电码（Morse Code</h1><h2 id="📘-一、什么是摩斯电码？"><a href="#📘-一、什么是摩斯电码？" class="headerlink" title="📘 一、什么是摩斯电码？"></a>📘 一、什么是摩斯电码？</h2><p>摩斯电码是一种利用点（<code>.</code>）和划（<code>-</code>）组成的编码方式，用于表示文本信息。最初设计用于电报通信，现常用于航空、求救信号（如 “SOS”）、无线通信等场合。</p><hr><h2 id="🧠-二、编码原理"><a href="#🧠-二、编码原理" class="headerlink" title="🧠 二、编码原理"></a>🧠 二、编码原理</h2><ul><li>每个字母和数字由一组点和划构成：<ul><li>点（<code>.</code>）：短信号</li><li>划（<code>-</code>）：长信号</li></ul></li><li>字符间用空格分隔</li><li>单词间用 <code>/</code> 分隔</li></ul><h3 id="✅-示例对应表："><a href="#✅-示例对应表：" class="headerlink" title="✅ 示例对应表："></a>✅ 示例对应表：</h3><table><thead><tr><th>字符</th><th>摩斯码</th></tr></thead><tbody><tr><td>A</td><td>.-</td></tr><tr><td>B</td><td>-…</td></tr><tr><td>C</td><td>-.-.</td></tr><tr><td>D</td><td>-..</td></tr><tr><td>E</td><td>.</td></tr><tr><td>F</td><td>..-.</td></tr><tr><td>G</td><td>–.</td></tr><tr><td>H</td><td>….</td></tr><tr><td>I</td><td>..</td></tr><tr><td>J</td><td>.—</td></tr><tr><td>K</td><td>-.-</td></tr><tr><td>L</td><td>.-..</td></tr><tr><td>M</td><td>–</td></tr><tr><td>N</td><td>-.</td></tr><tr><td>O</td><td>—</td></tr><tr><td>P</td><td>.–.</td></tr><tr><td>Q</td><td>–.-</td></tr><tr><td>R</td><td>.-.</td></tr><tr><td>S</td><td>…</td></tr><tr><td>T</td><td>-</td></tr><tr><td>U</td><td>..-</td></tr><tr><td>V</td><td>…-</td></tr><tr><td>W</td><td>.–</td></tr><tr><td>X</td><td>-..-</td></tr><tr><td>Y</td><td>-.–</td></tr><tr><td>Z</td><td>–..</td></tr></tbody></table><hr><h2 id="🔨-编码过程（英文-→-摩斯）"><a href="#🔨-编码过程（英文-→-摩斯）" class="headerlink" title="🔨 编码过程（英文 → 摩斯）"></a>🔨 编码过程（英文 → 摩斯）</h2><h3 id="示例：编码-I-LOVE-YOU"><a href="#示例：编码-I-LOVE-YOU" class="headerlink" title="示例：编码 I LOVE YOU"></a>示例：编码 <code>I LOVE YOU</code></h3><ol><li>将字母大写（摩斯电码不区分大小写）  </li><li>查表获取每个字母的摩斯表示  </li><li>用空格分隔字符，用 <code>/</code> 分隔单词</li></ol><p><strong>结果：</strong></p><blockquote><p>I     → ..<br>LOVE  → .-.. — …- .<br>YOU   → -.– — ..-<br>最终结果：.. &#x2F; .-.. — …- . &#x2F; -.– — ..-</p></blockquote><hr><h2 id="🔓解码过程（摩斯-→-英文）"><a href="#🔓解码过程（摩斯-→-英文）" class="headerlink" title="🔓解码过程（摩斯 → 英文）"></a>🔓解码过程（摩斯 → 英文）</h2><h3 id="示例：解码"><a href="#示例：解码" class="headerlink" title="示例：解码 .... . .-.. .-.. ---"></a>示例：解码 <code>.... . .-.. .-.. ---</code></h3><ol><li>按空格分隔字符，按 <code>/</code> 分隔单词  </li><li>查表反向翻译每组摩斯码  </li><li>拼接结果字符串</li></ol><p><strong>结果：</strong></p><blockquote><p>…. → H<br>.    → E<br>.-.. → L<br>.-.. → L<br>—  → O<br>输出：HELLO</p></blockquote><hr><h2 id="🐍-五、Python-代码实现"><a href="#🐍-五、Python-代码实现" class="headerlink" title="🐍 五、Python 代码实现"></a>🐍 五、Python 代码实现</h2><h3 id="1️⃣-英文-→-摩斯（编码）"><a href="#1️⃣-英文-→-摩斯（编码）" class="headerlink" title="1️⃣ 英文 → 摩斯（编码）"></a>1️⃣ 英文 → 摩斯（编码）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">MORSE_CODE_DICT = &#123;<br>    <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-string">&#x27;.-&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-string">&#x27;-...&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-string">&#x27;-.-.&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-string">&#x27;-..&#x27;</span>,  <span class="hljs-string">&#x27;E&#x27;</span>: <span class="hljs-string">&#x27;.&#x27;</span>,<br>    <span class="hljs-string">&#x27;F&#x27;</span>: <span class="hljs-string">&#x27;..-.&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>: <span class="hljs-string">&#x27;--.&#x27;</span>,  <span class="hljs-string">&#x27;H&#x27;</span>: <span class="hljs-string">&#x27;....&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-string">&#x27;..&#x27;</span>,   <span class="hljs-string">&#x27;J&#x27;</span>: <span class="hljs-string">&#x27;.---&#x27;</span>,<br>    <span class="hljs-string">&#x27;K&#x27;</span>: <span class="hljs-string">&#x27;-.-&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-string">&#x27;.-..&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-string">&#x27;--&#x27;</span>,  <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-string">&#x27;-.&#x27;</span>,   <span class="hljs-string">&#x27;O&#x27;</span>: <span class="hljs-string">&#x27;---&#x27;</span>,<br>    <span class="hljs-string">&#x27;P&#x27;</span>: <span class="hljs-string">&#x27;.--.&#x27;</span>,<span class="hljs-string">&#x27;Q&#x27;</span>: <span class="hljs-string">&#x27;--.-&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>: <span class="hljs-string">&#x27;.-.&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-string">&#x27;...&#x27;</span>,  <span class="hljs-string">&#x27;T&#x27;</span>: <span class="hljs-string">&#x27;-&#x27;</span>,<br>    <span class="hljs-string">&#x27;U&#x27;</span>: <span class="hljs-string">&#x27;..-&#x27;</span>,<span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-string">&#x27;...-&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>: <span class="hljs-string">&#x27;.--&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-string">&#x27;-..-&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>: <span class="hljs-string">&#x27;-.--&#x27;</span>,<br>    <span class="hljs-string">&#x27;Z&#x27;</span>: <span class="hljs-string">&#x27;--..&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;.----&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;..---&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>: <span class="hljs-string">&#x27;...--&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>: <span class="hljs-string">&#x27;....-&#x27;</span>,<br>    <span class="hljs-string">&#x27;5&#x27;</span>: <span class="hljs-string">&#x27;.....&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>: <span class="hljs-string">&#x27;-....&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>: <span class="hljs-string">&#x27;--...&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>: <span class="hljs-string">&#x27;---..&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>: <span class="hljs-string">&#x27;----.&#x27;</span>,<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;-----&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_morse</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join(MORSE_CODE_DICT.get(ch.upper(), <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> text)<br>REVERSE_DICT = &#123;v: k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> MORSE_CODE_DICT.items()&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_morse</span>(<span class="hljs-params">code</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join(<br>        <span class="hljs-string">&#x27;&#x27;</span>.join(REVERSE_DICT.get(c, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> word.split())<br>        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> code.split(<span class="hljs-string">&#x27; / &#x27;</span>))<br><span class="hljs-built_in">print</span>(encode_morse(<span class="hljs-string">&quot;HELLO WORLD&quot;</span>))<br><span class="hljs-built_in">print</span>(decode_morse(<span class="hljs-string">&#x27;.... . .-.. .-.. --- / .-- --- .-. .-.. -..&#x27;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/03/2025-6-1%20JQCTFone-line-crypto%20165730/"/>
    <url>/2025/06/03/2025-6-1%20JQCTFone-line-crypto%20165730/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JQCTFone-line-crypto"><a href="#JQCTFone-line-crypto" class="headerlink" title="JQCTFone-line-crypto"></a>JQCTFone-line-crypto</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">assert</span> <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;re&#x27;</span>).fullmatch(<span class="hljs-string">br&#x27;flag\&#123;[!-z]&#123;11&#125;\&#125;&#x27;</span>,flag:=os.getenvb(<span class="hljs-string">b&#x27;FLAG&#x27;</span>)) <span class="hljs-keyword">and</span> [is_prime(<span class="hljs-built_in">int</span>(flag.<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>)^^<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;🌌 &#x27;</span>))) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>^<span class="hljs-number">7</span>)]<br></code></pre></td></tr></table></figure><p>这是题目源码。这道题侧重点在于利用is_Prime函数的特性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.misc.sageinspect <span class="hljs-keyword">import</span> sage_getsource<br><span class="hljs-built_in">print</span>(sage_getsource(Integer.is_prime))<br></code></pre></td></tr></table></figure><p>查看sage的这个函数</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-06-01-153422.2obrpte89y.webp"></p><p>发现是基于pari_is_prime的，查看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">long<br>BPSW_psp(GEN N)<br>&#123;<br>  pari_sp av;<br>  <span class="hljs-keyword">if</span> (typ(N) != t_INT) pari_err_TYPE(<span class="hljs-string">&quot;BPSW_psp&quot;</span>,N);<br>  <span class="hljs-keyword">if</span> (signe(N) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (lgefint(N) == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> uisprime(uel(N,<span class="hljs-number">2</span>));<br>  <span class="hljs-keyword">if</span> (!mod2(N)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">#ifdef LONG_IS_64BIT</span><br>  /* <span class="hljs-number">16294579238595022365</span> = <span class="hljs-number">3</span>*<span class="hljs-number">5</span>*<span class="hljs-number">7</span>*<span class="hljs-number">11</span>*<span class="hljs-number">13</span>*<span class="hljs-number">17</span>*<span class="hljs-number">19</span>*<span class="hljs-number">23</span>*<span class="hljs-number">29</span>*<span class="hljs-number">31</span>*<span class="hljs-number">37</span>*<span class="hljs-number">41</span>*<span class="hljs-number">43</span>*<span class="hljs-number">47</span>*<span class="hljs-number">53</span><br>   *  <span class="hljs-number">7145393598349078859</span> = <span class="hljs-number">59</span>*<span class="hljs-number">61</span>*<span class="hljs-number">67</span>*<span class="hljs-number">71</span>*<span class="hljs-number">73</span>*<span class="hljs-number">79</span>*<span class="hljs-number">83</span>*<span class="hljs-number">89</span>*<span class="hljs-number">97</span>*<span class="hljs-number">101</span> */<br>  <span class="hljs-keyword">if</span> (!iu_coprime(N, 16294579238595022365UL) ||<br>      !iu_coprime(N,  7145393598349078859UL)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">#else</span><br>  /* <span class="hljs-number">4127218095</span> = <span class="hljs-number">3</span>*<span class="hljs-number">5</span>*<span class="hljs-number">7</span>*<span class="hljs-number">11</span>*<span class="hljs-number">13</span>*<span class="hljs-number">17</span>*<span class="hljs-number">19</span>*<span class="hljs-number">23</span>*<span class="hljs-number">37</span><br>   * <span class="hljs-number">3948078067</span> = <span class="hljs-number">29</span>*<span class="hljs-number">31</span>*<span class="hljs-number">41</span>*<span class="hljs-number">43</span>*<span class="hljs-number">47</span>*<span class="hljs-number">53</span><br>   * <span class="hljs-number">4269855901</span> = <span class="hljs-number">59</span>*<span class="hljs-number">83</span>*<span class="hljs-number">89</span>*<span class="hljs-number">97</span>*<span class="hljs-number">101</span><br>   * <span class="hljs-number">1673450759</span> = <span class="hljs-number">61</span>*<span class="hljs-number">67</span>*<span class="hljs-number">71</span>*<span class="hljs-number">73</span>*<span class="hljs-number">79</span> */<br>  <span class="hljs-keyword">if</span> (!iu_coprime(N, 4127218095UL) ||<br>      !iu_coprime(N, 3948078067UL) ||<br>      !iu_coprime(N, 1673450759UL) ||<br>      !iu_coprime(N, 4269855901UL)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">#endif</span><br>  /* no prime divisor &lt; <span class="hljs-number">103</span> */<br>  av = avma;<br>  <span class="hljs-keyword">return</span> gc_long(av, is2psp(N) &amp;&amp; islucaspsp(N));<br>&#125;<br></code></pre></td></tr></table></figure><p>明显的，如果输入的N的有小于103的素因子，那么就不会进入真正的素数检测，而是直接return 0。</p><p><code>iu_coprime(N, 4127218095UL)</code>是判断是否互质的函数。如果我们输入的N非常大，但是它没有小于103的素因子，那么它就会进入素数检测，因为N很大，那么这个函数所需要花费的时间明显是比有小于103的素因子的数N1花费的时间多，我们可以利用这一点做侧信道攻击。</p><p>利用时间不同我们可以判断输入的N^int(fllag)是否有小于103的素因子.</p><p>然后控制我们的输入，一种int(flag)&lt;$2^{136}$  ,那么输入N&#x3D;k*$2^{136}$ ,那么N^int(flag)&#x3D;N+int(flag)。</p><p>再利用(flag+N)%p&#x3D;0时，$flag\equiv -N mod p$ 。然后通过中国剩余定理就能做了</p><ul><li><strong>已知条件</strong></li></ul><p>prime∈{a|prime()&lt;103}</p><p>$flag\equiv N mod p$ ,p∈{3,5,..101}。我们不知道具体的p和是多少，所以我们只能通过筛选和一定的爆破</p><ul><li><strong>优化方法</strong></li></ul><p>我们爆破的时候，可以遍历$r&#x3D;Nmodp,r∈{1,p-1},N&#x3D;k*2^{136}$，</p><p>一旦$r&#x3D;Nmodp$与flag互为逆元 ,那么任意满足此条件的N满足(N+flag)%p&#x3D;0</p><p>为了防止这个N是与其他不是p单仍是小于103的素数整除为0，我们需要测试多组满足此条件的N。如果连续多组仍然满足，则r&#x3D;-flag mod p。注意因为N肯定是偶数所以我们排除掉2这个素数。然后因为最后一位肯定是’}’</p><p>那么  </p><p>flag mod 256&#x3D;ord(‘}‘)</p><ul><li><strong>解题代码</strong></li></ul><p>平台环境关了，这里做本地测试，为了节约时间，把$7^7$的循环次数改为$7 ^3$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">input_num</span>):<br>    flag = <span class="hljs-string">b&quot;flag&#123;$c4^Cr7=w!N&#125;&quot;</span><br>    flag_num = <span class="hljs-built_in">int</span>(flag.<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>**<span class="hljs-number">3</span>):<br>        is_prime(flag_num^^input_num)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> prod<br><span class="hljs-keyword">import</span> time<br>primes_le_103 = [<br>    <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>, <span class="hljs-number">41</span>, <span class="hljs-number">43</span>,<br>    <span class="hljs-number">47</span>, <span class="hljs-number">53</span>, <span class="hljs-number">59</span>, <span class="hljs-number">61</span>, <span class="hljs-number">67</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">79</span>, <span class="hljs-number">83</span>, <span class="hljs-number">89</span>, <span class="hljs-number">97</span>, <span class="hljs-number">101</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">input_num</span>):<br>    flag = <span class="hljs-string">b&quot;flag&#123;$c4^Cr7=w!N&#125;&quot;</span><br>    flag_num = <span class="hljs-built_in">int</span>(flag.<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>**<span class="hljs-number">3</span>):<br>        is_prime(flag_num^^input_num)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">server_side_channel_oracle</span>(<span class="hljs-params">input_num</span>):<br>    st = time.time()<br>    a=task(input_num)<br>    et = time.time()<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0.002</span>&lt;(et-st)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample_mod_r_mod_p</span>(<span class="hljs-params">r, p, bit_length = <span class="hljs-number">32</span>, start_bit = <span class="hljs-number">136</span></span>):<br>    <span class="hljs-keyword">assert</span> p != <span class="hljs-number">2</span>, <span class="hljs-string">&quot;p=2&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        randnum = random.getrandbits(bit_length) &lt;&lt; start_bit<br>        <span class="hljs-keyword">if</span> randnum % p == r:<br>            <span class="hljs-keyword">yield</span> randnum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover_flag</span>(<span class="hljs-params">n_sample = <span class="hljs-number">50</span></span>):<br>    moduli = &#123;&#125;<br>    moduli[<span class="hljs-number">256</span>] = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;&#125;&quot;</span>)<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> primes_le_103[<span class="hljs-number">1</span>:]:<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p):<br>            count = <span class="hljs-number">0</span><br>            good_k = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">for</span> input_num <span class="hljs-keyword">in</span> sample_mod_r_mod_p(k, p):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> server_side_channel_oracle(input_num):<br>                    count += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> count == n_sample:<br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    good_k = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> good_k:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p: <span class="hljs-subst">&#123;p&#125;</span>, k: <span class="hljs-subst">&#123;k&#125;</span>&quot;</span>)<br>                moduli[p] = (-k) % p<br>                <span class="hljs-keyword">break</span><br><br>    primes = [<span class="hljs-number">256</span>] + primes_le_103[<span class="hljs-number">1</span>:]<br>    remainders = [moduli[p] <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> primes]<br>    x = <span class="hljs-built_in">int</span>(crt(remainders, primes))<br>    N = <span class="hljs-built_in">int</span>(prod(primes))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        hex_str = <span class="hljs-built_in">hex</span>(x)[<span class="hljs-number">2</span>:]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hex_str) % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>            hex_str = <span class="hljs-string">&#x27;0&#x27;</span> + hex_str<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;flag&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>.fromhex(hex_str):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(hex_str).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        x += N<br><br>flag = recover_flag()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered Flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章速通群论</title>
    <link href="/2025/05/30/%E7%BE%A4%E8%AE%BA/"/>
    <url>/2025/05/30/%E7%BE%A4%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="群论"><a href="#群论" class="headerlink" title="群论"></a>群论</h1><h2 id="群基础"><a href="#群基础" class="headerlink" title="群基础"></a>群基础</h2><h3 id="群的基本定义"><a href="#群的基本定义" class="headerlink" title="群的基本定义"></a>群的基本定义</h3><ol><li><strong>代数系</strong>: 设S表示一个非空集合，那么$S * S-&gt;S$ 的映射叫做S的结合法或运算$S<em>S-&gt;S$,   $(a,b)-&gt;ab$   其中a,b∈S集合(这里的</em>号不是乘法，只是一种计算方式)如果这个S满足封闭性(任意上述a*b∈S)。</li></ol><p>这样的S叫做一个<strong>代数系</strong>，当然这只是为了方便我们理解群的性质</p><ol start="2"><li><p><strong>半群</strong>:如果这个S满足结合律。</p><p>结合律: (ab)c&#x3D;a(bc)</p><p> 这个S就称为<strong>半群</strong></p></li><li><p><strong>含幺半群</strong>:</p></li></ol><p>这里我们需要理解一个很重要的概念，<strong>幺元</strong>。</p><p>设非空集合S，存在S上的一个二元运算”.” ，对于元素$e∈S$，若对于∀a∈S，都有$e<em>a&#x3D;a$ ，则称e为S的左幺元，同理∀a∈S，都有a</em>e&#x3D;a，则称为S的右幺元，若e既是左幺元又是右幺元$(ea&#x3D;ae&#x3D;a)$，则称e为S的<strong>幺元</strong>(单位元)。</p><p>幺元(单位元):通常记为e，设a∈S，$ae&#x3D;ea&#x3D;a$, 有幺元的半群叫做含幺半群</p><ol start="4"><li><strong>群</strong>:</li></ol><p>群就是含有逆元的含幺半群，</p><p>逆元:任意a,b∈S,存在 a和b的逆元分别记作,a^-1^,b^-1^ 。</p><p>并且$a*a^{-1}&#x3D;e$ </p><p>总结下来，群的定义如下</p><p>一个集合 GG 和一个二元运算 :$G×G→G→G$，构成一个群 (G,∗)，当且仅当满足：</p><ol><li><strong>封闭性</strong>。对于任意 g,h∈G，g∗h∈G。这其实是代数系统的要求。</li><li><strong>结合律</strong>: $(a∗b)∗c&#x3D;a∗(b∗c)$。</li><li><strong>存在单位元</strong> e∈G，使得群中任意元素 g∈G 都满足 $e∗g&#x3D;g$。</li><li><strong>逆元</strong>:对于群中任意元素 g∈G，都存在逆元 g^−1^∈G 满足 g^−1^∗g&#x3D;e</li></ol><ul><li><strong>阿贝尔群</strong>:满足交换律的群</li><li><strong>有限群与无限群</strong>:根据群中元素的个数来判断</li></ul><p>满足交换律的群:任意a,b∈G,都存在a<em>b&#x3D;b</em>a</p><p>举个群的例子:</p><ul><li>整数加法群(Z,+)</li></ul><blockquote><ol><li>任意两个整数相加，结构都是唯一的整数。(满足封闭性)</li><li>整数加法满足结合律(满足结合律)</li><li>整数的单位元是0，任何整数加0都是0(有幺元)</li><li>整数加法中一个数的相反数是他的逆元，他们相加便是单位元0(有逆元)</li></ol></blockquote><p>并且整数群还满足交换律。所以它是个阿贝尔群</p><ul><li>乘法群</li></ul><p>如果是一个整数乘法，1就是单位元，但是不是所有数都有逆元，比如4的逆元1&#x2F;4就不属于整数群。</p><p>但是有理数乘法群G(Q,*)是存在的。</p><h3 id="群的性质"><a href="#群的性质" class="headerlink" title="群的性质"></a>群的性质</h3><ul><li>一些性质</li></ul><blockquote><ol><li><strong>单位元唯一</strong></li></ol><p>证明: 设e1,e2是群G的唯一单位元，则,e1&#x3D;e1*e2&#x3D;e2</p><ol start="2"><li><strong>逆元唯一</strong></li></ol><p>证明： 对于群G中的元素g∈G,如果h1,h2是g的逆元。则$h_1&#x3D;h_1e&#x3D;h_1gh_2&#x3D;eh_2&#x3D;h_2$</p><ol start="3"><li><strong>对于a,b∈G，有且只有一个c∈G满足ac&#x3D;b。</strong></li></ol><p>证明: 取c&#x3D;a^-1^ b。</p><p>唯一：如果ac&#x3D;b,则c&#x3D;ec&#x3D;a^-1^ ac&#x3D;a^-1^b .</p><ol start="4"><li><strong>(a*b)^-1^&#x3D;b^-1^ a^-1^</strong></li></ol><p>证明: $b^{-1}a^{-1}ab&#x3D;b^{-1}b&#x3D;e&#x3D;a^{-1}a&#x3D;abb^{-1}a^{-1}$</p></blockquote><ul><li>计算性质</li></ul><blockquote><p>(1)$a^n a^m&#x3D;a^{m+n}$</p><p>(2)$(a^{n})^m&#x3D;a^{mn}$</p><p>(3)$(a^{-n})^m&#x3D;a^{-mn}$</p><p>(4)$(a^n)^{-m}&#x3D;a^{-mn},(a^{-n})^{-m}&#x3D;a^{mn}$</p></blockquote><ul><li>群和元素的阶</li></ul><blockquote><p>一个群如果含有有限个元素，则称为有限群，否则称为无限群，通常用|G|来表示群G的元素个数，也称为群的阶。</p><p>元素的阶: 设$G$是群，$a∈G$，如果n是满足$a^n&#x3D;e$的最小的正整数，则称n是元素a的阶。</p></blockquote><h3 id="子群"><a href="#子群" class="headerlink" title="子群"></a>子群</h3><h4 id="子群定义"><a href="#子群定义" class="headerlink" title="子群定义"></a>子群定义</h4><blockquote><p>设(G,*)是群，H是G的非空子集，如果(H,*)构成一个群，那么称(H,*)是一个群，则称(H,*)是(G,*)的子群。</p></blockquote><p>平凡子群:({e},*)(只有单位元)，(G,*)(G本身)</p><p>其他,非平凡群</p><ul><li>示例</li></ul><blockquote><p>加法实数群(R,+)，那么加法有理数群(Q,+)是它的子群，加法整数群(Z,+)也是它们的子群</p><p><img src="https://rockfox0.github.io/picx-images-hosting/ziqun.pfkrycjro.webp"></p></blockquote><ul><li>子群的单位元</li></ul><blockquote><p>定理:H是群G的子群，e∈G是单位元，则e也是子群H的子群</p></blockquote><p>证明: 假设H的单位元是e^’^，同时e≠e^’^。对于a∈H,e^’^a&#x3D;a&#x3D;ea。所有e^’^&#x3D;e</p><ul><li>子群的逆元</li></ul><blockquote><p>定理: H是群G的子群，a∈H，则a^-1^∈H。</p><p>证明:</p><p>假设b∈H,a∈H,b≠a。a*b&#x3D;e</p><p>同时a*a^-1^&#x3D;e&#x3D;a*b 所有a^-1^&#x3D;b</p></blockquote><ul><li>判断子群</li></ul><ol><li>H是群G的非空子集，对于任意a,b∈H,都有a*b^-1^∈H，则H是G的子群</li><li>根据定义:设(G,*)是群，H是G的非空子集，如果(H,*)构成一个群，那么称(H,*)是一个群，则称(H,*)是(G,*)的子群。</li><li>H是群G的非空子集，如果H是有限集，而且群G的运算*在H上满足封闭性，则H是G的子群。</li></ol><h4 id="子群的构造"><a href="#子群的构造" class="headerlink" title="子群的构造"></a>子群的构造</h4><ul><li>阿贝尔群的子群构造</li></ul><ol><li><strong>定理:G是阿贝尔群，m∈Z,则$G^m&#x3D;[a^m|a∈G ]$是G的子群</strong></li></ol><blockquote><p> 证明: a,b∈G,则a^m^，b^m^ ∈G。</p><p> a^m^*(b^m^)^-1^ &#x3D;(a*b^-1^)^m^</p></blockquote><p>示例:加法整数群(Z,+)</p><p>3Z可以表示它的子群(3Z,+)&#x3D;{0,±3,±6,..,±3n}</p><ol start="2"><li><strong>定理G是阿贝尔群，m∈Z，则G{m}&#x3D;{a∈G|a^m^&#x3D;e}是子群</strong></li></ol><blockquote><p> 证明:</p><p> a,b∈G，a^m^&#x3D;b^m^&#x3D;e,则a,b∈G{m}</p><p> 因为$(a<em>b^{-1})^m&#x3D;a^m</em>(b^{-1})^m&#x3D;e*e&#x3D;e$∈G{m}</p><p> 即证</p></blockquote><ul><li><p>整数的子群</p><ol start="3"><li><strong>H是$Z_n$(模n的加法)的子群，则存在唯一非负整数m，使得H&#x3D;mz</strong>。</li></ol></li></ul><blockquote><ul><li>$\mathbb{Z}_n是有限循环群，由 1  生成，即  \mathbb{Z}_n &#x3D; &lt;1&gt;$。</li><li>有限循环群的每个子群也是循环群，对应于 ( n ) 的因子。</li><li>所以 ( H ) 一定是某个 ( m ) 的倍数集合：<br>[<br> $H &#x3D; \langle m \rangle &#x3D; m\mathbb{Z}_n &#x3D; { mx \bmod n \mid x \in \mathbb{Z} }$<br> ]</li><li>唯一性来自最小正生成元的唯一性。</li></ul><hr></blockquote><ol start="4"><li><strong>m1和m2是非负整数，当且仅当$m_1Z_n⊆m_2Z_n$，有m2|m1</strong></li></ol><blockquote><p>$m_2Z_n$ 可以看作加法群(G,+)，根据上面阿贝尔群子群的构造中的定理有</p><p>任意k⊆Z,使得$kG&#x3D;m1&#x2F;m_2G&#x3D;m_1Z_n⊆G$</p><p>，则有m2|m1。反之，设 $m_1&#x3D;m_2q$，</p><p>则有$m_1Z_n&#x3D;m_2qZ_n&#x3D;{m_2qx|x∈Z_n}⊆m_2Z_n$</p></blockquote><p>所以$m2∣m1⟺m1Zn⊆m2Zn$</p><p>举例,9Z&#x3D;{0,±9,±18..,±9n]是3Z&#x3D;{0,±3,±6,±9,…±3n}的子群。</p><h4 id="子群构造子群"><a href="#子群构造子群" class="headerlink" title="子群构造子群"></a>子群构造子群</h4><p>定理1**:H<sub>1</sub>和H<sub>2</sub> 是阿贝尔群G的子群，则$H&#x3D;H_1H_2$ 也是G的子群**<br>$$<br>H&#x3D;H_1<em>H_2&#x3D;{a_1</em>a_2|a_1∈H_1,a_2∈H_2}<br>$$</p><p>证明</p><blockquote><p>H非空，因为H<sub>1</sub> H<sub>2</sub> 都是非空的。</p><p>对于任意a,b∈H,那么有$a&#x3D;a_1<em>a_2,b&#x3D;b_1</em>b_2且a_1,b_1∈H_1,a_2,b_2∈H_2$</p><p>$a<em>b^{-1}&#x3D;(a_1</em>a_2)<em>b_2^{-1}<em>b_1^{-1}&#x3D;(a_1</em>b_1^{-1})</em>(a_2*b_2^{-1})∈H$ –&gt;因为满足交换律</p><p>通常，H1*H1≠2H1</p><p>例:(Z,+) ，Z+Z构成的子群还是是(Z,+)，而（2Z,+)是{0,±2,..,±2n)。</p></blockquote><p>扩展: <strong>H<sub>1</sub>，H<sub>2</sub>…H<sub>n</sub> 是阿贝尔群G的子群，则$H&#x3D;H_1H_2..H_n$ 也是G的子群</strong></p><ol start="2"><li>定理2: <strong>H1和H2是G的子群，则H&#x3D;H1∩H2也是G的子群</strong></li></ol><p>$H&#x3D;H_1∩H_2&#x3D;{a|a∈H_1,a∈H_2}$ </p><blockquote><p>证明:H非空(因为e∈H1，H2)</p><p>那么定义a∈H1，H2;b∈H1，H2。</p><p>a*b^-1^∈H1，a*b^-1^∈H2。那么a*b^-1^∈H。</p></blockquote><p>扩展:<strong>存在H1，H2…,Hn是G的子群 $H_1∩H_2∩…∩H_n&#x3D;H$ 也是G的子群</strong></p><ol start="3"><li>定理3:H1和H2是群G的非平凡子群，那么</li></ol><p>$G≠H_1∪H_2$</p><p>证明:</p><blockquote><p>假设G＝H1∩H2。</p><p>因为H1是非平凡子群，所以∃a∈G但事实a∉H1。和b∈G但是b∉H2.</p><p>因为G&#x3D;H1∪H2，所以，a,b∈H1∪H2</p><p>那么有a∈H2，b∈H1。</p><p>考虑a*b&#x3D;c∈G,那么a*b必定属于H1或H2</p><ol><li>假设c∈H1，</li></ol><p>因为b∈H1，c∈H1，且根据子群的定义和性质</p><p>则有c*b^-1^&#x3D;a∈H1，显然矛盾</p><ol start="2"><li>同理假设c∈H2</li></ol><p>因为a∈H2，c∈H1，且根据子群的定义和性质</p><p>则有c*a^-1^&#x3D;b∈H2，显然矛盾</p></blockquote><h2 id="正规子群和商群"><a href="#正规子群和商群" class="headerlink" title="正规子群和商群"></a>正规子群和商群</h2><h3 id="陪集-coset"><a href="#陪集-coset" class="headerlink" title="陪集(coset)"></a>陪集(coset)</h3><h4 id="陪集的定义"><a href="#陪集的定义" class="headerlink" title="陪集的定义"></a>陪集的定义</h4><ul><li><p>( [这里的a*b表示进行的群内的’*‘运算，不是乘法，也不是像之前整数加法子群里面的让Z群内的元素进行a次运算])<strong>定义</strong>:</p><blockquote><p>H是群G的子群，a∈G，</p><p>则有 $aH&#x3D;{a*h|h∈H}$,称为H关于a在G中的左陪集。</p><p>  $Ha&#x3D;{h*a|h∈H}$，称为H关于a在G中的右陪集。</p><p>如果Ha&#x3D;aH，称为H关于a在G中的陪集</p><p>a称为代表元</p></blockquote><p>陪集:[a]<sub>H</sub> ，左陪集:aH ，右陪集: Ha。</p><p>为了方便，后面统一称呼配给-[a]<sub>H</sub></p></li></ul><p>示例：3Z&#x3D;{0,±3,…,±3n}.是加法群(z,+)的子群</p><p>陪集:</p><blockquote><p>[0]<sub>3Z</sub>&#x3D;{0,0±3,…,0±3n}</p><p>[1]<sub>3Z</sub>&#x3D;{1,1±3,…,1±3n}</p><p>[2]<SUB>3Z</SUB>&#x3D;{2,2±3n,…,2±3n}</p><p>[3]<sub>3Z</sub>&#x3D;{0,0±3n,…,±3n}</p><p>……</p></blockquote><p>可以看到每个整数只会出现在唯一的陪集中(除了相同的陪集[0]<sub>3Z</sub>和[3]<sub>3</sub>这种完全相等的陪集外，其他任何陪集之间交集都为空)。<strong>陪集就是对群进行的划分</strong>。</p><blockquote><p>解释:陪集通过群的子群对群进行划分。可以看做是一种距离,这个子群3Z作为对群(Z,+)的一种划分标注能和依据。</p><p>[0]<sub>3Z</sub>到3Z的元素的距离是0表示3Z本身，[1]<sub>3Z</sub>到3Z中元素的距离是1，[2]<sub>3Z</sub>到3Z中元素的距离是2</p><p>这三个集合取并集:[0]<sub>3Z</sub>∪[1]<sub>3Z</sub>∪[2]<sub>3Z</sub>&#x3D;(Z,+)。并且之间两两交集为0</p></blockquote><h4 id="陪集的性质"><a href="#陪集的性质" class="headerlink" title="陪集的性质"></a>陪集的性质</h4><ol><li>性质1:**a∈[a]H(每个元素必然会进入子集构造的陪集里)**。</li></ol><blockquote><p>H&#x3D;{e,….},那么[a]<sub>H</sub>&#x3D;{a*e,…}&#x3D;{a,…}</p></blockquote><ol start="2"><li>性质2:<strong>[e]<sub>H</sub>&#x3D;H(用单位元构造的陪集等于子群本身–平凡陪集)。</strong></li></ol><blockquote><p>[e]<sub>H</sub>&#x3D;{…,e*h,…}&#x3D;{…,h,…}</p></blockquote><ol start="3"><li>性质3:<strong>a∈H⇔[a]<sub>H</sub>&#x3D;H(子群H和H内的元素构造陪集，必然是H本身)</strong></li></ol><blockquote><p>a∈H，H&#x3D;{e,…a,…,h,…}</p><p>[a]<sub>H</sub>&#x3D;{a*e,…,a*H,…}，由于群的封闭性，那么[a]<sub>H</sub>⊆H。</p><p>∀ b∈H，a∈H可以推出a^-1^*b∈H，可以代表任意h。那么a^-1^*(a^-1^*b)&#x3D;b∈[a]<sub>H</sub> ，说明H的元素都在陪集，H⊆[a]H.</p><p>可得H&#x3D;[a]H</p></blockquote><ol start="4"><li>定义4: **[a]<sub>H</sub> &#x3D;[b]<sub>H</sub> ⇔a^-1^ * b∈H(或b^-1^ *a∈H)**。</li></ol><blockquote><p>先假设两个[a]<sub>H</sub>&#x3D;[b]<sub>H</sub> </p><p>[b]<sub>H</sub>&#x3D;{b,…,b*h,…},[a]<sub>H</sub>&#x3D;{a,…,a*h,…}。那么在[a]<sub>H</sub> 必然有b&#x3D;a*h。，a^-1^*b&#x3D;h∈H。 <strong>[a]<sub>H</sub> &#x3D;[b]<sub>H</sub> ⇒a^-1^ * b∈H(或b^-1^ *a∈H)</strong></p><p>反推: 比较简单不多赘述**[a]<sub>H</sub> &#x3D;[b]<sub>H</sub> ⇐ a^-1^ * b∈H(或b^-1^ *a∈H)**</p></blockquote><p>举个例子:</p><blockquote><p>[0]<sub>3Z</sub>&#x3D;{0,0±3,…,0±3n}</p><p>[1]<sub>3Z</sub>&#x3D;{1,1±3,…,1±3n}</p><p>[2]<SUB>3Z</SUB>&#x3D;{2,2±3n,…,2±3n}</p><p>[3]<sub>3Z</sub>&#x3D;{0,0±3n,…,±3n}</p><p>……</p><p>设[a]<sub>3Z</sub> 和[b]<sub>3Z</sub> ，那么很明显的当|b-a|的绝对值&#x3D;3n即属于3Z的时候，[a]<sub>3Z</sub> &#x3D;[b]<sub>3Z</sub></p></blockquote><p>接下来我们来利用上面的性质介绍</p><h3 id="拉格朗日定理-Lagranges’s-theorem"><a href="#拉格朗日定理-Lagranges’s-theorem" class="headerlink" title="拉格朗日定理(Lagranges’s theorem)"></a>拉格朗日定理(Lagranges’s theorem)</h3><h4 id="群的划分"><a href="#群的划分" class="headerlink" title="群的划分"></a>群的划分</h4><p>我们对定义4进行另一种解释，当一个a和b的逆进行运算时，类似于a于b的差值，当这个差值h∈H时，则[a]<sub>H</sub> &#x3D;[b]<sub>H</sub> </p><p>我们引入一个专门的二元关系: $a≡b (mod H)⇔a^{-1}* b∈H(b^{-1}*a∈H)⇔[a]_H&#x3D;[b]_H$ 。这里的a≡b (mod H)是一种二元关系，不是取模那种二元运算。</p><ul><li>前置定理</li></ul><blockquote><ol><li><strong>划分</strong>: 如果 S 不是一个空集并且可以写成一系列互相之间不相交的子集的并，那么我们说这些子集构成了 S 的一个划分。</li><li><strong>集合与等价关系:</strong><br>一个集合如果存在一个等价关系，那么我一定有办法对集合做一个划分。</li><li>一个集合中的一钟划分对应一个等价关系</li></ol></blockquote><ul><li>等价关系与等价类。<ol><li>✅ 等价关系（Equivalence Relation）</li></ol></li></ul><p>设 ( A ) 是一个集合。若二元关系$ ( \sim \subseteq A \times A )$ 满足以下三个性质，则称其为集合 ( A ) 上的<strong>等价关系</strong>：</p><ul><li><strong>自反性</strong>：对任意$ ( a \in A )$，有 $( a \sim a )$</li><li><strong>对称性</strong>：若$ ( a \sim b )$，则 $( b \sim a )$</li><li><strong>传递性</strong>：若 $( a \sim b )$ 且$ ( b \sim c )$，则$ ( a \sim c )$<ol start="2"><li>🎯 等价类（Equivalence Class）</li></ol></li></ul><p>设 $( \sim )$ 是集合 ( A ) 上的等价关系，任取$ ( a \in A )$，定义：</p><p>$[<br>[a] &#x3D; { x \in A \mid x \sim a }<br>]$</p><p>该集合称为元素 ( a ) 的<strong>等价类</strong>。</p><blockquote><p>所有等价类在集合 ( A ) 中构成一个不交且完备的划分（partition）：</p></blockquote><p>$[<br>A &#x3D; \bigsqcup_{a \in A} [a]<br>]$（这里不用太在意，稍微理解就行）</p><hr><pre><code class="hljs">    3.  📌 陪集（Quotient Set）</code></pre><p>将集合 ( A ) 按照等价关系 ( $\sim$ ) 分类后，得到的所有等价类组成一个新集合，称为<strong>陪集</strong>：</p><p>$[<br>A &#x2F; {\sim} &#x3D; { [a] \mid a \in A }<br>]$</p><p>每个元素是一个等价类，是原集合在该等价关系下的分类单位。</p><p>根据上面的定理我们很容易证明$a≡b (mod H)$是一个等价关系，陪集是一个等价类</p><ul><li><p>证明</p><blockquote><ol><li>自反性: $a≡a(mod H)$</li><li>对称性:$a≡b(mod H)⇒a&#x3D;b<em>h,h∈H⇒a</em>h^{-1}&#x3D;b  (h^{-1}∈H)⇒b≡a(mod H)$</li><li>传递性:  $a≡b(mod H),b≡c(mod H)⇒a&#x3D;b<em>h,b&#x3D;c</em>h_1,h,h_1∈H⇒a&#x3D;c<em>h</em>h_1,h*h_1∈H⇒a≡c(mod H)$</li></ol></blockquote></li><li><p>性质1：<strong>任意两个陪集之间存在双射，任意陪集[a]<sub>H</sub>和子群H是等势的</strong>。(同一个子群所构造的陪集大小是相等的(元素的数量)，并且等于子群的大小)</p></li></ul><h4 id="拉格朗日定理"><a href="#拉格朗日定理" class="headerlink" title="拉格朗日定理"></a>拉格朗日定理</h4><ul><li><p>定理: <strong>G是有限群，H是任意子群，则|H|||G|</strong> (G任意子群的阶必然是G的阶的因子)。</p><p>证明:</p><blockquote><p>设H构造的陪集为$[a_1]_H,…,[a_n]<em>H$,它们是G的划分所有，$|G|&#x3D;\sum</em>{i&#x3D;1}^{n}|[a_i]<em>H|&#x3D;\sum</em>{i}^{n}|H|&#x3D;n|H|  $，并且我们显然就能知道这个n就是这个子群H能产生的陪集的个数。</p></blockquote></li><li><p>示例</p><blockquote><p>设群 $\mathbb{Z}_6 &#x3D; {0, 1, 2, 3, 4, 5}$，其运算为加法模 $6$。这是一个有限阿贝尔群。</p><p>考虑其子群 $H &#x3D; {0, 3}$，这个子群由 $3$ 生成，记作 $3\mathbb{Z}_6$。</p><p>构造集合 $\mathbb{Z}_6$ 关于 $H$ 的陪集如下：</p><p>$0 + H &#x3D; {0, 3}$<br>$1 + H &#x3D; {1, 4}$<br>$2 + H &#x3D; {2, 5}$</p><p>由于 $\mathbb{Z}_6$ 是阿贝尔群，群的陪集构成一个划分：</p><p>$\mathbb{Z}_6 &#x2F; H &#x3D; { {0,3},\ {1,4},\ {2,5} }$</p><p>每个陪集包含 $2$ 个元素，共有 $3$ 个陪集。</p><p>由拉格朗日定理，若 $H \le G$，则 $|G| &#x3D; [G : H] \cdot |H|$。</p><p>在本例中：</p><ul><li>$|G| &#x3D; |\mathbb{Z}_6| &#x3D; 6$</li><li>$|H| &#x3D; 2$</li><li>$[\mathbb{Z}_6 : H] &#x3D; 3$</li></ul><p>满足 $6 &#x3D; 3 \cdot 2$，符合拉格朗日定理。</p></blockquote></li></ul><h3 id="商群"><a href="#商群" class="headerlink" title="商群"></a>商群</h3><h4 id="正规子群"><a href="#正规子群" class="headerlink" title="正规子群"></a>正规子群</h4><ul><li><p>定义: <strong>设定N是群G的子群，如果对于$∀a∈G$，都有$aN&#x3D;Na$，称为N为G的正规子群</strong></p></li><li><ol><li>性质1正规子群的陪集运算规律:<strong>$[a]_N*[b]_N&#x3D;[a*b]N，(a,b∈G)$</strong> 这是一种陪集与陪集的运算</li></ol><blockquote><p>$(a<em>h)</em>(b<em>h1)$ ,h,h1,h2∈N可以表示$[a</em>b]N$中的任意元素<br>&#x3D;$a*(h<em>b)<em>h1&#x3D;a</em>b</em>(h2*h1)$显然成立。</p><p>注意这里的子群并不一定满足交换律，这个推导利用的是两个陪集之间的映射。</p></blockquote></li></ul><h4 id="商群-1"><a href="#商群-1" class="headerlink" title="商群"></a>商群</h4><ul><li><p>引入，在前面的描述中我们可以定义一个集合$G&#x2F;N&#x3D;{[a]_N|a∈G}$ ，这是一个由子群N的陪集组成的集合</p><blockquote><p>前面讲述的性质1作为集合G&#x2F;N元素之间的运算。$[a]_N*[b]_N&#x3D;[a<em>b]N$这里的’</em>‘是群G的运算,a,b∈G</p><p>G&#x2F;N是一个群:</p><ol><li>封闭性:$[a]_N*[b]_N&#x3D;[a<em>b]N$ ，a</em>b∈G，显然满足结合律</li><li>结合律:$[a]_N*([b]_N*[c]_N)&#x3D;[a<em>b</em>c]_N&#x3D;([a]_N*[b]_N)*[c]_N$</li><li>单位元:$N&#x3D;[e]_N,N*[a]_N&#x3D;[a]_N,N*[a]_N&#x3D;[a]_N$，显然满足</li><li>逆元:$[a]_N*[a^{-1}]_N&#x3D;N,[a^{-1}]_N*[a]_N&#x3D;N$</li></ol></blockquote></li><li><p>定义:<strong>像这样由正规子群N构成的群$(G&#x2F;N,*)$称为模N下的商群</strong>。</p></li><li><p>[G:N]：商群G&#x2F;N的阶</p><ol><li><p>定理1: <strong>G是有限群，N是G的正规子群。则$[G:N]&#x3D;\frac{|G|}{|N|}$</strong> —证明看拉格朗日定理</p></li><li><p>定理2:<strong>G是有限群，N是G的正规子群，K是N的正规子群。则有$[G:K]&#x3D;[G:N][N:K]$</strong></p><blockquote><p>证明:$[G:K]&#x3D;\frac{|G&#x2F;||K|}{|N|&#x2F;|K|}&#x3D;\frac{[G:K]}{[N:K]}   $</p></blockquote></li></ol></li><li><p>阿贝尔群的商群</p><ol><li><p>性质1: <strong>H是阿贝尔群G的子群，对于∀a∈G，有$aH&#x3D;Ha&#x3D;[a]_H$</strong> —（这个定理反过来不一定成立）</p><blockquote><p>证明:</p><p>$aH&#x3D;{a<em>h|h∈H}&#x3D;{h</em>a|h∈H}&#x3D;[a]_H$</p></blockquote></li><li><p>性质2:阿贝尔群的子群都是正规子群</p></li><li><p>性质2:阿贝尔群的子群都可以构造商群</p></li><li><p>性质3:阿贝尔群构造的商群也是子群</p></li></ol></li><li><p>例子</p><blockquote><p>📘 商群 $\mathbb{Z}_{12} &#x2F; \langle 3 \rangle$ 的例子（体现商群结构）</p><p>设群 $G &#x3D; \mathbb{Z}_{12}$，即模 $12$ 下的整数加法群：</p><p>$$<br>G &#x3D; {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}<br>$$</p><p>这是一个阿贝尔群。</p><p>取 $H &#x3D; \langle 3 \rangle &#x3D; {0, 3, 6, 9}$，是 $G$ 的一个子群。</p><p>由于 $G$ 是阿贝尔群，所有子群都是正规子群，因此 $H \trianglelefteq G$。</p><hr><p>构造商群 $G&#x2F;H$，即 $G$ 关于 $H$ 的陪集集合：</p><ul><li>$[0] &#x3D; {0, 3, 6, 9}$</li><li>$[1] &#x3D; {1, 4, 7, 10}$</li><li>$[2] &#x3D; {2, 5, 8, 11}$</li></ul><p>所以：</p><p>$$<br>\mathbb{Z}_{12} &#x2F; \langle 3 \rangle &#x3D; { [0], [1], [2] }<br>$$</p><p>我们来定义商群上的加法：</p><p>$$<br>[a] + [b] &#x3D; [a + b]<br>$$</p><p>比如：</p><ul><li>$[1] + [1] &#x3D; [2]$</li><li>$[2] + [2] &#x3D; [4] &#x3D; [1]$（因为 $4 \in [1]$）</li><li>$[1] + [2] &#x3D; [3] &#x3D; [0]$（因为 $3 \in H$）</li></ul><p>我们可以列出这个商群的加法运算表：</p><table><thead><tr><th>$+$</th><th>$[0]$</th><th>$[1]$</th><th>$[2]$</th></tr></thead><tbody><tr><td>$[0]$</td><td>$[0]$</td><td>$[1]$</td><td>$[2]$</td></tr><tr><td>$[1]$</td><td>$[1]$</td><td>$[2]$</td><td>$[0]$</td></tr><tr><td>$[2]$</td><td>$[2]$</td><td>$[0]$</td><td>$[1]$</td></tr></tbody></table><p>这正是 $\mathbb{Z}_3$ 的加法表！</p></blockquote></li></ul><hr><h2 id="群的同态与同构"><a href="#群的同态与同构" class="headerlink" title="群的同态与同构"></a>群的同态与同构</h2><blockquote><p>群论中的同态和同构来描述<strong>两个群之间的相似关系</strong>。</p><p>从中文上粗略看，同构好像指相同结构，同态好像不好说。</p><p>先上结论，从相似关系的程度来看：<strong>相同＞同构＞同态</strong>，即<strong>同态要求比同构更宽松，同构是一种特殊的同态。</strong></p></blockquote><h3 id="单射满射双射"><a href="#单射满射双射" class="headerlink" title="单射满射双射"></a>单射满射双射</h3><p><strong>单射（Injective）</strong></p><p>设有两个集合 $A$ 和 $B$，一个函数 $f: A \to B$ 被称为<strong>单射</strong>，如果：</p><blockquote><p>不同的元素在 $A$ 中映射到不同的元素在 $B$ 中。</p></blockquote><p>也就是说，如果 $f(a_1) &#x3D; f(a_2)$，那么必有 $a_1 &#x3D; a_2$。</p><p>换句话说，函数 $f$ 在定义域中不会“合并”两个不同的输入。</p><p><strong>数学表达式</strong>：<br>$ \forall a_1, a_2 \in A, ; f(a_1) &#x3D; f(a_2) \Rightarrow a_1 &#x3D; a_2 $</p><hr><p><strong>满射（Surjective）</strong></p><p>一个函数 $f: A \to B$ 是<strong>满射</strong>，如果：</p><blockquote><p>对于 $B$ 中的每一个元素 $b$，都至少存在一个 $a \in A$，使得 $f(a) &#x3D; b$。</p></blockquote><p>也就是说，$f$ 的像集（输出）覆盖了整个集合 $B$。</p><p><strong>数学表达式</strong>：<br>$ \forall b \in B, ; \exists a \in A \text{ 使得 } f(a) &#x3D; b $</p><hr><p><strong>双射（Bijective）</strong></p><p>一个函数 $f: A \to B$ 是<strong>双射</strong>，如果它<strong>既是单射又是满射</strong>。</p><p>也就是说，$f$ 是一一对应的：每个 $A$ 中的元素有唯一的 $B$ 中的对应元素，且每个 $B$ 中的元素也有唯一的 $A$ 中的前像。</p><p><strong>数学表达式</strong>：<br>$ \forall b \in B, ; \exists! a \in A \text{ 使得 } f(a) &#x3D; b $</p><h3 id="群同态-Group-homomorphism"><a href="#群同态-Group-homomorphism" class="headerlink" title="群同态(Group homomorphism)"></a>群同态(Group homomorphism)</h3><p>定义:<strong>设群$(G,<em>)$和群$(G’,\otimes  )$ ,如果函数$f:G\longrightarrow G’$,对于∀a,b∈G都有$f(a,b)&#x3D;f(a)\otimes f(b)$，则称f为$(G,</em>)$到$(G,\otimes)$ 的群同态.</strong> </p><ul><li>若$f:G\longrightarrow G’$,(后面简称f)，是单射，那么称f是单S同态</li><li>若f是满射，那么称f是满同态或上同态</li><li>若f是双射，那么称f是同构记作:$G\cong G’$</li></ul><ul><li><p>示例</p><blockquote><p>群 A &#x3D; (Z,+),a∈A，群B &#x3D; {1, -1}，映射。</p><p>$f(a)&#x3D;(-1)^a$ </p><p>$f(a_1a_2)&#x3D;(-1)^{a+a_2}$</p></blockquote><p>明显，奇数映射到-1，偶数映射到1。他们满足同态映射。</p></li></ul><h4 id="同态像-homomorphism-image"><a href="#同态像-homomorphism-image" class="headerlink" title="同态像(homomorphism image)"></a>同态像(homomorphism image)</h4><p>定义:$Im f&#x3D;f(G)&#x3D;{f(a)|a∈G}$</p><blockquote><p>在群同态$f:G\longrightarrow G’$ 在元素G-&gt;G‘映射的落点可能只是G’的子集。像这样G’中能在G内找到原像的子集称为同态像。</p></blockquote><p><img src="https://rockfox0.github.io/picx-images-hosting/ttxi.102el3rrwz.webp"></p><h4 id="同态核-homomorphism-kernel"><a href="#同态核-homomorphism-kernel" class="headerlink" title="同态核(homomorphism kernel)"></a>同态核(homomorphism kernel)</h4><p>定义: $Ker f&#x3D;{a∈G|f(a)&#x3D;e’}$,e’是G’的单位元</p><blockquote><p>核这个该概念关注的是定义域G内的元素。G内经f映射后等于G’内单位元的元素构成的集合称为同态核。</p></blockquote><p><img src="https://rockfox0.github.io/picx-images-hosting/tthe.361t6vjfo2.webp"></p><ul><li><p>同态核的性质</p><ol><li><strong>定义1: $f:G\longrightarrow G’$是群同态，则Ker f是正规子群。</strong></li></ol><p>证明: 设 $f: G \longrightarrow G’$ 是群同态。</p><p>定义核为：</p><p>$$<br>\ker f &#x3D; { g \in G \mid f(g) &#x3D; e_{G’} }<br>$$</p><p>我们要证明：$\ker f \trianglelefteq G$，即它是 $G$ 的正规子群。</p><p><strong>证明</strong>：</p><ol><li><p>$\ker f \neq \emptyset$，因为 $f(e_G) &#x3D; e_{G’}$，所以 $e_G \in \ker f$。</p></li><li><p>若 $a, b \in \ker f$，则：</p></li></ol><p>$$<br>f(ab^{-1}) &#x3D; f(a)f(b)^{-1} &#x3D; e_{G’} e_{G’}^{-1} &#x3D; e_{G’} \Rightarrow ab^{-1} \in \ker f<br>$$</p><p>所以 $\ker f \leq G$。</p><ol start="3"><li>对任意 $g \in G,; k \in \ker f$，我们有：</li></ol><p>$$<br>f(gkg^{-1}) &#x3D; f(g)f(k)f(g)^{-1} &#x3D; f(g)e_{G’}f(g)^{-1} &#x3D; f(g)f(g)^{-1} &#x3D; e_{G’} \Rightarrow gkg^{-1} \in \ker f<br>$$</p><p>因此，$\ker f$ 对共轭封闭，是正规子群：</p><p>$$<br>\ker f \trianglelefteq G<br>$$</p><ol start="2"><li><p>**定义2: 。$f:G \longrightarrow G’有f是单射\Leftrightarrow Ker f&#x3D;{e}$**l</p><p>证明:$假设f不是单射，\exists a,b∈G，a≠,有f(a)&#x3D;f(b).定理3，a\equiv b(mod Ker f)。<br>所以,b^{-1}∈Ker f,b^{-1}*a≠e,与核里只有e矛盾$</p></li><li><p><strong>定义3$f:G\longrightarrow G’ $是群同态，∀ a,b∈G，有$f(a)&#x3D;f(b)\Longleftrightarrow a\equiv b (mod Ker f)$</strong></p><p>证明:$f(a)&#x3D;f(b)\Longleftrightarrow f^{-1}(b)\otimes f(a)&#x3D;f^{-1}(b)\otimes f(b)&#x3D;e’$</p><ul><li><p>f是单一同态$\Longleftrightarrow$ Ker f&#x3D;{e}(同态核只要单位元)</p></li><li><p>f是满同态$\Longleftrightarrow$ Im f&#x3D;G’(同态像是G其本身)</p></li></ul></li></ol></li></ul><h4 id="群同态的示例"><a href="#群同态的示例" class="headerlink" title="群同态的示例"></a>群同态的示例</h4><ul><li><p><strong>嵌入映射(inclusion map)</strong></p><ul><li><p>定义:是数学中的一个基本概念，也称为包含映射。它是一种特殊的映射，用于描述一个集合如何嵌入到另一个集合中。</p><blockquote><p>设群$(G,*)，H\subseteq G$ 定义映射f为$f:H\longrightarrow G$</p><p>显然有$a∈H，f(a)&#x3D;a$</p><p>证明:$\forall a,b∈H \ f(a<em>b)&#x3D;a</em>b&#x3D;f(a)*f(b)$    </p></blockquote><p>所以子群到群的嵌入映射是群同态，这个群同态还有个特点是原像与像之间是一对一的。显然这是一个单射，这种群同态叫单一同态</p></li></ul></li><li><p><strong>自然映射(natural map)</strong></p><ul><li><p>定义：<strong>集合A上的等价关系R到商集A&#x2F;R的映射</strong></p><blockquote><p>设群$(G,*)，N\subseteq G$ 定义映射f为$f:G\longrightarrow G&#x2F;N$<br>显然有$a∈G，f(a)&#x3D;[a]_N$。这里表示的是群G上的元素a到它的商群G&#x2F;N上的映射</p><p>证明:$\forall a,b∈G \ f(a,b)&#x3D;[a<em>b]_N&#x3D;[a]_N</em>[b]_N&#x3D;f(a)*f(b)$</p></blockquote><p>显然这是一个群同态，在这个群同态中N是商群的单位元。那么自然映射构成的群的<strong>同态核</strong>就N，也就是商群的单位元。这个群同态因为每个陪集都有与之对应的<strong>原像(代表元)<strong>，所以它是个</strong>满射</strong>，这种群同态称为<strong>满同态</strong>。</p></li></ul></li><li><p><strong>m次方映射(n-power map)</strong> </p><ul><li><p>定义:(不像上面有上面专门的概念我们这里给个数学定义)G是一个集合。$G’&#x3D;{f(a)|a∈G，f(a)&#x3D;a^m}$  这里的次方是指的进行m次运算。</p><blockquote><p>定义<strong>阿贝尔群</strong>$(G,*)$ ,定义映射f为$f:G \longrightarrow G^m$ 。这是一个群同态，在这个群同态中$Im f&#x3D;G^m$ $Ker f&#x3D;G{m}$(G^m^和G{m}是什么见前面 群基础-子群-子群的构造)</p><p>证明: $\forall a,b∈G\f(a<em>b)&#x3D;(a</em>b)^m&#x3D;a^m*b^m&#x3D;f(a)*f(b)$</p></blockquote><p>例:</p><blockquote><p>$f: Z^*_p \longrightarrow Z^*_p ,a\longrightarrow a^2$ </p><p>那么在这个群同态中:$Im f&#x3D;(Z^*_p)^2 ,Ker f&#x3D;Z^*_p{2}&#x3D;{1,p-1} $</p></blockquote></li></ul></li></ul><h4 id="群同态的性质"><a href="#群同态的性质" class="headerlink" title="群同态的性质"></a>群同态的性质</h4><ol><li><p>性质1:<strong>群同态的单位元对应单位元</strong>。设e’是G‘的单位元。那么$f:G\longrightarrow G’$就有e’&#x3D;f(e)。</p><blockquote><p>证明:$f(ae)&#x3D;f(a)f(e)&#x3D;f(a)$，所以f(e)是单位元</p></blockquote></li><li><p>性质2: <strong>逆元对应逆元</strong>:$f(a^{-1})&#x3D;f(a)^{-1} ,\forall a∈G  $</p><blockquote><p>证明:$f(a)<em>f(a^{-1})&#x3D;f(a</em>a^{-1}&#x3D;f(e))$</p></blockquote></li><li><p>性质3: $H\subseteq G \Longrightarrow  f(H)∈G’$ H是原群G的子群，那么f(H)也是同态映射后G‘的子群</p><blockquote><p>证明:$\forall a,b∈H，f(a),f(b)∈f(H),则f(a)\otimes f(b)^{-1}&#x3D;f(a) \otimes f(b^{-1})&#x3D;f(a<em>b^{-1})\因为a</em>b^{-1}∈H，那么f(a*b^{-1})∈f(H)$</p><p>扩展:同态像$Im f$ 是G’ 的子群</p></blockquote></li><li><p>性质4:$H’\subseteq G’\Longrightarrow f^{-1}(H’)∈G$  。如果H’是同态映射后的群G‘的子群，那么f^-1^(H’)是原群G的子群</p><blockquote><p><strong>证明</strong>：</p><p>设 $( f: G \to G’ ) $是群同态，且 $( H’ \leq G’ )$，我们要证明$ \ f^{-1}(H’) \leq G )$。</p><p>记：</p><p>$$<br>f^{-1}(H’) &#x3D; { g \in G \mid f(g) \in H’ }<br>$$</p><p>我们验证$ ( f^{-1}(H’) )$ 是否满足子群的三个条件：</p><ol><li><strong>非空性</strong>：</li></ol><p>由于 $( H’ \leq G’ )$，所以单位元 $( e_{G’} \in H’ )$。</p><p>又因为 ( f ) 是群同态，$( f(e_G) &#x3D; e_{G’} \in H’ )$，所以  $（e_G \in f^{-1}(H’) )$，因此$ ( f^{-1}(H’) \neq \emptyset )$。</p><ol start="2"><li><strong>封闭性</strong>：</li></ol><p>任取$ ( a, b \in f^{-1}(H’) )$，则有：</p><p>$$<br>f(a), f(b) \in H’ \Rightarrow f(a)f(b) \in H’ \quad (\text{因为 } H’ \leq G’)<br>$$</p><p>由于 ( f ) 是同态，有：</p><p>$$<br>f(ab) &#x3D; f(a)f(b) \in H’ \Rightarrow ab \in f^{-1}(H’)<br>$$</p><ol start="3"><li><strong>逆元封闭性</strong>：</li></ol><p>任取 $( a \in f^{-1}(H’) )$，则 $( f(a) \in H’ )$，而 ( H’ ) 是子群，所以：</p><p>$$<br>f(a)^{-1} \in H’ \quad \text{且} \quad f(a^{-1}) &#x3D; f(a)^{-1} \in H’ \Rightarrow a^{-1} \in f^{-1}(H’)<br>$$</p><p>综上，$( f^{-1}(H’) )$ 满足子群判别法的三条性质，因此：</p><p>$$<br>f^{-1}(H’) \leq G<br>$$</p><p>推论:H’&#x3D;{e’}。那么可以得到同态核是G的子群</p></blockquote></li><li><p>性质5: $f(a^m)&#x3D;f(a)^m,\forall a∈G，\forall m∈Z$。比较简单，证明略了。</p></li></ol><h4 id="群同态的复合"><a href="#群同态的复合" class="headerlink" title="群同态的复合"></a>群同态的复合</h4><ul><li><p>定义:$f$是群$(G,\oplus)$  到$(G’,\oplus)$ 的群同态，$’f$是$(G’,\oplus)$到$(G’’,\otimes)$ 的群同态，则$f$和$f’$ 的复合表示为:<br>$$<br>f’\circ f:G\longrightarrow  G’’<br>$$<br>这也是群同态。</p><p>那么这两个群同态的复合就是一个从G到G’’的群同态。</p><p>证明:</p><blockquote><p>$\forall a,b∈G，有f’\circ  f(a*b)&#x3D;f’\circ f(a)\otimes f’\circ f(b)$</p></blockquote></li></ul><h3 id="群同构"><a href="#群同构" class="headerlink" title="群同构"></a>群同构</h3><ul><li>定义:<strong>群同构是满足双射(单射和满射)的群同态。</strong></li></ul><p>定义G与G‘同构，记作$G\cong G’$ 。G与G之间的同构称为自同。同构的逆映射也是同构</p><p><strong>群同构的意义</strong>:两个群的元素是一一对应，且运算规律得到保持，即使经过映射，群的所有结构特性得到保留。一堆同构的群只需要研究一个群的性质就行了。</p><ul><li><p><strong>引理1</strong>:设映射 $$f : G \to G’$$ 是群同态,同态核 $$Ker(f) &#x3D; N$$，如果 $$H$$ 是 $$G$$ 的子群，则有 $$f^{-1}(f(H)) &#x3D; HN$$。 </p><p>证明:</p><blockquote><p>任取元素 $$h \in H, n \in N$$，$$f(h * n) &#x3D; f(h) \cdot f(n) &#x3D; f(h)$$（同态核里的元素映射到 $$G’$$ 是单位元）   故 $$f(HN) \subseteq f(H)$$。即：$$HN \subseteq f^{-1}(f(H))$$。   对于任意 $$x \in f^{-1}(f(H))$$，有 $$f(x) \in f(H)$$。   故存在 $$h$$ 使得 $$f(x) &#x3D; f(h)$$。   故 $$f(h^{-1} * x) &#x3D; f(h^{-1}) \cdot f(x) &#x3D; f(h^{-1}) \cdot f(h) &#x3D; e’$$   故 $$h^{-1}x \in N$$。$$x &#x3D; hh^{-1}x \in HN$$   即：$$f^{-1}(f(H)) \subseteq HN$$。   $$HN &#x3D; f^{-1}(f(H))$$。 </p></blockquote><p>  特别地，当 $$N \subseteq H$$ 时， $$HN &#x3D; H$$（考虑陪集的性质），故 $$f^{-1}(f(H)) &#x3D; H$$。</p></li></ul><h4 id="第一同构定理-基本同态定理"><a href="#第一同构定理-基本同态定理" class="headerlink" title="第一同构定理:(基本同态定理)"></a><strong>第一同构定理</strong>:(<strong>基本同态定理</strong>)</h4><p><strong>第一同构定理</strong>：(基本同态定理)   设 $f$ 是群 $G$ 到群 $G’$ 的群同态，两个群定义的运算为 $<em>$、$\cdot$。同态核为 $K$，同态像为 $I$，则 $G&#x2F;K \cong I$，这个群同构是把商群$</em>$里的陪集$*$映射成代表元的像，设映射为 $\rho$，即:   $[ \rho(aK) &#x3D; f(a). ]$   </p><p><strong>证明:</strong>   - <strong>(单射)</strong>   :</p><blockquote><p>$\forall a, b \in G$，若 $aK &#x3D; bK$，由于 $\rho(aK) &#x3D; f(a)$，则 $f(a) &#x3D; f(b)$。  </p><p>若 $aK \neq bK$，由陪集知识可知，$a \nsim b$，则 $b^{-1}a \notin K$（因为 $K$ 是 $G$ 的正规子群$*$）。</p><p>故 $f(b^{-1}a) &#x3D; f(b)^{-1} \cdot f(a) \neq e’$（$e’$ 是群 $G’$ 的单位元），故 $f(a) \neq f(b)$。   - <strong>(满射)</strong>    $\forall f(a) \in I$，都有对应的原像 $aK$，故是满射。  </p><p><strong>(群同态)</strong>  $ [  \rho(aK * bK) &#x3D; \rho(abK) &#x3D; f(ab) &#x3D; f(a) \cdot f(b) &#x3D; \rho(aK) \cdot \rho(bK),  ] $   得证。   $\rho’ : G&#x2F;K \to G’$ 是单一同态。    </p></blockquote><h4 id="第二同构定理"><a href="#第二同构定理" class="headerlink" title="第二同构定理"></a>第二同构定理</h4><p><strong>第二同构定理</strong>：   设 $f: G \to G’$ 是群的满同态，设同态核为 $N$。若 $H$ 是 $G$ 的包含 $N$ 的正规子群，记 $H’ &#x3D; f(H)$，则有 $  [ G&#x2F;H \cong G’&#x2F;H’. ]   $</p><p><strong>证明</strong>：   </p><blockquote><ol><li>**构造同态 $\psi$**：     定义 $\psi: G \to G’&#x2F;H’$，对 $\forall g \in G$，$\psi(g) &#x3D; f(g)H’$（$f(g) \in G’$）。</li></ol></blockquote><blockquote><pre><code class="hljs"> **满同态**：任取 $f(g)H&#39; \in G&#39;/H&#39;$，其原像为 $g \in G$，故 $\psi$ 满。 2. **计算核 $\text&#123;Ker&#125;(\psi)$**：     $[   \text&#123;Ker&#125;(\psi) = \&#123; g \in G \mid f(g)H&#39; = H&#39; \&#125; = \&#123; g \in G \mid f(g) \in H&#39; \&#125; = f^&#123;-1&#125;(H&#39;).   ]  $   因 $H&#39; = f(H)$ 且 $N \subseteq H$，由引理 $f^&#123;-1&#125;(f(H)) = HN = H$（$N \subseteq H$ 时 $HN = H$）， 故：    $ [   \text&#123;Ker&#125;(\psi) = f^&#123;-1&#125;(f(H)) = H.   ]$   ‘ 3. **应用第一同构定理**：     由第一同构定理，满同态 $\psi$ 诱导同构：    $ [   G/\text&#123;Ker&#125;(\psi) \cong \text&#123;Im&#125;(\psi) \implies G/H \cong G&#39;/H&#39; \quad (\text&#123;因 &#125; \text&#123;Im&#125;(\psi) = G&#39;/H&#39;).   ]   $ 4. **推论**：   对自然同态 $\pi: G \to G/N$，若 $H \supseteq N$，则：   \[ (G/N)/(H/N) \cong G/H, \]   且 $H/N \triangleleft G/N \iff H \triangleleft G$（正规子群的商群对应性）。  5. **说明**：   - 第二同构定理通过构造满同态，利用核的性质（结合 $N \subseteq H$ 时 $f^&#123;-1&#125;(f(H)) = H$），将商群同构转化为第一同构定理的应用。   - 推论揭示了商群中正规子群的“提升”性质，是群论中分析子群与商群结构的关键工具。  </code></pre></blockquote><h4 id="第三同构定理"><a href="#第三同构定理" class="headerlink" title="第三同构定理"></a>第三同构定理</h4><p><strong>第三同构定理</strong> **: 设 $H$ 是群 $G$ 的子群，$N$ 是群 $G$ 的正规子群，则 $H \cap N$ 是 $H$ 的正规子群，且 $H&#x2F;(H \cap N) \cong HN&#x2F;N$。 **</p><p>**证明: ** </p><blockquote><p><strong>正规子群</strong> </p><p>$H \cap N$ 是 $G$ 的子群(子群的交是子群,也就是群),且 $H \cap N$ 是 $H$ 的非空子集(有单位元且 $H \cap N \subseteq H$ )。</p><p>故 $H \cap N$ 是 $H$ 的子群。 </p><p>设群 $D &#x3D; H \cap N$，</p><p>即证:$\forall h \in H, hD &#x3D; Dh$。 </p><p>对于∀$d_1 \in D$ ，都能找到 $d_2 \in D$ 满足 $hd_1 &#x3D; d_2h$。 $hd_1h^{-1} &#x3D; d_2 \in D$，</p><p>即满足 $hd_1h^{-1} \in H$ 且 $hd_1h^{-1} \in N$。</p><p>因为 $h, h^{-1} \in H, d_1 \in D \subseteq H, hd_1h^{-1} \in H$ (由于群的封闭性)。</p><p>至于 $hd_1h^{-1} \in N$,即:$hd_1 \in Nh &#x3D; hN$ ($N$ 是群 $G$ 的正规子群)</p><p>，即:$d_1 \in N$ 。</p><p>$N$ 是群 $HN$ 的正规子群。 </p><p>首先，我们知道 $HN$ 是群 $G$ 的子群。因为 $HN &#x3D; NH$。</p><p>因为 $\forall h \in H, hN &#x3D; Nh$。 群 $N \subseteq HN$ (注:$N &#x3D; eN$),加上它本身是群，故 $N$ 是 $HN$ 的子群。 正规的说明同上，$N$ 是 $G$ 的正规子群，$\forall a \in HN \subseteq G, aN &#x3D; Na$ 。</p><p><strong>同构</strong> </p><p>构造 $\eta: H \to HN&#x2F;N$,其中 $\forall h \in H, \eta(h) &#x3D; hN$.(将群 $H$ 里的元素 $h$ 映射到商群 $HN&#x2F;N$ 里)。</p><p>这是一个<strong>满同态</strong>。 </p><p>对于每个 $hN$,都能在群 $H$ 里找到原像。</p><p>且 $Ker(\eta) &#x3D; {h \in H|hN &#x3D; N}$(同态核里的元素 $h$ 就是单位元) $&#x3D; N \cap H$($h \in H$,且 $hN &#x3D; N$,即 $h \in N$) 由同态基本定理， $H&#x2F;(H \cap N)(H&#x2F;ker(\eta)) \cong HN&#x2F;N(\eta(H))$ </p></blockquote><h2 id="群的结构"><a href="#群的结构" class="headerlink" title="群的结构"></a>群的结构</h2><blockquote><p>这一章我们主要将循环群，这是在密码学中一个很重要的概念。前面的同态和同构可能比较难理解可以只大概看一下，但是还是需要认真的看。</p></blockquote><ul><li><p><strong>一种构造子群的方法</strong>： 设G是群，$a∈G，则<a>&#x3D;{a^z|z∈Z}$是<strong>由a生成的G的子群</strong>。</p><blockquote><p>证明:$\forall a^i,a^j∈<a>则a^i*(a^j)^{-1}&#x3D;a^{i-j}∈<a>$。</p></blockquote></li></ul><h3 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h3><h4 id="循环群的定义"><a href="#循环群的定义" class="headerlink" title="循环群的定义"></a>循环群的定义</h4><ul><li>定义: <strong>设$G$是群，$g∈G$,如果$G&#x3D;<g>$，则称$G$是循环群，$g$表示循环群$G$的生成元。</strong></li></ul><p>示例:</p><blockquote><ol><li>整数加法群:$Z&#x3D;{z|z∈Z}&#x3D;{z*1|z∈Z}&#x3D;&lt;1&gt;&#x3D;&lt;-1&gt;$ -1和1是循环群Z的生成元—无限循环群</li><li>$Z^*_5$乘法循环群:<br>$Z^*_5&#x3D;{1,2,3,4}$ &#x3D;&lt;2&gt;&#x3D;&lt;3&gt;—-$2^1&#x3D;2,2^3&#x3D;3，2^4&#x3D;1。3^2&#x3D;4,3^3&#x3D;2,3^4&#x3D;1$—有限循环群</li></ol></blockquote><ul><li><p>定理1: <strong>任意循环群都是阿贝尔群</strong> </p><blockquote><p>证明:$\forall a,v∈<g>,设a&#x3D;g^r,b&#x3D;g^k，则a<em>b&#x3D;g^{r+k}&#x3D;b</em>a$</p></blockquote></li><li><p>定理2:<strong>循环群的子群一定是循环群</strong></p><blockquote><p>证明: <strong>证明</strong>   设循环群 $G$，生成元为 $g$，群阶 $|G| &#x3D; n$，</p><p>因为循环群 $G$ 中的任意一个元素都可以表达为生成元的幂的形式，故而，若 $H$ 为循环群 $G$ 的一个子群，则必然可写为</p><p>$ [ {g^{k_1}, g^{k_2}, \ldots, g^{k_m}}, \quad 1 &lt; k_1 &lt; k_2 &lt; \ldots &lt; k_m \leq n ] $</p><p>并引入$ [ d &#x3D; \min{k_1, k_2, \ldots, k_m} ]$</p><p>因为 $G$ 是一个有限群，结合前要知识1知道，$G$ 中的任一元素的阶都存在，即任一元素都可以形成一个循环子群。故而对于元素 $g^d$，必然可以形成循环子群 $\langle g^d \rangle$。</p></blockquote></li><li><p>定理3:<strong>设$G$是循环群,$H$是其子群，则商群$G&#x2F;H$是循环群</strong></p><blockquote><p><strong>证明</strong><br>（循环群是阿贝尔群，而阿贝尔群的子群都是正规子群，所以 $H$ 是正规子群，它可以构成商群）</p><p>设 $G &#x3D; \langle g \rangle$，则 $G&#x2F;H &#x3D; \langle [g]_H \rangle$。这是因为，</p><p>对于 $\forall [g^k]_H \in G&#x2F;H$，有</p><p>$[<br>[g^k]_H &#x3D; [g * \cdots * g]_H &#x3D; [g]_H * \cdots * [g]_H &#x3D; ([g]_H)^k<br>]$</p><p>所以，$\forall [g^k]_H$ 都是由 $[g]_H$ 生成。故而，$[g]_H$ 是 $G&#x2F;H$ 的生成元。</p></blockquote></li></ul><h3 id="元素的阶"><a href="#元素的阶" class="headerlink" title="元素的阶"></a>元素的阶</h3><ul><li><p>定义: 设$G$是群，$a∈G$，如果n是满足$a^n&#x3D;e$的最小的正整数，则称n是元素a的阶。</p></li><li><p>性质1**:$G$是群，元素a的阶是$n(a^n&#x3D;e)$，则$\forall m∈Z$，有$n|m\Longleftrightarrow a^m&#x3D;e$。**</p><blockquote><p>这个是很显然的，就不证明了</p></blockquote></li><li><p>性质2:<strong>有限循环群的阶是n，则生成元的阶也是n。</strong></p><blockquote><p>显然生成元生成不重复的元素最多也只有n个。</p></blockquote></li><li><p>性质3:<strong>正整数$d|n$，n阶有限循环群恰有一个d阶的子群。</strong></p><blockquote><p>证明:(存在性):d|n,有$g^{n&#x2F;d}$ 的阶是d。则$&lt;g^{n&#x2F;d}&gt;$的阶是d。故而存在阶是d的子群$&lt;g^{n&#x2F;d}&gt;$</p><p>（唯一性）反证法:假设存在另一个d阶的循环子群$&lt;g^k&gt;$，则$(g^k)^d&#x3D;e$，所以n|kd，有$\frac{n}{d}|k $ 。所以,$g^{k}∈$</p><p>所以，$g^k∈&lt;g^{\frac {n}{d} }&gt;$,有$&lt;g^k&gt;$是$&lt;g^{\frac {n}{d}}&gt;$ ，因为二者阶都是d，所以他们是同一个循环群</p></blockquote><p>例：循环群G的阶是15，15的正因子是1，3，5，15，所以G一个有4个子群。他们的阶分别是1，3，5，15。</p></li><li><p>性质4: n阶有限循环群<g>，$\forall ∈Z$，有$g^k$的阶是$\frac {n}{gcd(n,k)}$ 。</p><blockquote><p>证明:假设$g^k$的阶是m,则$g^{km}&#x3D;e$，有$n|km$</p><p>于是,$km&#x3D;lcm(n,k)&#x3D;\frac {nk}{gccd(n,k)}$</p><p>所以，$m&#x3D;\frac {n}{gcd(n,k)}$</p></blockquote></li><li><p>性质5:<strong>n阶有限循环群有$\phi (n)$(欧拉函数)个生成元</strong></p><p>根据上述的性质$order(g^k)(表示阶)&#x3D;\frac {n}{gcd(n,k)}$ 。当gcd(n,k)&#x3D;1时，$g^k$的阶为n，此时$g^k$ 是生成元</p></li><li><p>性质6:<strong>G是有限群，元素a的阶乘是|G|的因子。</strong></p><blockquote><p>$<a>$是G的子群，根据拉格朗日定理，有$|<a>|||G|$</p><p>因为生成元a的阶等于<a>的阶。所以，a的阶是|G|的因子</p></blockquote></li><li><p>性质7: <strong>素数阶的群必然是(有限)循环群。</strong></p><p><strong>证明</strong>：设 $G$ 是群，且 $|G| &#x3D; p$，$p$ 是素数。 </p><p>设 $a \in G$，且 $a \neq e$，$a$ 的阶是 $k$（$a^k &#x3D; e$）。 根据性质6，$k \mid p$。</p><p>所以，$k &#x3D; 1$ 或 $p$。 因为 $a \neq e$，所以 $k &#x3D; p$，即 $a$ 的阶是 $p$，有 $a$ 是生成元。 所以，$G$ 是(有限)循环群(因为它有生成元)。</p><p> 设 $k$ 是 $a$ 的阶 元素的阶是群的阶的因子</p></li></ul><h4 id="循环群的同构"><a href="#循环群的同构" class="headerlink" title="循环群的同构"></a>循环群的同构</h4><ul><li><p><strong>无限循环群的同构群</strong></p><ul><li><p>定理:<strong>设$&lt;G,*&gt;$为无限循环群，则$&lt;G,*&gt;\cong &lt;Z,+&gt;$</strong></p><p>证明:$|a| &#x3D; \infty$，令 $f: \mathbb{Z} \to G$ 如下：$f(n) &#x3D; a^n$，</p><p>因为 $f(n + m) &#x3D; a^{n + m} &#x3D; a^n * a^m &#x3D; f(n) * f(m)$，所以 $f$ 为同态；</p><p>又因为 $f(n) &#x3D; f(m) \Rightarrow a^n &#x3D; a^m \Rightarrow a^{|n - m|} &#x3D; e \Rightarrow |n - m| &#x3D; 0 \Rightarrow n &#x3D; m$，所以 $f$ 为 1 - 1，onto 易见，从而 $\langle G, * \rangle \cong \langle \mathbb{Z}, + \rangle$</p></li></ul></li><li><p>有限循环群的同构群</p><ul><li><p>定理:<strong>设 $\langle G, * \rangle$ 为有限循环群，则 $\langle G, * \rangle \cong \langle \mathbb{Z}_n, \oplus_n \rangle$</strong> </p><p><strong>证明</strong></p><p>$|a| &#x3D; n &gt; 0$，从而 $G &#x3D; {a^0, a^1, \cdots, a^{n - 1}}$，令 $f: \mathbb{Z}_n \to G$ 如下：$f(i) &#x3D; a^i$ ($i &#x3D; 0, 1, \cdots, n - 1$)，由于 $f(i \oplus_n j) &#x3D; a^{i \oplus_n j} &#x3D; a^i * a^j &#x3D; f(i) * f(j)$，故 $f$ 为同态。 又由于 $f(i) &#x3D; f(j) \Rightarrow a^i &#x3D; a^j \Rightarrow a^{|i - j|} &#x3D; e \Rightarrow n \mid |i - j| \Rightarrow i \equiv j \pmod{n} \Rightarrow i &#x3D; j$，故 $f$ 为单射，$f$ 的满射性易见，因此 $\langle G, * \rangle \cong \langle \mathbb{Z}_n, \oplus_n \rangle$</p></li></ul><p>根据上面两个定理，我们讨论循环群讨论与它同构的 &lt;Z,+&gt;和$\langle \mathbb{Z}_n, \oplus_n \rangle$</p></li><li><p>性质8:<strong>$G$是n阶有限循环群，d是n的正因子，G里的d阶乘元素一共有$\phi (d)$个</strong></p><blockquote><p>设 $G$ 是一个有限循环群，$|G| &#x3D; n$，即 $G \cong \mathbb{Z}_n$。</p><p>我们知道 $\mathbb{Z}_n &#x3D; {0, 1, \dots, n-1}$ 在加法模 $n$ 意义下构成一个循环群，生成元为与 $n$ 互素的元素。</p><p>记 $d \mid n$，我们要求 $\mathbb{Z}_n$ 中阶为 $d$ 的元素个数。</p><hr><p><strong>步骤 1：$\mathbb{Z}_n$ 中元素 $a$ 的阶为 $\dfrac{n}{\gcd(a, n)}$</strong></p><p>令 $\text{ord}(a)$ 表示 $a$ 的阶，则：</p><p>$$<br>\text{ord}(a) &#x3D; \frac{n}{\gcd(a, n)}<br>$$</p><p>所以，当且仅当 $\gcd(a, n) &#x3D; \frac{n}{d}$ 时，$\text{ord}(a) &#x3D; d$。</p><hr><p><strong>步骤 2：求出满足 $\gcd(a, n) &#x3D; \frac{n}{d}$ 的 $a$ 的个数</strong></p><p>设 $m &#x3D; \dfrac{n}{d}$，我们要求：</p><p>$$<br>#{a \in \mathbb{Z}_n \mid \gcd(a, n) &#x3D; m}<br>$$</p><p>令 $a &#x3D; m k$，则 $a &lt; n$，即 $k &lt; d$，并且 $\gcd(mk, n) &#x3D; m \iff \gcd(k, d) &#x3D; 1$。</p><p>所以，$k$ 满足 $1 \leq k \leq d$ 且 $\gcd(k, d) &#x3D; 1$，这样的 $k$ 有 $\varphi(d)$ 个。</p><hr><p><strong>结论</strong>：</p><p>$$<br>\text{$G$ 中阶为 $d$ 的元素个数} &#x3D; \varphi(d)<br>$$</p></blockquote></li></ul><h4 id="群的直积"><a href="#群的直积" class="headerlink" title="群的直积"></a>群的直积</h4><ul><li>给定两个群: $(S, \circ), (T, *)$，定义笛卡儿乘积 $S \times T$ 上的运算 $\otimes$ 如下：<br>$[<br>\langle s_1, t_1 \rangle \otimes \langle s_2, t_2 \rangle &#x3D; \langle s_1 \circ s_2, t_1 * t_2 \rangle<br>]$</li><li>$(S \times T, \otimes)$ 是群<ul><li>结合律：<br>$单位元素：$$\langle 1_S, 1_T \rangle$</li><li>逆元素：$\langle s, t \rangle$ 的逆元素是 $\langle s^{-1}, t^{-1} \rangle$<ul><li>(其中：$s, s^{-1} \in S, t, t^{-1} \in T$)</li></ul></li></ul></li></ul><h4 id="循环群的直积"><a href="#循环群的直积" class="headerlink" title="循环群的直积"></a>循环群的直积</h4><ul><li>$C_m \times C_n \cong C_{mn}$ <strong>如果</strong> $m$ 与 $n$ 互质。其中 $C_k$ 表示 $k$ 阶循环群。<ul><li>$\Leftarrow$ 若 $m$ 与 $n$ 互质，只需证明 $C_m \times C_n$ 含有阶为 $mn$ 的元素。<ul><li>$(a, b)^{mn} &#x3D; e$，其中 $a, b$ 分别是 $C_m$ 和 $C_n$ 的生成元素。</li><li>若 $(a, b)^k &#x3D; e$，$k$ 必是 $m, n$ 的公倍数，因 $m$ 与 $n$ 互质，故 $k$ 是 $mn$ 的倍数。所以，$(a, b)$ 的阶是 $mn$。</li></ul></li><li>$\Rightarrow$ 若 $C_m \times C_n \cong C_{mn}$，则 $C_m \times C_n$ 是循环群，设其生成元是 $(s, t)$，则 $(s, t)$ 的阶是 $mn$，若 $\gcd(m, n) &#x3D; k &gt; 1$，则 $(s, t)^{mn&#x2F;k} &#x3D; e$，这与 $(s, t)$ 的阶是 $mn$ 矛盾。<ul><li>注意：$s^m &#x3D; e_1, t^n &#x3D; e_2$</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LitCTF复现</title>
    <link href="/2025/05/25/LitCTF/"/>
    <url>/2025/05/25/LitCTF/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LitCTF"><a href="#LitCTF" class="headerlink" title="LitCTF"></a>LitCTF</h1><h2 id="ez-math"><a href="#ez-math" class="headerlink" title="ez_math"></a>ez_math</h2><p>简单的矩阵rsa，原理见论文</p><ul><li><a href="https://www.gcsu.edu/sites/files/page-assets/node-808/attachments/pangia.pdf#:~:text=We%20propose%20a%20variation%20on%20the%20RSA%20Cryptosystem%3A,methods%20to%20matrix%20values%20in%20addition%20to%20scalars">https://www.gcsu.edu/sites/files/page-assets/node-808/attachments/pangia.pdf#:~:text=We%20propose%20a%20variation%20on%20the%20RSA%20Cryptosystem%3A,methods%20to%20matrix%20values%20in%20addition%20to%20scalars</a>.</li></ul><p>​       </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid4<br><br>flag = <span class="hljs-string">b&#x27;LitCTF&#123;&#x27;</span>+ <span class="hljs-built_in">str</span>(uuid4()).encode() + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>flag = bytes_to_long(flag)<br>len_flag = flag.bit_length()<br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>P = GF(p)<br>A = [[flag,                 getPrime(len_flag)],<br>     [getPrime(len_flag),   getPrime(len_flag)]]<br>A = matrix(P, A)<br>B = A ** e<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;B = <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(B)&#125;</span>&quot;</span>.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>))<br><br><span class="hljs-comment"># e = 65537</span><br><span class="hljs-comment"># p = 8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869</span><br><span class="hljs-comment"># B = [[2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170, 4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547], [3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598, 2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992]]</span><br></code></pre></td></tr></table></figure><p>​       解题代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">65537</span><br>p = <span class="hljs-number">8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869</span><br>P=GF(p)<br>B = Matrix(P,[[<span class="hljs-number">2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170</span>, <span class="hljs-number">4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547</span>], [<span class="hljs-number">3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598</span>, <span class="hljs-number">2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992</span>]])<br>                                                                                                                                                                                                                                                                                                           <br>gp=(p^<span class="hljs-number">2</span>-p)*(p^<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)<br>d = <span class="hljs-built_in">int</span>(inverse(e,gp))<br><span class="hljs-built_in">print</span>(d)<br>M=B^d<br><span class="hljs-built_in">print</span>(M)<br>m=<span class="hljs-built_in">int</span>(M[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="baby"><a href="#baby" class="headerlink" title="baby"></a>baby</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br><br>m = bytes_to_long(flag)<br>g = getPrime(<span class="hljs-number">512</span>)<br>t = getPrime(<span class="hljs-number">150</span>)<br>data = (t * gmpy2.invert(m, g)) % g<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;g = <span class="hljs-subst">&#123;g&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;data = <span class="hljs-subst">&#123;data&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">g = 7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span><br><span class="hljs-string">data = 2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>简单的格密码。需要推理一下。设d_1是data%g的逆元</p><p>那么$data<em>m(mod g)&#x3D;t(mod g),那么m&#x3D;d_1</em>t-kg$</p><p>由此构造格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>g = <span class="hljs-number">7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span><br>d_1=<span class="hljs-number">361604276948326501762250287716016338622906218631144152645999375100275741878714167153966876463816425975791307247683233886856162923152653346318817853658709</span><br><br>M=Matrix(ZZ,[[<span class="hljs-number">2</span>^<span class="hljs-number">200</span>,d_1],[<span class="hljs-number">0</span>,g]])<br>L=M.LLL()<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(L[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])))<br></code></pre></td></tr></table></figure><h2 id="new-bag"><a href="#new-bag" class="headerlink" title="new_bag"></a>new_bag</h2><p>这个背包按理说密度是不够的，不够因为我们已经知道前缀是Litctf{后缀}排除几个还是轻松的。<br>$$</p><p>$$</p><p>$$<br>U&#x3D;\begin{bmatrix}<br>2&amp;0&amp;…&amp;0&amp;Na_{11}&amp;Na_{21}&amp;…&amp;Na_{m1}\<br>0&amp;2&amp;…&amp;0&amp;Na_{12}&amp;Na_{22}&amp;…&amp;Na_{m2}\<br>⋮&amp; &amp;…&amp; ⋮&amp;⋮ &amp;⋮ &amp;…&amp;⋮\<br>1&amp;1&amp;…&amp;1&amp;Ns_1 &amp;NS_2 &amp;…&amp;NS_m\</p><p>\end{bmatrix}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">173537234562263850990112795836487093439</span><br>pubkey = [<span class="hljs-number">184316235755254907483728080281053515467</span>, <span class="hljs-number">301753295242660201987730522100674059399</span>, <span class="hljs-number">214746865948159247109907445342727086153</span>, <span class="hljs-number">190710765981032078577562674498245824397</span>, <span class="hljs-number">331594659178887289573546882792969306963</span>, <span class="hljs-number">325241251857446530306000904015122540537</span>, <span class="hljs-number">183138087354043440402018216471847480597</span>, <span class="hljs-number">184024660891182404534278014517267677121</span>, <span class="hljs-number">221852419056451630727726571924370029193</span>, <span class="hljs-number">252122782233143392994310666727549089119</span>, <span class="hljs-number">175886223097788623718858806338121455451</span>, <span class="hljs-number">275410728642596840638045777234465661687</span>, <span class="hljs-number">251664694235514793799312335012668142813</span>, <span class="hljs-number">218645272462591891220065928162159215543</span>, <span class="hljs-number">312223630454310643034351163568776055567</span>, <span class="hljs-number">246969281206041998865813427647656760287</span>, <span class="hljs-number">314861458279166374375088099707870061461</span>, <span class="hljs-number">264293021895772608566300156292334238719</span>, <span class="hljs-number">300802209357110221724717494354120213867</span>, <span class="hljs-number">293825386566202476683406032420716750733</span>, <span class="hljs-number">280164880535680245461599240490036536891</span>, <span class="hljs-number">223138633045675121340315815489781884671</span>, <span class="hljs-number">194958151408670059556476901479795911187</span>, <span class="hljs-number">180523100489259027750075460231138785329</span>, <span class="hljs-number">180425435626797251881104654861163883059</span>, <span class="hljs-number">313871202884226454316190668965524324023</span>, <span class="hljs-number">184833541398593696671625353250714719537</span>, <span class="hljs-number">217497008601504809464374671355532403921</span>, <span class="hljs-number">246589067140439936215888566305171004301</span>, <span class="hljs-number">289015788017956436490096615142465503023</span>, <span class="hljs-number">301775305365100149653555500258867275677</span>, <span class="hljs-number">185893637147914858767269807046039030871</span>, <span class="hljs-number">319328260264390422708186053639594729851</span>, <span class="hljs-number">196198701308135383224057395173059054757</span>, <span class="hljs-number">231185775704496628532348037721799493511</span>, <span class="hljs-number">243973313872552840389840048418558528537</span>, <span class="hljs-number">213140279661565397451805047456032832611</span>, <span class="hljs-number">310386296949148370235845491986451639013</span>, <span class="hljs-number">228492979916155878048849684460007011451</span>, <span class="hljs-number">240557187581619139147592264130657066299</span>, <span class="hljs-number">187388364905654342761169670127101032713</span>, <span class="hljs-number">305292765113810142043496345097024570233</span>, <span class="hljs-number">303823809595161213886303993298011013599</span>, <span class="hljs-number">227663140954563126349665813092551336597</span>, <span class="hljs-number">257833881948992845466919654910838972461</span>, <span class="hljs-number">291249161813309696736659661907363469657</span>, <span class="hljs-number">228470133121759300620143703381920625589</span>, <span class="hljs-number">337912208888617180835513160742872043511</span>, <span class="hljs-number">252639095930536359128379880984347614689</span>, <span class="hljs-number">306613178720695137374121633131944714277</span>, <span class="hljs-number">328627523443531702430603855075960220403</span>, <span class="hljs-number">283995291614222889691668376952473718279</span>, <span class="hljs-number">185992200035693404743830210660606140043</span>, <span class="hljs-number">175575945935802771832062328390060568381</span>, <span class="hljs-number">239709736751531517044198331233711541211</span>, <span class="hljs-number">325191992201185112802734343474281930993</span>, <span class="hljs-number">285825734319916654888050222626163129503</span>, <span class="hljs-number">260820892372814862728958615462018022903</span>, <span class="hljs-number">271109638409686342632742230596810197399</span>, <span class="hljs-number">195432366301516284662210689868561107229</span>, <span class="hljs-number">252351678712166898804432075801905414141</span>, <span class="hljs-number">175869608753229067314866329908981554323</span>, <span class="hljs-number">212291732707466211705141589249474157597</span>, <span class="hljs-number">299891357045144243959903067354676661051</span>, <span class="hljs-number">271237385422923460052644584552894282763</span>, <span class="hljs-number">268702576849722796315440463412052409241</span>, <span class="hljs-number">198273535005705777854651218089804228523</span>, <span class="hljs-number">177684355989910045168511400849036259973</span>, <span class="hljs-number">189237944200991357454773904466163557789</span>, <span class="hljs-number">175427967765368330787115337317676160499</span>, <span class="hljs-number">270446056495616077936737430232108222303</span>, <span class="hljs-number">243318639972702711024520926308402316247</span>, <span class="hljs-number">223872107662231922057872197123261908053</span>, <span class="hljs-number">268995355861070998347238198063073079851</span>, <span class="hljs-number">244478236168888494353493404999149985963</span>, <span class="hljs-number">230731375083676409248450208772518041369</span>, <span class="hljs-number">231630208287176700035265642824425872113</span>, <span class="hljs-number">187649298194887119502654724235771449423</span>, <span class="hljs-number">264924369987111619306245625770849264491</span>, <span class="hljs-number">327092811483332202721992798797117253283</span>, <span class="hljs-number">274967838920225995524024619709213673571</span>, <span class="hljs-number">313836314009366857157961838519499192671</span>, <span class="hljs-number">181860768653760352435352944732117309357</span>, <span class="hljs-number">184011200837375425882494435177626368109</span>, <span class="hljs-number">246455975565763627776562816894916143559</span>, <span class="hljs-number">262208917125258935991543552004318662109</span>, <span class="hljs-number">334006940602786701813813048552124976177</span>, <span class="hljs-number">241119397420390120456580389194328607351</span>, <span class="hljs-number">255370083166310325724283692646412327547</span>, <span class="hljs-number">280056982387584554076672702548437488901</span>, <span class="hljs-number">190822826881447578202544631446213911541</span>, <span class="hljs-number">206119293866065537243159766877834200177</span>, <span class="hljs-number">289535246575130471484249052043282790337</span>, <span class="hljs-number">222004375767927951747133364917437739627</span>, <span class="hljs-number">186041951615746748538744491355290007923</span>, <span class="hljs-number">299120276948597373232905692530626175519</span>, <span class="hljs-number">268645812049699572580085139845553457511</span>, <span class="hljs-number">231990902203442306941381714523426756489</span>, <span class="hljs-number">259677531562170067444672097354970172129</span>, <span class="hljs-number">232573792063456357545735601063504090387</span>, <span class="hljs-number">268451806037215206985127877726665463011</span>, <span class="hljs-number">324266632324016349795115268035757999593</span>, <span class="hljs-number">323952615081869295386415078624753400501</span>, <span class="hljs-number">302316593553669781596237136546083536339</span>, <span class="hljs-number">235576231941572491681115931798290883659</span>, <span class="hljs-number">202271277470197960243533508432663735031</span>, <span class="hljs-number">172391954991101354275650988921310984563</span>, <span class="hljs-number">215333185856183701105529790905068832303</span>, <span class="hljs-number">335916893044781805453250006520700519353</span>, <span class="hljs-number">217268288923298532517983372665872329797</span>, <span class="hljs-number">265455575922780577837866687874732212733</span>, <span class="hljs-number">182194442259001995170676842797322170297</span>, <span class="hljs-number">180222796978664332193987060700843734759</span>, <span class="hljs-number">332629077640484670095070754759241249101</span>, <span class="hljs-number">238815683708676274248277883404136375767</span>, <span class="hljs-number">246167709707533867216616011486975023679</span>, <span class="hljs-number">188375282015595301232040104228085154549</span>, <span class="hljs-number">230675799347049231846866057019582889423</span>, <span class="hljs-number">290911573230654740468234181613682439691</span>, <span class="hljs-number">173178956820933028868714760884278201561</span>, <span class="hljs-number">340087079300305236498945763514358009773</span>, <span class="hljs-number">215775253913162994758086261347636015049</span>, <span class="hljs-number">286306008278685809877266756697807931889</span>, <span class="hljs-number">175231652202310718229276393280541484041</span>, <span class="hljs-number">230887015177563361309867021497576716609</span>, <span class="hljs-number">306478031708687513424095160106047572447</span>, <span class="hljs-number">172289054804425429042492673052057816187</span>]<br>enc = <span class="hljs-number">82516114905258351634653446232397085739</span><br><br>known = <span class="hljs-string">b&#x27;LitCTF&#123;&#x27;</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>bin_known = <span class="hljs-built_in">bin</span>(bytes_to_long(known))[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bin_known)):<br>    enc -= pubkey[i] * <span class="hljs-built_in">int</span>(bin_known[i])<br>    enc %= p<br><br>new_pubkey = pubkey[-<span class="hljs-number">72</span>:-<span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(new_pubkey)<br>n = <span class="hljs-built_in">len</span>(new_pubkey)<br>d = n / log(<span class="hljs-built_in">max</span>(new_pubkey), <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(CDF(d))<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> trange(<span class="hljs-number">256</span>):<br>    S = enc + k*p<br>    L = Matrix(ZZ,n+<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        L[i,i] = <span class="hljs-number">2</span><br>        L[-<span class="hljs-number">1</span>,i] = <span class="hljs-number">1</span><br>        L[i,-<span class="hljs-number">1</span>] = new_pubkey[i]<br>    L[-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>] = S<br>    L[:,-<span class="hljs-number">1</span>] *= <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> L.LLL():<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">set</span>(line[:-<span class="hljs-number">1</span>]).issubset(&#123;-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;):<br>            m = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> line[:-<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:<br>                    m += <span class="hljs-string">&#x27;0&#x27;</span><br>                <span class="hljs-keyword">else</span>:<br>                    m += <span class="hljs-string">&#x27;1&#x27;</span><br>            flag = <span class="hljs-string">b&#x27;LitCTF&#123;&#x27;</span> + long_to_bytes(<span class="hljs-built_in">int</span>(m,<span class="hljs-number">2</span>)) + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-comment"># LitCTF&#123;Am3xItsT&#125;</span><br><span class="hljs-built_in">print</span>(L)<br></code></pre></td></tr></table></figure><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>这里很容易就能查到noise在factordb上利用n-hint&#x3D;noise*()</p><p>之后就很简单了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>p,q = getPrime(<span class="hljs-number">1024</span>),getPrime(<span class="hljs-number">1024</span>)<br>n = p*q<br>noise = getPrime(<span class="hljs-number">40</span>)<br>tmp1 = noise*p+noise*q<br>tmp2 = noise*noise<br>hint = p*q+tmp1+tmp2<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hint = <span class="hljs-subst">&#123;hint&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span><br><span class="hljs-string">hint = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag=<span class="hljs-string">b&#x27;114514f0xsad&#x27;</span><br><br>m = bytes_to_long(flag)<br>p,q,e = getPrime(<span class="hljs-number">1024</span>),getPrime(<span class="hljs-number">1024</span>),getPrime(<span class="hljs-number">101</span>)<br>n = p*q<br>temp = gmpy2.invert(e,p-<span class="hljs-number">1</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br>hint = temp&gt;&gt;<span class="hljs-number">180</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hint = <span class="hljs-subst">&#123;hint&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">e = 1915595112993511209389477484497</span><br><span class="hljs-string">n = 12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span><br><span class="hljs-string">c = 5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span><br><span class="hljs-string">hint = 10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>推导一下设hint&#x3D;dp<br>$$<br>e(d_p+x)&#x3D;k(p-1)+1<br>$$<br>模p之后有为什么可以由mod p推断到mod n看这个你就懂了。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import bytes_to_long, getPrime, inverse<br><br><span class="hljs-attribute">e</span>=0x10001<br>p,<span class="hljs-attribute">q</span>=getPrime(10),getPrime(10)<br><span class="hljs-attribute">n</span>=p*q<br><span class="hljs-built_in">print</span>(inverse(e,n))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(2*<span class="hljs-number">*10</span>):<br>    <span class="hljs-keyword">if</span> (e*i+11451)%<span class="hljs-attribute">p</span>==0&amp;(e*i+11451)%n==0:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>$$<br>e(d_p+x)+k-1&#x3D;0 mod p<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage10.6</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br>        <span class="hljs-built_in">print</span>(d)<br>    R = f.base_ring()<br>    N = R.cardinality()<br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ^ (m - i) * f ^ i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br>    B = B.dense_matrix().LLL()<br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br>    <span class="hljs-keyword">return</span> []<br><br>e = <span class="hljs-number">1915595112993511209389477484497</span><br>n = <span class="hljs-number">12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span><br>c = <span class="hljs-number">5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span><br>leak = <span class="hljs-number">10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span><br>leak &lt;&lt;= <span class="hljs-number">180</span><br>R.&lt;x,y&gt; = PolynomialRing(Zmod(n),implementation=<span class="hljs-string">&#x27;generic&#x27;</span>)<br>f = e * (leak + x) + (y - <span class="hljs-number">1</span>)<br>res = small_roots(f,(<span class="hljs-number">2</span>^<span class="hljs-number">180</span>,<span class="hljs-number">2</span>^<span class="hljs-number">101</span>),m=<span class="hljs-number">2</span>,d=<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> res:<br>    dp_low = root[<span class="hljs-number">0</span>]<br>    dp = leak + dp_low<br>    tmp = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,e*dp,n) - <span class="hljs-number">2</span><br>    p = gmpy2.gcd(tmp,n)<br>    q = n // p<br>    d = inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    m = <span class="hljs-built_in">pow</span>(c,d,n)<br>    <span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment"># LitCTF&#123;03ecda15d1a89b06454c6050c1bd489f&#125;</span><br></code></pre></td></tr></table></figure><p>最后一步，证明:<br>$$<br>tmp&#x3D;2^{e<em>d_p}mod n -2\equiv 2^{k_1(p-1)+1}-k_2</em>n-2\equiv 2+k_3<em>p-k_2</em>n-2&#x3D;p(k_3-k_2*q)<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梅森旋转生成随机数</title>
    <link href="/2025/03/30/%E9%80%86%E5%90%91%E6%A2%85%E6%A3%AE%E7%AE%97%E6%B3%95/"/>
    <url>/2025/03/30/%E9%80%86%E5%90%91%E6%A2%85%E6%A3%AE%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="梅森旋转生成随机数的逆向预测和恢复"><a href="#梅森旋转生成随机数的逆向预测和恢复" class="headerlink" title="梅森旋转生成随机数的逆向预测和恢复"></a>梅森旋转生成随机数的逆向预测和恢复</h1><ul><li>预测下一个随机数，恢复被隐藏的随机数据</li></ul><p>首发于先知社区 ：<a href="https://xz.aliyun.com/news/16929">子集和问题的两种解决方式-先知社区</a></p><h2 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h2><ul><li>wiki上有算法实现的源代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_int32</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">0xFFFFFFFF</span> &amp; x)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MT19937</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-variable language_">self</span>.mt = [<span class="hljs-number">0</span>] * <span class="hljs-number">624</span><br>        <span class="hljs-variable language_">self</span>.mt[<span class="hljs-number">0</span>] = seed<br>        <span class="hljs-variable language_">self</span>.mti = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">624</span>):<br>            <span class="hljs-variable language_">self</span>.mt[i] = _int32(<span class="hljs-number">1812433253</span> * (<span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] ^ <span class="hljs-variable language_">self</span>.mt[i - <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>) + i)<br><br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_number</span>(<span class="hljs-params">self,x=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.mti == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> x <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-variable language_">self</span>.twist()<br>        y = <span class="hljs-variable language_">self</span>.mt[<span class="hljs-variable language_">self</span>.mti]<br>        y = y ^ y &gt;&gt; <span class="hljs-number">11</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">7</span> &amp; <span class="hljs-number">2636928640</span><br>        y = y ^ y &lt;&lt; <span class="hljs-number">15</span> &amp; <span class="hljs-number">4022730752</span><br>        y = y ^ y &gt;&gt; <span class="hljs-number">18</span><br>        <span class="hljs-variable language_">self</span>.mti = (<span class="hljs-variable language_">self</span>.mti + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>        <span class="hljs-keyword">return</span> _int32(y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">624</span>):<br>            y = _int32((<span class="hljs-variable language_">self</span>.mt[i] &amp; <span class="hljs-number">0x80000000</span>) + (<span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>))<br>            <span class="hljs-variable language_">self</span>.mt[i] = (y &gt;&gt; <span class="hljs-number">1</span>) ^ <span class="hljs-variable language_">self</span>.mt[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br><br>            <span class="hljs-keyword">if</span> y % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>                <span class="hljs-variable language_">self</span>.mt[i] = <span class="hljs-variable language_">self</span>.mt[i] ^ <span class="hljs-number">0x9908b0df</span><br></code></pre></td></tr></table></figure><p>根据代码分析过程。因为社区已经有人讲过很详细的过程，我们这里就只说一下大致分为三个过程</p><ul><li>初始化</li></ul><p>根据种子seed，生成初始状态mt(共有624个数据。然后mti&#x3D;&#x3D;0.</p><ul><li>处理mt生成随机数</li></ul><p>对mt进行一系列线性操作然后生成随机数。</p><ul><li>进行旋转</li></ul><p>当已经生成了624个随机数时，相当于耗光了一轮的状态。就需要利用旋转生成新一轮数据，观察这个twist代码，我们可以利用这个预测624位之后出现的下一轮的mt状态然后预测下一个随机数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">M1=[]<br>M2=[]<br>rng=MT19937(seed=<span class="hljs-number">1123</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1248</span>):<br>    a=rng.extract_number()<br>    <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">624</span>:<br>        M1.append(a)<br>    <span class="hljs-keyword">else</span>:<br>        M2.append(a)<br><span class="hljs-built_in">print</span>(M1)<br><span class="hljs-built_in">print</span>(M2)<br></code></pre></td></tr></table></figure><p>如图可以调用函数生成随机数我们可以利用M1预测M2的数据。</p><p>我们可以用RandCrack库预测生成的随机数和生成之前生成的随机数，也可以自己写一个预测的代码。</p><ul><li>库函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">rc=RandCrack()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> M1:<br>    rc.submit(i)<br><span class="hljs-built_in">next</span>=rc.predict_randrange(<span class="hljs-number">0</span>, <span class="hljs-number">0xFFFFFFFF</span>)<span class="hljs-comment">#(这里确定输出的起始和末尾bit,，这里在后面讲解为何这样)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>)<br></code></pre></td></tr></table></figure><ul><li>逆向函数进行预测</li></ul><blockquote><ul><li>逆向extract_number()函数</li></ul><p>​       y &#x3D; y ^ y &gt;&gt; 11<br>​        y &#x3D; y ^ y &lt;&lt; 7 &amp; 2636928640<br>​        y &#x3D; y ^ y &lt;&lt; 15 &amp; 4022730752<br>​        y &#x3D; y ^ y &gt;&gt; 18</p><p>这是这个函数最关键的部分，我们在一轮中可以利用生成一轮的随机数恢复mt，然后预测下一轮的mt恢复数据，从下往上。</p></blockquote><p>我们把操作后的y写成bit形式y&#x3D;$y_1..y_{32}$ |同时记操作前$x&#x3D;x_1..x_{32}$。。。</p><p>​                            $$y&#x3D;x\oplus x&gt;&gt;n$$   <strong>n&gt;&#x3D;32-n</strong></p><p>那么有$y_1..y_{32}&#x3D;x_1..x_{32}\oplus 0..0x_1..x_{32-n}$</p><p>那么$y_1..y_n&#x3D;x_1..x_n$            $x_{n+1}..x_{32}\oplus x_1..x_{32-n}&#x3D;y_{n+1}..y_{32}$</p><p>可以得到$x_{n+1}..x_{32}&#x3D;y_{n+1}..y_{32}\oplus y_1..y_{32-n}$ 因为n&gt;32-n,所以$y_1..y_{32-n}$是已知的</p><p>所以$x&#x3D;y&gt;&gt;n$</p><p>同理，当<strong>n&lt;32-n</strong> ,情况有所转变</p><p>最后这里无法$y_{n+1}..y_{32}\oplus y_1..y_{32-n}$ 无法一次性完全恢复多轮几次就好了。</p><p>我们可以$x_{n+1}..x_{2n+1}&#x3D;y_{n+1}..y_{32}\oplus y_1..y_{n+1}$ </p><p>我们多进行几次这样的变化就行了。</p><p>逆向代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">def</span> <span class="hljs-title function_">re_right</span>(<span class="hljs-params">self,x,bit,mask=<span class="hljs-number">0xffffffff</span></span>):<br>     tmp=x<br>     <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>//bit):<br>         tmp=x^tmp&gt;&gt;bit&amp;mask<br>     <span class="hljs-keyword">return</span> tmp<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_left</span>(<span class="hljs-params">self,x,bit,mask=<span class="hljs-number">0xffffffff</span></span>):<br>     tmp=x<br>     <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>//bit):<br>         tmp=x^tmp&lt;&lt;bit&amp;mask<br>     <span class="hljs-keyword">return</span> tmp<br></code></pre></td></tr></table></figure><p>这里如果我们只进行正向的预测，就暂时不用反向写一个twist代码了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-keyword">def</span> <span class="hljs-title function_">re_extract</span>(<span class="hljs-params">self,m</span>):<br>        m=<span class="hljs-variable language_">self</span>.re_right(m,<span class="hljs-number">18</span>,<span class="hljs-number">0xffffffff</span>)<br>        m=<span class="hljs-variable language_">self</span>.re_left(m,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>        m=<span class="hljs-variable language_">self</span>.re_left(m,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>        m=<span class="hljs-variable language_">self</span>.re_right(m,<span class="hljs-number">11</span>)<br>        <span class="hljs-keyword">return</span> m&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">re_state</span>(<span class="hljs-params">self,outputs</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(outputs)!=<span class="hljs-number">624</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Invalid number of outputs&quot;</span>)<br><br>        <span class="hljs-variable language_">self</span>.mt=[<span class="hljs-variable language_">self</span>.re_extract(m)<span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> outputs]<br>        <span class="hljs-variable language_">self</span>.mti=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.mt<br>M1=[]<br>M2=[]<br>rng=MT19937(seed=<span class="hljs-number">1123</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1248</span>):<br>    a=rng.extract_number()<br>    <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">624</span>:<br>        M1.append(a)<br>    <span class="hljs-keyword">else</span>:<br>        M2.append(a)<br><span class="hljs-built_in">print</span>(M1)<br><span class="hljs-built_in">print</span>(M2)<br>pre=MT19937()<br>pre.re_state(M1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;预测 RNG:&quot;</span>, [pre.extract_number() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)])<br><br></code></pre></td></tr></table></figure><p>结合上述代码可以很好的预测下一个。不过我们要如果进行恢复前面的数和更精简的操作。便需要逆向twist</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> twist(self):<br>       <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">0</span>, <span class="hljs-number">624</span>):<br>           <span class="hljs-attribute">y</span> = _int32((self.mt[i] &amp; <span class="hljs-number">0</span>x80000000) + (self.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0</span>x7fffffff))<br>           <span class="hljs-attribute">self</span>.mt[i] = (y &gt;&gt; <span class="hljs-number">1</span>) ^ self.mt[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br><br>           <span class="hljs-attribute">if</span> y % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>:<br>               <span class="hljs-attribute">self</span>.mt[i] = self.mt[i] ^ <span class="hljs-number">0</span>x9908b0df<br></code></pre></td></tr></table></figure><p>第一版函数代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_twist</span>(<span class="hljs-params">self,mt</span>):<br>    re_tw=[<span class="hljs-number">0</span>]*<span class="hljs-number">624</span><span class="hljs-comment">#生成列表</span><br>    a=deepcopy(mt[<span class="hljs-number">623</span>])<br>    c=deepcopy(mt[<span class="hljs-number">396</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<span class="hljs-comment">#从大到小遍历，以便twist[(i+397)%624]是符合条件的</span><br>        k=mt[i]^mt[(i+<span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> (k&amp;<span class="hljs-number">0x80000000</span>)&gt;&gt;<span class="hljs-number">31</span>==<span class="hljs-number">1</span>:<span class="hljs-comment">#判断y&gt;&gt;1的第一位</span><br>            k=k^<span class="hljs-number">0x9908b0df</span><br>            low=<span class="hljs-number">1</span><br>            high=(k&amp;<span class="hljs-number">0x40000000</span>)&gt;&gt;<span class="hljs-number">30</span><br>            re_tw[i]=high&lt;&lt;<span class="hljs-number">31</span><br>            re_tw[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>]=re_tw[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>]+((k&amp;<span class="hljs-number">0x3fffffff</span>)&lt;&lt;<span class="hljs-number">1</span>)+low<br>            <span class="hljs-keyword">if</span> i !=<span class="hljs-number">623</span>:<br>                mt[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>]=re_tw[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>]<span class="hljs-comment">#还原正确的依赖</span><br>        <span class="hljs-keyword">elif</span> (k &amp; <span class="hljs-number">0x80000000</span>) &gt;&gt; <span class="hljs-number">31</span> == <span class="hljs-number">0</span>:<br>            low = <span class="hljs-number">0</span><br>            high = (k &amp; <span class="hljs-number">0x40000000</span>) &gt;&gt; <span class="hljs-number">30</span><br>            re_tw[i] = high &lt;&lt; <span class="hljs-number">31</span><br>            re_tw[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] = re_tw[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] + ((k &amp; <span class="hljs-number">0x3fffffff</span>) &lt;&lt; <span class="hljs-number">1</span>) + low<br>            <span class="hljs-keyword">if</span> i != <span class="hljs-number">623</span>:<br>                mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] = re_tw[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>]<br><br>    <span class="hljs-keyword">return</span> re_tw<br></code></pre></td></tr></table></figure><p>这个反转函数，可读性不太好，我们从大到小遍历。</p><p>先将异或mt[(i+397) % 624] (从大到小的很明显的是能够直接利用这个反解，并且每一次循环后都会更改依赖)</p><p>不过这关有个缺陷就是不能还原出mt[0]，</p><blockquote><p>因为最后一个计算mt[0]的时候会自动把re_tw[0]变成re_tw[i]&#x3D;high&lt;&lt;31。</p><p>我恢复出来结果恢复出了它下一个的mt1[0]所以最后我换了一个方法。</p></blockquote><p>比如我们要求mt[i],已知它旋转后mt1[]</p><blockquote><p>我们利用mt1[i]恢复出mt[i]的最高的1位，然后再利用mt1[i-1]恢复出第的31位</p><p>具体恢复过程</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0x7fffffff</span>=<span class="hljs-number">0b01111111111111111111111111111111</span><br><span class="hljs-number">0x80000000</span>=<span class="hljs-number">0b10000000000000000000000000000000</span><br></code></pre></td></tr></table></figure><p>如果这种操作应用给一个规定的32bit的数那么</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">y</span> = _int32((self.mt[i] &amp; <span class="hljs-number">0</span>x80000000) + (self.mt[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0</span>x7fffffff))<br></code></pre></td></tr></table></figure><p>在y等于mt[i]第32Bit 和.mt[(i + 1) % 624]的后31bit之和</p><p>由于都是线性操作，我们先</p><p>k&#x3D;mt[i]^mt[(i+397) % 624]，</p><blockquote><ul><li>如果k与0x9908b0df异或过，那么由于(y&lt;&lt;1)^0x9908b0df&#x3D;k，</li></ul><p>k&lt;&lt;31&#x3D;&#x3D;1。</p><ul><li>如果k没与0x9908b0df异或</li></ul><p>k&lt;&lt;31&#x3D;&#x3D;0</p><p>便能通过y得到我们想要的信息。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_tw1</span>(<span class="hljs-params">mt</span>):<br>    high=<span class="hljs-number">0x80000000</span><br>    low=<span class="hljs-number">0x7fffffff</span><br>    mask=<span class="hljs-number">0x9908b0df</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">623</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        t=mt[i]^mt[(i+<span class="hljs-number">397</span>) % <span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> t&amp;high==high:<br>            t=t^mask<br>            t=t&lt;&lt;<span class="hljs-number">1</span><br>            t|=<span class="hljs-number">1</span><span class="hljs-comment">#确定位奇数</span><br>        <span class="hljs-keyword">else</span>:<br>            t=t&lt;&lt;<span class="hljs-number">1</span><br>        res=t&amp;high <span class="hljs-comment">#取得高位</span><br>        t=mt[i-<span class="hljs-number">1</span>]^mt[(i+<span class="hljs-number">396</span>) % <span class="hljs-number">624</span>]<br>        <span class="hljs-keyword">if</span> t&amp;high==high:<br>            t=t^mask<br>            t=t&lt;&lt;<span class="hljs-number">1</span><br>            t|=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            t=t&lt;&lt;<span class="hljs-number">1</span><br>        res=res+(t&amp;low)<br>        mt[i]=res<br>    <span class="hljs-keyword">return</span> mt<br></code></pre></td></tr></table></figure><p>验证代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    M1 = []<br>    M2 = []<br>    rng = MT19937(seed=<span class="hljs-number">1123</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1248</span>):<br>        a = rng.extract_number()<br>        <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">624</span>:<br>            M1.append(a)<br>        <span class="hljs-keyword">else</span>:<br>            M2.append(a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;M1=<span class="hljs-subst">&#123;M1&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;M2=<span class="hljs-subst">&#123;M2&#125;</span>&#x27;</span>)<br>    pre = MT19937()<br>    m = pre.re_state(M2)<br>    pre.mt=re_tw1(m)<br>    <span class="hljs-built_in">print</span>(pre.mt)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;预测 RNG:&quot;</span>, [pre.extract_number(x=<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)])<br></code></pre></td></tr></table></figure><p>可以跑一下是一样的</p><p>这里的x&#x3D;1是控制是否旋转的，具体翻阅上述源代码。</p><p>[<a href="https://github.com/rockfox0/TM19973/blob/main/MT.py">TM19973&#x2F;MT.py at main · rockfox0&#x2F;TM19973</a>]—这是MT19973的源码和逆向的代码的github链接</p><h2 id="如果是不连续的输出信息"><a href="#如果是不连续的输出信息" class="headerlink" title="如果是不连续的输出信息"></a>如果是不连续的输出信息</h2><p>在一些比较难的梅森旋转的题目中，我们得到的随机数是间断，来自于不同的bit值。在正常情况下，我们如果知道了连续的19937个bit的信息(也就是一轮)，我们恢复之前的和预测之后的是很轻易的。</p><p>因为梅森旋转是线性操作，我们可以利用线性代数的知识来做这个。</p><p>假设已知的数据是b，b可以转化为一个向量。y表示初始的state。y经过M这个矩阵的线性运算可以得到b。</p><p>$ y<em>M&#x3D;b—y&#x3D;b</em>(M)^{-1}$</p><p>我们只需要构造出M表示线性运算的过程。</p><p>举个例子。。在python 代码 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a=getrandombits(t)<br></code></pre></td></tr></table></figure><p>如果t&lt;32，就会先生成正常的一组32bit数，然后把32bit右移16bit。就能得到16bit以内的a。如果我们得到的是一些t&#x3D;20bit的数据想要恢复它，显然用前面直接逆向的方式是不太可行的。我们这是就可以构造矩阵M，利用线性代数的运算表示线性的运算过程。</p><ul><li>我们要先自定义一个随机数生成器的函数，来表示我们生成随机数的方式。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRows</span>(<span class="hljs-params">rng</span>):<br>    row=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        row+=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, (<span class="hljs-built_in">bin</span>(rng.getrandbits(<span class="hljs-number">20</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">20</span>))))<br>    <span class="hljs-keyword">return</span> row<br></code></pre></td></tr></table></figure><p>这里表示就是生成20bit内的随机数然后累加1000个到row上得到的row就是一个有20000个0&#x2F;1数据的列表</p><p>其实我们要求19968Bit的已知数据就够了，不过这里多点也行。</p><ul><li>然后就是构建M线性运算的矩阵,M将初始矩阵变成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">19968</span>)):<br>    state = [<span class="hljs-number">0</span>]*<span class="hljs-number">624</span><br>    temp = <span class="hljs-string">&quot;0&quot;</span>*i + <span class="hljs-string">&quot;1&quot;</span>*<span class="hljs-number">1</span> + <span class="hljs-string">&quot;0&quot;</span>*(<span class="hljs-number">19968</span>-<span class="hljs-number">1</span>-i)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        state[j] = <span class="hljs-built_in">int</span>(temp[<span class="hljs-number">32</span>*j:<span class="hljs-number">32</span>*j+<span class="hljs-number">32</span>],<span class="hljs-number">2</span>)<br>    rng.setstate((<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state+[<span class="hljs-number">624</span>]),<span class="hljs-literal">None</span>)) <br>    M.append(getRows(rng))<br>M=Matrix(GF(<span class="hljs-number">2</span>),M)<br></code></pre></td></tr></table></figure><p>这个生成M线性运算的矩阵代码是不变的可以直接。无论生成随机数是隐藏了哪些部分，这些代码都是不变的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br>n=<span class="hljs-number">1000</span><br>D=[]<span class="hljs-comment">#1000个得到20</span><br>rng=Random()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRows</span>(<span class="hljs-params">rng</span>):<br>    row=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        row+=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, (<span class="hljs-built_in">bin</span>(rng.getrandbits(<span class="hljs-number">20</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">20</span>))))<br>    <span class="hljs-keyword">return</span> row<br>M=[]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">19968</span>)):<br>    state = [<span class="hljs-number">0</span>]*<span class="hljs-number">624</span><br>    temp = <span class="hljs-string">&quot;0&quot;</span>*i + <span class="hljs-string">&quot;1&quot;</span>*<span class="hljs-number">1</span> + <span class="hljs-string">&quot;0&quot;</span>*(<span class="hljs-number">19968</span>-<span class="hljs-number">1</span>-i)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        state[j] = <span class="hljs-built_in">int</span>(temp[<span class="hljs-number">32</span>*j:<span class="hljs-number">32</span>*j+<span class="hljs-number">32</span>],<span class="hljs-number">2</span>)<br>    rng.setstate((<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state+[<span class="hljs-number">624</span>]),<span class="hljs-literal">None</span>)) <br>    M.append(getRows(rng))<br>M=Matrix(GF(<span class="hljs-number">2</span>),M)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;行数:&quot;</span>, M.nrows())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列数:&quot;</span>, M.ncols())<br>r=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    r+=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, (<span class="hljs-built_in">bin</span>(D[i])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">20</span>))))<br>r=vector(GF(<span class="hljs-number">2</span>),r)<br>y=M.solve_left(r)<br>G=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    C=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        C&lt;&lt;=<span class="hljs-number">1</span><br>        C|=<span class="hljs-built_in">int</span>(y[<span class="hljs-number">32</span>*i+j])<br>    G.append(C)<span class="hljs-comment">#将恢复的state转化为每个元素32bit的列表</span><br><span class="hljs-keyword">import</span> random<br>RNG1 = random.Random()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    G[i]=<span class="hljs-built_in">int</span>(G[i])<br>RNG1.setstate((<span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>),<span class="hljs-built_in">tuple</span>(G+[<span class="hljs-built_in">int</span>(<span class="hljs-number">624</span>)]),<span class="hljs-literal">None</span>))<span class="hljs-comment">#将state作为随机数生成器的初始状态，测试生成的state是否正确</span><br>P=[RNG1.getrandbits(<span class="hljs-number">20</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">75</span>)]<br><span class="hljs-built_in">print</span>(P)<br><span class="hljs-built_in">print</span>(D[:<span class="hljs-number">75</span>])<br></code></pre></td></tr></table></figure><p>知道这两个就比较容易了剩下可以看注释</p><ul><li>ps:</li></ul><blockquote><p>多数人的sagemath应该是装在wsl等其他虚拟环境平台上的，因为这个题目比较消耗内存，wsl的内存默认只给6.5G。这个已知20bit的还好，如果未知bit太多消耗内存肯定是不够的。建议把wsl内存上限拉到16G。网上有很多更改教程这里就不说了</p></blockquote><h3 id="tpctf-2025"><a href="#tpctf-2025" class="headerlink" title="tpctf 2025"></a>tpctf 2025</h3><p>接下来可以看看一道tp的ctf题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    flag=f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">64</span>):<br>    <span class="hljs-built_in">print</span>(random.getrandbits(<span class="hljs-number">32</span>)+flag[random.getrandbits(<span class="hljs-number">32</span>)%<span class="hljs-built_in">len</span>(flag)])<br>    <span class="hljs-built_in">input</span>()<br>    <br></code></pre></td></tr></table></figure><p>这里把最后8bit加上了另一个随机数进行了混淆，不过经过测试，加法可能会影响20bit以上甚至更高。不过在10000bit数据以内大多出现20bit以上数据概率比较小。我们这里设置混淆的是末尾24bit并且是间隔获得信息，获取第一个信息后，后一个随机数就被混淆掉了。我们这里可以获得2700组随机的数据</p><p>构建恢复state的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> *<br>n=<span class="hljs-number">2500</span><br>D=[]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(D))<br>rng=Random()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getRows</span>(<span class="hljs-params">rng</span>):<br>    row=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        row+=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, (<span class="hljs-built_in">bin</span>(rng.getrandbits(<span class="hljs-number">32</span>)&gt;&gt;<span class="hljs-number">24</span>)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>))))<br>        _=rng.getrandbits(<span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">return</span> row<br>M=[]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">19968</span>)):<br>    state = [<span class="hljs-number">0</span>]*<span class="hljs-number">624</span><br>    temp = <span class="hljs-string">&quot;0&quot;</span>*i + <span class="hljs-string">&quot;1&quot;</span>*<span class="hljs-number">1</span> + <span class="hljs-string">&quot;0&quot;</span>*(<span class="hljs-number">19968</span>-<span class="hljs-number">1</span>-i)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        state[j] = <span class="hljs-built_in">int</span>(temp[<span class="hljs-number">32</span>*j:<span class="hljs-number">32</span>*j+<span class="hljs-number">32</span>],<span class="hljs-number">2</span>)<br>    rng.setstate((<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state+[<span class="hljs-number">624</span>]),<span class="hljs-literal">None</span>)) <br>    M.append(getRows(rng))<br>M=Matrix(GF(<span class="hljs-number">2</span>),M)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;行数:&quot;</span>, M.nrows())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列数:&quot;</span>, M.ncols())<br>r=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    r+=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, (<span class="hljs-built_in">bin</span>(D[i]&gt;&gt;<span class="hljs-number">24</span>)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>))))<br>r=vector(GF(<span class="hljs-number">2</span>),r)<br>y=M.solve_left(r)<br>G=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    C=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        C&lt;&lt;=<span class="hljs-number">1</span><br>        C|=<span class="hljs-built_in">int</span>(y[<span class="hljs-number">32</span>*i+j])<br>    G.append(C)<span class="hljs-comment">#将恢复的state转化为每个元素32bit的列表</span><br><span class="hljs-keyword">import</span> random<br>RNG1 = random.Random()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    G[i]=<span class="hljs-built_in">int</span>(G[i])<br>RNG1.setstate((<span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>),<span class="hljs-built_in">tuple</span>(G+[<span class="hljs-built_in">int</span>(<span class="hljs-number">624</span>)]),<span class="hljs-literal">None</span>))<span class="hljs-comment">#将state作为随机数生成器的初始状态，测试生成的state是否正确</span><br><br></code></pre></td></tr></table></figure><p>恢复出状态后我们可以得到未被混淆的随机数。我们先可以利用爆破求出flag的长度和flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">G=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    G[i]=<span class="hljs-built_in">int</span>(G[i])<br>RNG1 = Random()<br>RNG1.setstate((<span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>),<span class="hljs-built_in">tuple</span>(G+[<span class="hljs-built_in">int</span>(<span class="hljs-number">624</span>)]),<span class="hljs-literal">None</span>))<br><br>flag=[]<br>ind=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X)):<br>    a = RNG1.getrandbits(<span class="hljs-number">32</span>)<br>    b = RNG1.getrandbits(<span class="hljs-number">32</span>)<br>    f = X[i]-a<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; f &lt; <span class="hljs-number">255</span> :<br>        flag.append(f)<br>        ind.append(b)<br><span class="hljs-keyword">for</span> fl <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(flag)),<span class="hljs-number">50</span>):<span class="hljs-comment">#fl是flag的长度，利用爆破判断长度是否符合条件</span><br>    TN = [i%fl <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ind]<br>    TF = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(fl):<br>        t = TN.index(i)<br>        TF.append(flag[t])<br>    TF =  <span class="hljs-built_in">bytes</span>(TF)<br>    <span class="hljs-keyword">if</span> TF[:<span class="hljs-number">6</span>]==(<span class="hljs-string">b&#x27;TPCTF&#123;&#x27;</span>):<br>       <span class="hljs-built_in">print</span>(TF)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hgame2025-week1 crypto</title>
    <link href="/2025/03/05/hgame%20week1/"/>
    <url>/2025/03/05/hgame%20week1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hgame-week1"><a href="#hgame-week1" class="headerlink" title="hgame week1"></a>hgame week1</h1><h2 id="sieve"><a href="#sieve" class="headerlink" title="sieve"></a>sieve</h2><p>题目代码:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><br>FLAG = <span class="hljs-string">b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span><br>m = bytes_to_long(FLAG)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trick</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-keyword">if</span> k &gt; <span class="hljs-number">1</span>:<br>        mul = prod(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,k)) <br>        <span class="hljs-keyword">if</span> k - mul % k - <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> euler_phi(k) + trick(k-<span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> euler_phi(k) + trick(k-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br>e = <span class="hljs-number">65537</span><br>p = q = nextprime(trick(e^<span class="hljs-number">2</span>//<span class="hljs-number">6</span>)&lt;&lt;<span class="hljs-number">128</span>)<br>n = p * q<br>enc = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;enc=&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#enc=2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546</span><br><br></code></pre></td></tr></table></figure><p>$k - mul (mod  k) - 1 &#x3D;&#x3D; 0$ 这里其实是判断k是否是素数</p><p>根据威尔逊定理:如果p是一个奇素数或P&#x3D;2，那么有</p><p>$(p-1)!&#x3D;-1(mod p)$</p><p>证明:</p><blockquote><p>设x和它的逆元x<sup>-1</sup> 如果他们相等则有<br>$x^2&#x3D;1 mod p—&gt;(x-1)(x+1)&#x3D;0mod p$</p><p>这是x只能等于p-1或1</p></blockquote><blockquote><p>p&#x3D;2时候，显然成立</p><p>p是奇素数时：<br>mul&#x3D;1*2…*(p-2)*(p-1)</p><p>p-1&#x3D;-1(mod p)</p><p>并且对应A&#x3D;0,1,2..,(p-1)是一个完全的剩余系</p><p>从这个完全剩余系里面排除0,1,p-1。得到B&#x3D;2,3,…,p-2</p><p>在B内有偶数个元素，并且都与p互素，并且每两个互逆的元素配对那么</p><p>则有 m&#x3D;2*3*…p-2,m &#x3D;1 mod p</p><p>则$(p-1)!&#x3D;-1(mod p)$</p></blockquote><p>所以这个递归方程最后返回的trick(e^2&#x2F;&#x2F;6)&#x3D;1到p-1所有数的欧拉函数+p以内素数的个数，如果直接强制爆破世界复杂度过高，所以这里我们利用筛法来做。 我自己搞得筛法效率太低了了要一个小时，这里我们分析官方的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::multiprecision;<br><br><span class="hljs-comment">// 使用筛选法计算欧拉函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sieve_euler_phi</span><span class="hljs-params">(cpp_int n, vector&lt;cpp_int&gt;&amp; phi)</span> </span>&#123;<br>    phi.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(n + <span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">for</span> (cpp_int i = <span class="hljs-number">0</span>; i &lt;= n; ++i) &#123;<br>        phi[<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(i)] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (cpp_int i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br><br>        <span class="hljs-keyword">if</span> (phi[<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(i)] == i) &#123; <span class="hljs-comment">// i是质数</span><br>            <span class="hljs-keyword">for</span> (cpp_int j = i; j &lt;= n; j += i) &#123;<br>                phi[<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(j)] = phi[<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(j)] * (i - <span class="hljs-number">1</span>) / i;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">100000000</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 每计算100000个数输出一次进度</span><br><br>            cout &lt;&lt; <span class="hljs-string">&quot;Sieved up to &quot;</span> &lt;&lt; i.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cpp_int n = <span class="hljs-number">715849728</span>; <br>    vector&lt;cpp_int&gt; phi;<br><br>    <span class="hljs-built_in">sieve_euler_phi</span>(n, phi);<br><br>    cpp_int result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (cpp_int i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        result += phi[<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(i)];<br>        <span class="hljs-keyword">if</span> (phi[<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(i)] == i - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// i是质数</span><br>            result += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;Calculated trick(&quot;</span> &lt;&lt; n.<span class="hljs-built_in">str</span>() &lt;&lt; <span class="hljs-string">&quot;): &quot;</span> &lt;&lt; result.<span class="hljs-built_in">str</span>() &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>更简洁的方法我们分开来看,利用了杜教筛</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br>e = <span class="hljs-number">65537</span><br>n=(e * e) // <span class="hljs-number">6</span><br>cache=<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> cache <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    cache=&#123;&#125;<br><span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> cache:<br>    <span class="hljs-built_in">print</span>(cache[n])<br><span class="hljs-keyword">if</span> n&lt;<span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(n,<span class="hljs-string">&#x27;=0&#x27;</span>)<br>pre_max=<span class="hljs-built_in">min</span>(n,<span class="hljs-number">10</span>**<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(pre_max)<br>phi =<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(pre_max+<span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,pre_max+<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> phi[p]==p:<br>        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p,pre_max+<span class="hljs-number">1</span>,p):<br>            phi[m] -= phi[m] // p<span class="hljs-comment">#这里是用于辅助计算，处理小于10**6位时的情况</span><br></code></pre></td></tr></table></figure><h3 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h3><p>这里用到的不算普通的欧拉筛选，而是利用了杜教筛</p><h3 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h3><p>适用于数论中的积性函数（欧拉函数便是一种积性函数）</p><ul><li>积性函数、</li></ul><blockquote><p>若gcd(m,n)&#x3D;1</p><p>f(m*n)&#x3D;f(m)*f(n)，具体的杜教筛复现文章不多解释，我也不是很会Io的这些(我太菜了)</p></blockquote><ul><li>利用证明（还需要了解，繁反演卷积这些，内容太多了，我也不算很会。就知道怎么用吧</li></ul><p>这里贴一篇相关文章<a href="https://www.cnblogs.com/peng-ym/p/9446555.html">杜教筛 - pengym - 博客园</a></p><p>我们便可以得出我们要求的n以内的所有欧拉函数的和$S(n)&#x3D;n(n+1)&#x2F;2-\sum^n_{k&#x3D;2}S([n&#x2F;k])$</p><p>题目代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_euler_phi</span>(<span class="hljs-params">n, cache=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> cache <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        cache = &#123;&#125;<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> cache:<br>        <span class="hljs-keyword">return</span> cache[n]<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 预处理小范围的欧拉函数</span><br>    pre_max = <span class="hljs-built_in">min</span>(n, <span class="hljs-number">10</span>**<span class="hljs-number">6</span>)<br>    phi = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(pre_max + <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, pre_max + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> phi[p] == p:  <span class="hljs-comment"># p是素数</span><br>            <span class="hljs-keyword">for</span> multiple <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p, pre_max + <span class="hljs-number">1</span>, p):<br>                phi[multiple] -= phi[multiple] // p<br>    <span class="hljs-comment"># 计算前缀和</span><br>    s_phi = [<span class="hljs-number">0</span>] * (pre_max + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, pre_max + <span class="hljs-number">1</span>):<br>        s_phi[i] = s_phi[i - <span class="hljs-number">1</span>] + phi[i]<br>    <span class="hljs-comment"># 分块递归处理大范围</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">helper</span>(<span class="hljs-params">n</span>):<br>        a=[]<br>        <span class="hljs-keyword">if</span> n &lt;= pre_max:<br>            <span class="hljs-keyword">return</span> s_phi[n]<br>        res = n * (n + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>        k = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> k &lt;= n:<br>            m = n // k<br>            next_k = n//m  + <span class="hljs-number">1</span><br>            res -= (next_k - k) * helper(m)<br>            k = next_k<br><br>        <span class="hljs-keyword">return</span> res<br>    result = helper(n)<br>    cache[n] = result<br>    <span class="hljs-keyword">return</span> result<br><br>e = <span class="hljs-number">65537</span><br>k = (e * e) // <span class="hljs-number">6</span><br>sum_phi = sum_euler_phi(k)<br>prime_count = primepi(k)<br>trick_value = sum_phi + prime_count<br><br>shifted_value = trick_value &lt;&lt; <span class="hljs-number">128</span><br>p = nextprime(shifted_value)<br>n = p * p  <span class="hljs-comment"># 因为 p = q</span><br>phi = p * (p - <span class="hljs-number">1</span>)<br>d = invert(e, phi)<br>enc = <span class="hljs-number">2449294097474714136530140099784592732766444481665278038069484466665506153967851063209402336025065476172617376546</span><br>m = <span class="hljs-built_in">pow</span>(enc, d, n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m).decode())<br></code></pre></td></tr></table></figure><h3 id="superrsa"><a href="#superrsa" class="headerlink" title="superrsa"></a>superrsa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> prime<br> <br>FLAG=<span class="hljs-string">b&#x27;hgame&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span><br>e=<span class="hljs-number">0x10001</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">primorial</span>(<span class="hljs-params">num</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        result *= prime(i)  <span class="hljs-comment">#取前num个素数相乘</span><br>    <span class="hljs-keyword">return</span> result<br>M=primorial(random.choice([<span class="hljs-number">39</span>,<span class="hljs-number">71</span>,<span class="hljs-number">126</span>]))  <span class="hljs-comment">#39</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        k = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">40</span>))<br>        a = getPrime(random.randint(<span class="hljs-number">20</span>,<span class="hljs-number">60</span>))<br>        p = k * M + <span class="hljs-built_in">pow</span>(e, a, M)<br>        <span class="hljs-keyword">if</span> isPrime(p):<br>            <span class="hljs-keyword">return</span> p<br> <br>p,q=gen_key(),gen_key()<br>n=p*q<br>m=bytes_to_long(FLAG)<br>enc=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n=&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;enc=&#125;</span>&#x27;</span>)<br> <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n=787190064146025392337631797277972559696758830083248285626115725258876808514690830730702705056550628756290183000265129340257928314614351263713241</span><br><span class="hljs-string">enc=365164788284364079752299551355267634718233656769290285760796137651769990253028664857272749598268110892426683253579840758552222893644373690398408</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>这是一道roca的板子题，原理不太理解，套模板吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#p,q=k*M+(65537**a %M)</span><br> <br><span class="hljs-comment"># Hardcoded parameters for efficiency</span><br><span class="hljs-comment"># Found using params.py</span><br>param = \<br>&#123;<br>  <span class="hljs-number">512</span>: &#123;<br>    <span class="hljs-string">&quot;n&quot;</span>: <span class="hljs-number">39</span>,<br>    <span class="hljs-string">&quot;a_max&quot;</span>: <span class="hljs-number">62</span>,<br>    <span class="hljs-string">&quot;k_max&quot;</span>: <span class="hljs-number">37</span>,<br>    <span class="hljs-string">&quot;M&quot;</span>: <span class="hljs-number">0x924cba6ae99dfa084537facc54948df0c23da044d8cabe0edd75bc6</span>,<br>    <span class="hljs-string">&quot;M_prime&quot;</span>: <span class="hljs-number">0x1b3e6c9433a7735fa5fc479ffe4027e13bea</span>,<br>    <span class="hljs-string">&quot;m&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-string">&quot;t&quot;</span>: <span class="hljs-number">6</span>,<br>    <span class="hljs-string">&quot;c_a&quot;</span>: <span class="hljs-number">0x80000</span><br>  &#125;<br>&#125;<br> <br><span class="hljs-comment"># https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coppersmith_howgrave_univariate</span>(<span class="hljs-params">pol, N, beta, mm, tt, XX</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Coppersmith revisited by Howgrave-Graham</span><br><span class="hljs-string">    finds a solution if:</span><br><span class="hljs-string">    * b|N, b &gt;= N^beta , 0 &lt; beta &lt;= 1</span><br><span class="hljs-string">    * |x| &lt; XX</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># init</span><br>    <span class="hljs-comment">#</span><br>    dd = pol.degree()<br>    nn = dd * mm + tt<br> <br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># checks</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-number">0</span> &lt; beta &lt;= <span class="hljs-number">1</span> :<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;beta should belongs in (0, 1]&quot;</span>)<br> <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pol.is_monic():<br>        <span class="hljs-keyword">raise</span> ArithmeticError(<span class="hljs-string">&quot;Polynomial must be monic.&quot;</span>)<br> <br> <br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Coppersmith revisited algo for univariate</span><br>    <span class="hljs-comment">#</span><br> <br>    <span class="hljs-comment"># change ring of pol and x</span><br>    polZ = pol.change_ring(ZZ)<br>    x = polZ.parent().gen()<br> <br>    <span class="hljs-comment"># compute polynomials</span><br>    gg = []<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm):<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(dd):<br>            gg.append((x * XX)**jj * N**(mm - ii) * polZ(x * XX)**ii)<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tt):<br>        gg.append((x * XX)**ii * polZ(x * XX)**mm)<br> <br>    <span class="hljs-comment"># construct lattice B</span><br>    BB = Matrix(ZZ, nn)<br> <br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii+<span class="hljs-number">1</span>):<br>            BB[ii, jj] = gg[ii][jj]<br> <br>    <span class="hljs-comment"># LLL</span><br>    BB = BB.LLL(early_red=<span class="hljs-literal">True</span>, use_siegel=<span class="hljs-literal">True</span>)<br> <br>    <span class="hljs-comment"># transform shortest vector in polynomial</span><br>    new_pol = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        new_pol += x**ii * BB[<span class="hljs-number">0</span>, ii] / XX**ii<br> <br>    <span class="hljs-comment"># factor polynomial</span><br>    potential_roots = new_pol.roots()<br> <br>    <span class="hljs-keyword">return</span> [i[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> potential_roots]<br> <br><span class="hljs-comment"># Top level of the attack, feeds the queue for the workers</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">roca</span>(<span class="hljs-params">N</span>):<br> <br>  <span class="hljs-comment"># Key is not always of perfect size, infer from size</span><br>  keylength = <span class="hljs-built_in">int</span>(log(N, <span class="hljs-number">2</span>))<br>  <span class="hljs-keyword">if</span> keylength &lt; <span class="hljs-number">1000</span> :<br>    keylength = <span class="hljs-number">512</span><br>  <span class="hljs-keyword">elif</span>  keylength &lt; <span class="hljs-number">2000</span> :<br>    keylength = <span class="hljs-number">1024</span><br>  <span class="hljs-keyword">elif</span> keylength &lt; <span class="hljs-number">4000</span> :<br>    keylength = <span class="hljs-number">2048</span><br>  <span class="hljs-keyword">else</span>:<br>    keylength = <span class="hljs-number">4096</span><br> <br>  <span class="hljs-comment"># bruteforce</span><br>  M_prime = param[keylength][<span class="hljs-string">&#x27;M_prime&#x27;</span>]<br>  c_prime = discrete_log(N, Mod(<span class="hljs-number">65537</span>, M_prime))<br>  ord_prime = Zmod(M_prime)(<span class="hljs-number">65537</span>).multiplicative_order()<br>  top = (c_prime + ord_prime)/<span class="hljs-number">2</span><br>  beta = <span class="hljs-number">0.5</span><br>  mm = param[keylength][<span class="hljs-string">&#x27;m&#x27;</span>]<br>  tt = param[keylength][<span class="hljs-string">&#x27;t&#x27;</span>]<br> <br>  XX = <span class="hljs-built_in">int</span>((<span class="hljs-number">2</span>*<span class="hljs-built_in">pow</span>(N, beta)) / M_prime)<br> <br>  <span class="hljs-comment"># Bruteforce until p, q are found</span><br>  a_prime = floor(c_prime/<span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">while</span> a_prime &lt; top:<br> <br>      <span class="hljs-comment"># Construct polynomial</span><br>      m_inv = <span class="hljs-built_in">int</span>(inverse_mod(M_prime, N))<br>      k_tmp = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(<span class="hljs-number">65537</span>, a_prime, M_prime))<br>      known_part_pol = <span class="hljs-built_in">int</span>(k_tmp * m_inv)<br>      F = PolynomialRing(Zmod(N), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>, names=(<span class="hljs-string">&#x27;x&#x27;</span>,))<br>      (x,) = F._first_ngens(<span class="hljs-number">1</span>)<br>      pol = x + known_part_pol<br> <br>      <span class="hljs-comment"># Get roots of polynomial using coppersmith</span><br>      roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)<br> <br>      <span class="hljs-comment"># Check if roots are p, q</span><br>      <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> roots:<br>        factor1 = k_tmp + <span class="hljs-built_in">abs</span>(root) * M_prime<br>        <span class="hljs-keyword">if</span> mod(N, factor1) == <span class="hljs-number">0</span>:<br>          factor2 = N // factor1<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(factor1), <span class="hljs-built_in">int</span>(factor2)<br>      a_prime += <span class="hljs-number">1</span><br> <br> <br> <br>N=<span class="hljs-number">787190064146025392337631797277972559696758830083248285626115725258876808514690830730702705056550628756290183000265129340257928314614351263713241</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;[+] Factoring %i&quot;</span> % N)<br> <br>factor1, factor2 = roca(N)<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;[+] Found factors of N:&quot;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;[+] p =&quot;</span> , factor1)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;[+] q =&quot;</span> , factor2)<br></code></pre></td></tr></table></figure><h3 id="ez-bag"><a href="#ez-bag" class="headerlink" title="ez_bag"></a>ez_bag</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import random<br>import copy<br><span class="hljs-keyword">from</span> Crypto.Util.number import getPrime<br><span class="hljs-keyword">from</span> paramiko.util import bit_length<br><br>L=[]<br>list = []<br>bag = []<br><span class="hljs-attribute">p</span>=getPrime(16)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1):<br>    t = p<br>    a=[getPrime(20) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(16)]<br>    <span class="hljs-attribute">b</span>=0<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-attribute">temp</span>=t%2<br>        b+=temp*j<br>        <span class="hljs-attribute">t</span>=t&gt;&gt;1<br>    <span class="hljs-attribute">A</span>=copy.deepcopy(a)<br>    list.append(a)<br>    L.append(A)<br>    L[i].append(b)<br><br>    bag.append(b)<br><span class="hljs-built_in">print</span>(bin(p))<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;list=&#123;list&#125;&#x27;</span>)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;S=&#123;bag&#125;&#x27;</span>)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;L=&#123;L&#125;&#x27;</span>)<br><span class="hljs-built_in">print</span>(bin(p))<br><span class="hljs-comment"># 这里是我用来生成（多维）子集和的python代码</span><br></code></pre></td></tr></table></figure><p>简单的多维子集和，当时还卡了挺久的不过确实学到很多</p><p>[<a href="https://xz.aliyun.com/news/16929?time__1311=eqUxnDRD0Dg0i=DCYD/Wn+OGzN0QqQrKQ74D&u_atoken=b3c9c0fbbc78a1e94826c0bd7a8d5542&u_asig=0a472f9217412553212422014e0034">文章 - 子集和问题的两种解决方式 - 先知社区</a>]，赛后我写了一篇文章有很清楚的讲解，还有解题代码</p><h1 id="GHctf–rsa-feirema"><a href="#GHctf–rsa-feirema" class="headerlink" title="GHctf–rsa feirema"></a>GHctf–rsa feirema</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> f<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br><br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br>R.&lt;x&gt; = ZZ[]<br>f = R(<span class="hljs-built_in">str</span>(f))<br><br>w = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,f(p),n)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n = &#125;</span>\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;e = &#125;</span>\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c = &#125;</span>\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;f = &#125;</span>\n&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;w = &#125;</span>\n&#x27;</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span><br><span class="hljs-string">f = 2*x^332 - x^331 + x^329 + 3*x^328 - x^327 - 3*x^325 + x^323 - 3*x^322 - x^321 - 3*x^320 + x^319 + 2*x^318 - 4*x^317 - 3*x^315 - 2*x^314 + x^313 + x^312 + 2*x^311 + 2*x^309 + 2*x^308 + 5*x^307 + 2*x^306 + 3*x^305 + 5*x^304 + 4*x^303 + x^302 - x^301 - x^300 - 2*x^299 - 2*x^298 + x^297 + 3*x^296 - x^295 - 4*x^292 - x^290 + 4*x^289 - x^287 - 3*x^286 + x^285 - 2*x^284 + x^283 - x^282 - 2*x^281 + x^280 - 2*x^279 + x^278 + 2*x^277 - 3*x^276 - x^275 - 4*x^274 - 3*x^273 - 5*x^272 - 2*x^271 - 3*x^270 + 2*x^269 + 2*x^268 - x^267 - 2*x^266 + x^265 + x^264 - 3*x^262 - 3*x^259 + 2*x^258 - x^257 + 2*x^256 + 2*x^255 - x^254 - 2*x^253 - x^252 + 2*x^251 - x^250 + x^249 + 2*x^247 + 2*x^246 + 2*x^245 - 2*x^244 - 3*x^243 + 2*x^242 - 3*x^241 - x^240 - 3*x^239 - x^236 - 3*x^235 - 2*x^234 - x^233 - 2*x^232 - x^231 - 3*x^230 - 2*x^229 - 4*x^228 - 2*x^227 - 3*x^226 + 2*x^225 + x^224 - x^223 - 2*x^221 + 3*x^219 - x^217 - 2*x^216 + x^215 + 2*x^213 - x^212 + 3*x^211 + x^210 + 4*x^209 + x^208 - x^206 - x^205 - x^204 + 2*x^203 - 3*x^202 + 2*x^199 - x^198 + 2*x^196 - 2*x^195 + 3*x^194 + 3*x^193 - x^192 + 4*x^191 + 2*x^189 + x^186 - x^185 - x^184 + 3*x^183 + x^182 + 2*x^181 - 2*x^180 + x^177 + x^175 - x^173 + 3*x^172 + x^170 + x^169 - x^167 - 2*x^166 - x^165 - 4*x^164 - 2*x^163 + 2*x^162 + 4*x^161 - 2*x^160 - 3*x^159 - 2*x^158 - 2*x^157 + x^156 - x^155 + 3*x^154 - 4*x^153 + x^151 + 2*x^150 + x^149 - x^148 + 2*x^147 + 3*x^146 + 2*x^145 - 4*x^144 - 4*x^143 + x^142 - 2*x^140 - 2*x^139 + 2*x^138 + 3*x^137 + 3*x^136 + 3*x^135 + x^134 - x^133 + 2*x^132 + 3*x^130 - 3*x^129 - 2*x^128 - x^127 - 2*x^126 + x^125 + x^124 - 2*x^123 + x^122 - x^121 + 3*x^120 - x^119 - 2*x^118 - x^117 - x^116 - 2*x^115 + 2*x^114 + 2*x^113 - 3*x^112 - x^111 - 4*x^110 + x^109 + x^108 + x^106 - 4*x^105 + x^104 - x^103 - x^101 + x^100 - 2*x^99 + x^98 - x^97 + 3*x^96 + 3*x^94 - x^93 - x^92 + x^91 - 2*x^90 + x^89 - x^88 + x^87 - x^86 + x^85 + x^84 - x^83 + x^79 - 3*x^78 - 2*x^77 + x^74 + 3*x^73 - x^72 - 3*x^71 - 2*x^70 + x^69 - 3*x^66 + x^65 + x^64 - 4*x^62 - x^61 + x^60 - x^59 + 3*x^58 - x^57 - x^54 + 3*x^53 + x^51 - 3*x^50 - x^49 + 2*x^47 - x^46 - x^44 + x^43 - x^42 - 4*x^41 - 3*x^39 - x^37 - x^36 - 3*x^35 + x^34 + x^33 - 2*x^32 + 2*x^31 - x^30 + 2*x^29 - 2*x^28 - 2*x^27 - x^24 + x^22 - 5*x^21 + 3*x^20 + 2*x^19 - x^18 + 2*x^17 + x^16 - 2*x^15 - 2*x^14 + x^13 + x^12 + 2*x^11 - 3*x^10 + 3*x^9 + 2*x^8 - 4*x^6 - 2*x^5 - 4*x^4 + x^3 - x^2 - 1</span><br><span class="hljs-string">w = 32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>解题代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span><br>w = <span class="hljs-number">32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span><br><br><span class="hljs-comment"># 定义多项式并计算f(1)</span><br>R.&lt;x&gt; = ZZ[]<br>f = <span class="hljs-number">2</span>*x^<span class="hljs-number">332</span> - x^<span class="hljs-number">331</span> + x^<span class="hljs-number">329</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">328</span> - x^<span class="hljs-number">327</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">325</span> + x^<span class="hljs-number">323</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">322</span> - x^<span class="hljs-number">321</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">320</span> + x^<span class="hljs-number">319</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">318</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">317</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">315</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">314</span> + x^<span class="hljs-number">313</span> + x^<span class="hljs-number">312</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">311</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">309</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">308</span> + <span class="hljs-number">5</span>*x^<span class="hljs-number">307</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">306</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">305</span> + <span class="hljs-number">5</span>*x^<span class="hljs-number">304</span> + <span class="hljs-number">4</span>*x^<span class="hljs-number">303</span> + x^<span class="hljs-number">302</span> - x^<span class="hljs-number">301</span> - x^<span class="hljs-number">300</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">299</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">298</span> + x^<span class="hljs-number">297</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">296</span> - x^<span class="hljs-number">295</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">292</span> - x^<span class="hljs-number">290</span> + <span class="hljs-number">4</span>*x^<span class="hljs-number">289</span> - x^<span class="hljs-number">287</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">286</span> + x^<span class="hljs-number">285</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">284</span> + x^<span class="hljs-number">283</span> - x^<span class="hljs-number">282</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">281</span> + x^<span class="hljs-number">280</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">279</span> + x^<span class="hljs-number">278</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">277</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">276</span> - x^<span class="hljs-number">275</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">274</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">273</span> - <span class="hljs-number">5</span>*x^<span class="hljs-number">272</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">271</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">270</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">269</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">268</span> - x^<span class="hljs-number">267</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">266</span> + x^<span class="hljs-number">265</span> + x^<span class="hljs-number">264</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">262</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">259</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">258</span> - x^<span class="hljs-number">257</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">256</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">255</span> - x^<span class="hljs-number">254</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">253</span> - x^<span class="hljs-number">252</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">251</span> - x^<span class="hljs-number">250</span> + x^<span class="hljs-number">249</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">247</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">246</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">245</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">244</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">243</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">242</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">241</span> - x^<span class="hljs-number">240</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">239</span> - x^<span class="hljs-number">236</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">235</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">234</span> - x^<span class="hljs-number">233</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">232</span> - x^<span class="hljs-number">231</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">230</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">229</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">228</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">227</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">226</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">225</span> + x^<span class="hljs-number">224</span> - x^<span class="hljs-number">223</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">221</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">219</span> - x^<span class="hljs-number">217</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">216</span> + x^<span class="hljs-number">215</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">213</span> - x^<span class="hljs-number">212</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">211</span> + x^<span class="hljs-number">210</span> + <span class="hljs-number">4</span>*x^<span class="hljs-number">209</span> + x^<span class="hljs-number">208</span> - x^<span class="hljs-number">206</span> - x^<span class="hljs-number">205</span> - x^<span class="hljs-number">204</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">203</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">202</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">199</span> - x^<span class="hljs-number">198</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">196</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">195</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">194</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">193</span> - x^<span class="hljs-number">192</span> + <span class="hljs-number">4</span>*x^<span class="hljs-number">191</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">189</span> + x^<span class="hljs-number">186</span> - x^<span class="hljs-number">185</span> - x^<span class="hljs-number">184</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">183</span> + x^<span class="hljs-number">182</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">181</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">180</span> + x^<span class="hljs-number">177</span> + x^<span class="hljs-number">175</span> - x^<span class="hljs-number">173</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">172</span> + x^<span class="hljs-number">170</span> + x^<span class="hljs-number">169</span> - x^<span class="hljs-number">167</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">166</span> - x^<span class="hljs-number">165</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">164</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">163</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">162</span> + <span class="hljs-number">4</span>*x^<span class="hljs-number">161</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">160</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">159</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">158</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">157</span> + x^<span class="hljs-number">156</span> - x^<span class="hljs-number">155</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">154</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">153</span> + x^<span class="hljs-number">151</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">150</span> + x^<span class="hljs-number">149</span> - x^<span class="hljs-number">148</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">147</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">146</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">145</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">144</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">143</span> + x^<span class="hljs-number">142</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">140</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">139</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">138</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">137</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">136</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">135</span> + x^<span class="hljs-number">134</span> - x^<span class="hljs-number">133</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">132</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">130</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">129</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">128</span> - x^<span class="hljs-number">127</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">126</span> + x^<span class="hljs-number">125</span> + x^<span class="hljs-number">124</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">123</span> + x^<span class="hljs-number">122</span> - x^<span class="hljs-number">121</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">120</span> - x^<span class="hljs-number">119</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">118</span> - x^<span class="hljs-number">117</span> - x^<span class="hljs-number">116</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">115</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">114</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">113</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">112</span> - x^<span class="hljs-number">111</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">110</span> + x^<span class="hljs-number">109</span> + x^<span class="hljs-number">108</span> + x^<span class="hljs-number">106</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">105</span> + x^<span class="hljs-number">104</span> - x^<span class="hljs-number">103</span> - x^<span class="hljs-number">101</span> + x^<span class="hljs-number">100</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">99</span> + x^<span class="hljs-number">98</span> - x^<span class="hljs-number">97</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">96</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">94</span> - x^<span class="hljs-number">93</span> - x^<span class="hljs-number">92</span> + x^<span class="hljs-number">91</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">90</span> + x^<span class="hljs-number">89</span> - x^<span class="hljs-number">88</span> + x^<span class="hljs-number">87</span> - x^<span class="hljs-number">86</span> + x^<span class="hljs-number">85</span> + x^<span class="hljs-number">84</span> - x^<span class="hljs-number">83</span> + x^<span class="hljs-number">79</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">78</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">77</span> + x^<span class="hljs-number">74</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">73</span> - x^<span class="hljs-number">72</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">71</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">70</span> + x^<span class="hljs-number">69</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">66</span> + x^<span class="hljs-number">65</span> + x^<span class="hljs-number">64</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">62</span> - x^<span class="hljs-number">61</span> + x^<span class="hljs-number">60</span> - x^<span class="hljs-number">59</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">58</span> - x^<span class="hljs-number">57</span> - x^<span class="hljs-number">54</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">53</span> + x^<span class="hljs-number">51</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">50</span> - x^<span class="hljs-number">49</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">47</span> - x^<span class="hljs-number">46</span> - x^<span class="hljs-number">44</span> + x^<span class="hljs-number">43</span> - x^<span class="hljs-number">42</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">41</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">39</span> - x^<span class="hljs-number">37</span> - x^<span class="hljs-number">36</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">35</span> + x^<span class="hljs-number">34</span> + x^<span class="hljs-number">33</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">32</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">31</span> - x^<span class="hljs-number">30</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">29</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">28</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">27</span> - x^<span class="hljs-number">24</span> + x^<span class="hljs-number">22</span> - <span class="hljs-number">5</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">19</span> - x^<span class="hljs-number">18</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">17</span> + x^<span class="hljs-number">16</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">15</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">14</span> + x^<span class="hljs-number">13</span> + x^<span class="hljs-number">12</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">11</span> - <span class="hljs-number">3</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">3</span>*x^<span class="hljs-number">9</span> + <span class="hljs-number">2</span>*x^<span class="hljs-number">8</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">6</span> - <span class="hljs-number">2</span>*x^<span class="hljs-number">5</span> - <span class="hljs-number">4</span>*x^<span class="hljs-number">4</span> + x^<span class="hljs-number">3</span> - x^<span class="hljs-number">2</span> - <span class="hljs-number">1</span><br><br>k = f(<span class="hljs-number">1</span>)  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;计算得到的k值: <span class="hljs-subst">&#123;k&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 计算2^k mod n（处理负指数）</span><br><span class="hljs-keyword">if</span> k &gt;= <span class="hljs-number">0</span>:<br>    result = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, k, n)<br><span class="hljs-keyword">else</span>:<br>    inv_2 = inverse_mod(<span class="hljs-number">2</span>, n) <br>    result = <span class="hljs-built_in">pow</span>(inv_2, -k, n)<br><br>p = gcd(w - result, n)<br>q = n // p<br><br><span class="hljs-comment"># 计算私钥并解密</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = inverse_mod(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = long_to_bytes(<span class="hljs-built_in">int</span>(m))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;分解得到的素数p: <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;分解得到的素数q: <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密后的Flag: <span class="hljs-subst">&#123;flag.decode()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>原理,    $p^k≡p≡1mod(p-1)$ –&gt; $ f(p)≡f(1) mod(p-1)$</p><p>则有$2^{f(p)}≡2^{f(1)}modp $明显 $2^{f(p)}-2^{f(1)}&#x3D;result$能被p整除，且n&#x3D;p*q所以 p&#x3D;gcd(result,n)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>python</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多维子集和问题</title>
    <link href="/2025/02/23/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81%E5%92%8C%E5%A4%9A%E7%BB%B4%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98(Multidimensional%20Subset%20Sum%20Problem)/"/>
    <url>/2025/02/23/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81%E5%92%8C%E5%A4%9A%E7%BB%B4%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98(Multidimensional%20Subset%20Sum%20Problem)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背包密码和多维子集和问题-Multidimensional-Subset-Sum-Problem。"><a href="#背包密码和多维子集和问题-Multidimensional-Subset-Sum-Problem。" class="headerlink" title="背包密码和多维子集和问题(Multidimensional Subset Sum Problem。)"></a>背包密码和多维子集和问题(<strong>Multidimensional Subset Sum Problem</strong>。)</h1><ul><li>知识:LLL算法，以及BKZ解决方法，还有MITM(中间相遇算法)算法解决。</li></ul><blockquote><p>首发于先知社区 ：<a href="https://xz.aliyun.com/news/16929">子集和问题的两种解决方式-先知社区</a></p></blockquote><h2 id="简单介绍一些这里所称的背包问题，以子集和问题-Subset-Sum-Problem"><a href="#简单介绍一些这里所称的背包问题，以子集和问题-Subset-Sum-Problem" class="headerlink" title="简单介绍一些这里所称的背包问题，以子集和问题(Subset Sum Problem)"></a>简单介绍一些这里所称的背包问题，以子集和问题(Subset Sum Problem)</h2><ul><li>背包问题</li></ul><blockquote><p>$W&#x3D;x_1a_1+x_2a_2+…+xna_n$</p><p>W表示背包的承重，x只能位0或1(这里是0&#x2F;1背包，完全背包感兴趣可以了解这里仅详细阐述0-1背包)，用来表示选中或不选中。</p><p>这种0-1背包问题也叫做子集和问题，给定一个集合，$A&#x3D;{a1,a2,a3…an}$</p><p>它的部分元素的的和等于W，所以叫做子集和。如果不采取任何取巧的方式暴力破解这个问题，实践复杂度位$o(2^n)$,如果n较大这是十分困难的</p></blockquote><h2 id="Merkle–Hellman公钥加密算法（这种加密算法以及不再安全"><a href="#Merkle–Hellman公钥加密算法（这种加密算法以及不再安全" class="headerlink" title="Merkle–Hellman公钥加密算法（这种加密算法以及不再安全)"></a>Merkle–Hellman公钥加密算法（这种加密算法以及不再安全)</h2><ul><li>原理:虽然单纯的背包破解十分复杂，但是如果是超递增背包就能极大降低难度，我们设定初始背包为超递增背包，再利用模数m和乘数w对其进行加密</li></ul><h3 id="超递增背包"><a href="#超递增背包" class="headerlink" title="超递增背包"></a>超递增背包</h3><blockquote><p>超递增背包的性质:设定集合:$A&#x3D;{a1,a2,a3…an}$</p><p>$a_k&gt;2a_{k-1}$ ,生成一个超递增背包并解逆推出用bag加密后的数，因为超递增背包的特性，这是很容易的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;<span class="hljs-keyword">from</span> Crypto.Random.random import randint<br>&gt;<span class="hljs-keyword">from</span> Crypto.Util.number import getPrime, long_to_bytes, bytes_to_long<br><br>&gt;bag=[]<br>&gt;<span class="hljs-attribute">a</span>=getPrime(10)<br>&gt;<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   <span class="hljs-attribute">a</span>=randint(2,5)*a<br>   bag.append(a)<br>   <span class="hljs-keyword">if</span> len(bag)==24:<br>       break<br>&gt;<span class="hljs-built_in">print</span>(bag)<br>&gt;<span class="hljs-attribute">flag</span>=getPrime(24)<br>&gt;<span class="hljs-built_in">print</span>(flag)<br>&gt;<span class="hljs-attribute">a</span>=0<br>&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bag:<br>   <span class="hljs-attribute">f</span>=flag%2<br>   <span class="hljs-attribute">a</span>=a+i*f<br>   <span class="hljs-attribute">flag</span>=flag&gt;&gt;1<br>&gt;<span class="hljs-built_in">print</span>(a)<br>&gt;def reverse_flag(a, bag):<br>   flag = 0<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(bag)):<br>       <span class="hljs-keyword">if</span> a &gt;= bag[24-i-1]:<br>           a -= bag[24-i-1]<br>           flag |= (1 &lt;&lt; (24-i-1))<br>   return flag<br>&gt;<span class="hljs-attribute">F</span>=reverse_flag(a,bag)<br>&gt;<span class="hljs-built_in">print</span>(F)<br></code></pre></td></tr></table></figure><p>接下来进行公钥加密:</p><p>w做乘数，m取模，并且gcd(w,m)&#x3D;1;$m&gt;\sum_{i&#x3D;1}^{n} a_i$</p><p>利用加密后得到$b_i&#x3D;w a$,得到另一个背包$B&#x3D;{b_1,b_2,…,b_n}$</p><p>B就是公钥，我们利用公钥B对信息进行加密</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def reverse_flag(a, bag):<br>    flag = 0<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(bag)):<br>        <span class="hljs-keyword">if</span> a &gt;= bag[24-i-1]:<br>            a -= bag[24-i-1]<br>            flag |= (1 &lt;&lt; (24-i-1))<br>    return flag<br><span class="hljs-attribute">m</span>=663037888222452170426631697<br><span class="hljs-attribute">w</span>=17854050521669203729<br>B=[]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> bag:<br>    b=(w<span class="hljs-number">*a</span>)%m<br>    B.append(b)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;B=&#123;B&#125;&#x27;</span>)<br><span class="hljs-attribute">c</span>=en_f(flag,B)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;c=&#123;c&#125;&#x27;</span>)<br><span class="hljs-comment">#B就表示公钥，用B对消息进行加密</span><br></code></pre></td></tr></table></figure><p>我们如果n很大我们就需要通过对B的每一个数和c乘w_1，然后模m，最后利用上述相同的方法便能恢复flag下面是完整代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Random.random import randint<br><span class="hljs-keyword">from</span> Crypto.Util.number import getPrime, long_to_bytes, bytes_to_long, inverse<br><br>bag=[]<br><span class="hljs-attribute">a</span>=getPrime(10)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-attribute">a</span>=randint(2,5)*a<br>    bag.append(a)<br>    <span class="hljs-keyword">if</span> len(bag)==24:<br>        break<br><span class="hljs-built_in">print</span>(bag)<br><span class="hljs-attribute">flag</span>=getPrime(24)<br><span class="hljs-built_in">print</span>(flag)<br><br>def en_f(flag,bag):<br>    a = 0<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bag:<br>        f = flag % 2<br>        a = a + i * f<br>        flag = flag &gt;&gt; 1<br>    return a<br>def reverse_flag(a, bag):<br>    flag = 0<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(bag)):<br>        <span class="hljs-keyword">if</span> a &gt;= bag[24-i-1]:<br>            a -= bag[24-i-1]<br>            flag |= (1 &lt;&lt; (24-i-1))<br>    return flag<br><span class="hljs-attribute">m</span>=663037888222452170426631697<br><span class="hljs-attribute">w</span>=17854050521669203729<br>B=[]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> bag:<br>    b=(w<span class="hljs-number">*a</span>)%m<br>    B.append(b)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;B=&#123;B&#125;&#x27;</span>)<br><span class="hljs-attribute">c</span>=en_f(flag,B)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;c=&#123;c&#125;&#x27;</span>)<br><span class="hljs-attribute">w_1</span>=inverse(w,m)<br>BAG=[]<br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> B:<br>    <span class="hljs-attribute">a</span>=b*w_1%m<br>    BAG.append(a)<br><span class="hljs-attribute">c</span>=c*w_1%m<br><span class="hljs-attribute">F</span>=reverse_flag(c,BAG)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;F=&#123;F&#125;&#x27;</span>)<br><span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;BAG=&#123;BAG&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>这种加密方式实际上已经不安全了，LLL算法能很轻易的破解背包密码，接下来我们便讲解LLL算法与背包密码</li></ul><h2 id="LLL和LLL-BKZ与子集和问题"><a href="#LLL和LLL-BKZ与子集和问题" class="headerlink" title="LLL和LLL-BKZ与子集和问题"></a>LLL和LLL-BKZ与子集和问题</h2><ul><li>这里所指的0-1背包更多的也被叫做子集和问题，</li></ul><h3 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h3><p>下面我们做一些格的简单介绍以及这里需要用到的应用</p><ul><li>什么是格</li></ul><p>我们定义一组基向量basis,由这组基向量和整数系所构成的所有点就是格。</p><p>例如(1,0)和(0,1)这一组向量就能构建这样的格</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20250220163434-8350b562-ef65-1.webp" alt="img"></p><p>这样就构建了一个普通的格，当然我们遇到的大多数格基当然不会像这么简单。我们在子集和中需要应用到的是找格里面最短向量的办法</p><ul><li>hermite 定理</li></ul><blockquote><p>对应任意n维的格L，都有一个非零向量v属于L，并且</p></blockquote><p>$|v|&lt;&#x3D;\sqrt{n}det(L)^{1&#x2F;n}$</p><p>假设向量v是格L的其中一个向量满足这个定理，并且v和$\sqrt{n}det(L)^{1&#x2F;n}$大小相差不算多，我们可以判定v是最短非零向量。我们在计算LLL相关题目时，如果不满足这个定理，则需要构造。当然这里并不需要</p><p>我们现在可以举例个背包加密的例子</p><p>给出最短向量的上限。</p><p>2024极客大挑战</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;******&#x27;</span><br>m = bytes_to_long(flag)<br><br><span class="hljs-keyword">assert</span> m.bit_length() == <span class="hljs-number">327</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>a = getPrime(<span class="hljs-number">1024</span>)<br>c = getPrime(<span class="hljs-number">400</span>)<br><br>b = (a*m + c) % p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 16979084980432354094619720470840276286258619760418310258927074185970855030192034811294130599976409219799692929847459006262555680679361326852776377401377268595469956168424494543</span><br><span class="hljs-string">b = 87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399</span><br><span class="hljs-string">p = 13172449451206565880103976654678882171806396314446781873576804063136706915381625485522965544955909918869440326004499036629202691608534025007719873521577414908702557726376984665</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>已知a,b,p。</p><p>接下来构造函数</p><blockquote><p>b&#x3D;am+c-kp</p><p>c&#x3D;b+kp-am</p><p>m&#x3D;0+m+0</p><p>1&#x3D;[1,0,0]</p><p>[1,m,k]*[1,0,b&#x2F;&#x2F;0,1,-a&#x2F;&#x2F;0,0,p]&#x3D;[1,m,c]</p><p>如果m和c远远小于a,b,p则[1,m,c]可视为最短向量,通过求出最短向量即可求出m和c。但是这里[1,0,b]不能确定是否一定比[1,m,c]大很多，所以我们可以先尝试构造</p></blockquote><p>这里构造出来，$b-a*m +kp &#x3D; c$<br>$$(1\quad m\quad k )\begin{bmatrix}1&amp;0&amp;b\0&amp;1&amp;-<br>a\0&amp;0&amp;p\end{bmatrix}&#x3D;(1\quad m \quad c)$$<br>$||\mathbf{v}||&#x3D;\sqrt{1+|m|2+|c|2}\approx2^{401}&gt;|p|{1&#x2F;3}&#x3D;2^{341}$<br>补个$2^{200}$<br>|V|&lt;&#x3D;|p|*1&#x2F;3，并且大小接近，但是加了ZZ之后早格的范围变大了一些。</p><p>当然这只是简单的举例，知识为了更方便的理解背包密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>a = <span class="hljs-number">16979084980432354094619720470840276286258619760418310258927074185970855030192034811294130599976409219799692929847459006262555680679361326852776377401377268595469956168424494543</span><br>b = <span class="hljs-number">87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399</span><br>p = <span class="hljs-number">13172449451206565880103976654678882171806396314446781873576804063136706915381625485522965544955909918869440326004499036629202691608534025007719873521577414908702557726376984665</span><br><br><br>M = matrix([[<span class="hljs-number">2</span>^<span class="hljs-number">377</span>,<span class="hljs-number">0</span>, b], [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>, -a],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,p]])<br>L = M.LLL()[<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(long_to_bytes(L[<span class="hljs-number">1</span>]))<br><br><span class="hljs-comment">#b&#x27;SYC&#123;1e989433efffd767589e989ad0f091075c06&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>接下来我们讲述LLL算法在子集和问题的应用，以及怎么破解刚刚的Merkle–Hellman公钥加密算法</p><blockquote><p>$\sum_{i&#x3D;1}^nx_ia_i&#x3D;S$,这是一个典型的子集和问题，现在我们来构造矩阵。</p><p>$v1&#x3D;2,…,a1$,</p><p>$v2&#x3D;2,…,a2$</p><p>$vn&#x3D;2,..,an$</p><p>$v_{n+1}&#x3D;2,…,s$</p><p>来构造一个格,是一个(n+1)(n+1)的矩阵。<br>$$<br>U&#x3D;\begin{bmatrix}<br>2&amp;0&amp;…&amp;0&amp;Na_1\<br>0&amp;2&amp;…&amp;0&amp;Na_2\<br>⋮&amp; &amp;…&amp; &amp;⋮\<br>1&amp;1&amp;…&amp;1&amp;Ns\</p><p>\end{bmatrix}<br>$$<br>$A&#x3D;[x_1,x_2,..,x_n,-1]$</p><p>$A*U&#x3D;B$ ……$B&#x3D;[2x_1-1,2x_2-1,…2x_n-1,0]$</p><p>在一定条件下，我们可以利用这个格解除B然后找出x。这里N按理说是大于$\sqrt{4&#x2F;n}$的数，不过我这里试过直接N&#x3D;1也无所谓</p></blockquote><p>一定的条件，满足格密码的定理，这里我们要求的B就是最短非零向量</p><ul><li>背包的密度</li></ul><p>$d&#x3D;{n\over log_2(max_ia_i)}$  一般来说d&lt;0.9408如果d过大则无法完成计算,当然这里所以ai肯定不能用同时乘以某个数的方式来扩大ai</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> paramiko.util <span class="hljs-keyword">import</span> bit_length<br><br>L=[]<br><span class="hljs-built_in">list</span> = []<br>bag = []<br>p=getPrime(<span class="hljs-number">16</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>):<br>    t = p<br>    a=[getPrime(<span class="hljs-number">20</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    b=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:<br>        temp=t%<span class="hljs-number">2</span><br>        b+=temp*j<br>        t=t&gt;&gt;<span class="hljs-number">1</span><br>    A=copy.deepcopy(a)<br>    <span class="hljs-built_in">list</span>.append(a)<br>    L.append(A)<br>    L[i].append(b)<br><br>    bag.append(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(p))<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;list=<span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;S=<span class="hljs-subst">&#123;bag&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;L=<span class="hljs-subst">&#123;L&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bin</span>(p))<br><span class="hljs-comment"># 这里是我用来生成（多维）子集和的python代码</span><br></code></pre></td></tr></table></figure><p>但是用普通的LLL算法无法做到小于0.9所以后面我们可以用BKZ算法来精确。</p><p>我们先暂时用LLL算法,待会再引申到BKZ</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-built_in">list</span>=[[<span class="hljs-number">657617</span>, <span class="hljs-number">583853</span>, <span class="hljs-number">1042693</span>, <span class="hljs-number">750203</span>, <span class="hljs-number">870173</span>, <span class="hljs-number">796337</span>, <span class="hljs-number">575711</span>, <span class="hljs-number">686359</span>, <span class="hljs-number">549503</span>, <span class="hljs-number">596027</span>, <span class="hljs-number">532981</span>, <span class="hljs-number">694483</span>, <span class="hljs-number">527447</span>, <span class="hljs-number">954991</span>, <span class="hljs-number">1021303</span>, <span class="hljs-number">728369</span>]]<br>S=[<span class="hljs-number">7753890</span>]<br>n = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 确定列数</span><br>N=<span class="hljs-built_in">len</span>(S)<br>L = matrix(QQ, n + <span class="hljs-number">1</span>, n + N)  <br><br><span class="hljs-keyword">for</span> i, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">list</span>):<br>    <span class="hljs-keyword">for</span> row, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>        L[row, row] = <span class="hljs-number">2</span>  <br>        L[row, -(i + <span class="hljs-number">1</span>)] = <span class="hljs-number">5</span> * x  <br><br>L[-<span class="hljs-number">1</span>, :] = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    L[-<span class="hljs-number">1</span>, -i-<span class="hljs-number">1</span>] = <span class="hljs-number">5</span> * S[i]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始矩阵:&quot;</span>)<br><span class="hljs-built_in">print</span>(L)<br><br><br>res = L.LLL()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL 规约后的矩阵:&quot;</span>)<br><span class="hljs-built_in">print</span>(res)<br>l=res[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(l)<br>a=<span class="hljs-number">0</span><br>p=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span>  i <span class="hljs-keyword">in</span> l:<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span>:<br>       p=(<span class="hljs-number">1</span>&lt;&lt;a)+p<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">1</span>:<br>        p=p+<span class="hljs-number">0</span><br>    a=a+<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(p)<br><br></code></pre></td></tr></table></figure><p>这里的$d\approx 4&#x2F;5$ 小于0.9这样可以解出p</p><ul><li>之前 讲的都是单维的子集和，现在讲一讲多维的</li></ul><h3 id="多维子集和"><a href="#多维子集和" class="headerlink" title="多维子集和"></a>多维子集和</h3><p>其实跟单维度区别不大但是计算背包密度d的时候，k表示维度。也就是有几个方程</p><p>$d&#x3D;{n\over k*log_2(max_ia_i)}$</p><p>构造多维子集和的矩阵</p><p>例如有这样几多维矩阵</p><blockquote><p>$s1&#x3D;a_{11}x_1+a_{12}x_2+…+a_{1n}x_n$</p><p>$s2&#x3D;a_{21}x_1+a_{22}x_2+…+a{2n}x_n$</p><p>……….</p><p>$s_m&#x3D;a_{m1}x_1+a_{m2}x_2+…a_{mn}x_n$</p></blockquote><p>我们可以构造如下矩阵<br>$$<br>U&#x3D;\begin{bmatrix}<br>2&amp;0&amp;…&amp;0&amp;Na_{11}&amp;Na_{21}&amp;…&amp;Na_{m1}\<br>0&amp;2&amp;…&amp;0&amp;Na_{12}&amp;Na_{22}&amp;…&amp;Na_{m2}\<br>⋮&amp; &amp;…&amp; ⋮&amp;⋮      &amp;⋮      &amp;…&amp;⋮\<br>1&amp;1&amp;…&amp;1&amp;Ns_1   &amp;NS_2  &amp;…&amp;NS_m\</p><p>\end{bmatrix}<br>$$<br>是一个(n+1)(n+m)的矩阵</p><p>在多维运算时，普通的LLL算法即使在满足背包d的条件下也可能无法计算出x所以这里我们需要用到BKZ算法让它更精确，这里先用sagemath的库直接用，原理或许以后有空写一写</p><ul><li>依然举个例子</li></ul><p>用上面哪那个代码生成一组新的多维子集和</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py">p= <span class="hljs-number">14144071626274053077</span><br><span class="hljs-built_in">list</span>=[[<span class="hljs-number">3733096223</span>, <span class="hljs-number">4016122661</span>, <span class="hljs-number">2604791743</span>, <span class="hljs-number">3803752969</span>, <span class="hljs-number">2811015913</span>, <span class="hljs-number">2424854837</span>, <span class="hljs-number">2699276627</span>, <span class="hljs-number">3166905239</span>, <span class="hljs-number">4019323999</span>, <span class="hljs-number">2343359177</span>, <span class="hljs-number">3992862143</span>, <span class="hljs-number">3785767001</span>, <span class="hljs-number">2586924229</span>, <span class="hljs-number">3070457717</span>, <span class="hljs-number">2310412309</span>, <span class="hljs-number">2592357127</span>, <span class="hljs-number">2366334797</span>, <span class="hljs-number">2962683019</span>, <span class="hljs-number">2805750461</span>, <span class="hljs-number">3539027497</span>, <span class="hljs-number">2625450769</span>, <span class="hljs-number">3336823673</span>, <span class="hljs-number">3642010859</span>, <span class="hljs-number">2889382921</span>, <span class="hljs-number">3049931387</span>, <span class="hljs-number">2602304807</span>, <span class="hljs-number">3568999013</span>, <span class="hljs-number">3896273113</span>, <span class="hljs-number">3525202201</span>, <span class="hljs-number">2911945987</span>, <span class="hljs-number">3053645753</span>, <span class="hljs-number">3516097829</span>, <span class="hljs-number">3325059901</span>, <span class="hljs-number">3973524911</span>, <span class="hljs-number">3228036937</span>, <span class="hljs-number">3902446631</span>, <span class="hljs-number">2519797219</span>, <span class="hljs-number">2554082147</span>, <span class="hljs-number">3545600809</span>, <span class="hljs-number">2970361349</span>, <span class="hljs-number">3746719201</span>, <span class="hljs-number">3902275159</span>, <span class="hljs-number">2826114469</span>, <span class="hljs-number">3210912233</span>, <span class="hljs-number">3456385657</span>, <span class="hljs-number">2818943899</span>, <span class="hljs-number">2768933641</span>, <span class="hljs-number">3729610429</span>, <span class="hljs-number">3468484559</span>, <span class="hljs-number">2822792989</span>, <span class="hljs-number">3173397109</span>, <span class="hljs-number">2476550641</span>, <span class="hljs-number">3205047343</span>, <span class="hljs-number">3556526131</span>, <span class="hljs-number">4186055693</span>, <span class="hljs-number">3610056343</span>, <span class="hljs-number">2793960107</span>, <span class="hljs-number">3004053329</span>, <span class="hljs-number">4291698713</span>, <span class="hljs-number">3258552733</span>, <span class="hljs-number">2510177729</span>, <span class="hljs-number">3530096797</span>, <span class="hljs-number">3269456219</span>, <span class="hljs-number">2600147623</span>], [<span class="hljs-number">3587860039</span>, <span class="hljs-number">3244673137</span>, <span class="hljs-number">4081135321</span>, <span class="hljs-number">3530424101</span>, <span class="hljs-number">3123822853</span>, <span class="hljs-number">4215837937</span>, <span class="hljs-number">2935180159</span>, <span class="hljs-number">3477346757</span>, <span class="hljs-number">3880682317</span>, <span class="hljs-number">3596126549</span>, <span class="hljs-number">3442632797</span>, <span class="hljs-number">2328804859</span>, <span class="hljs-number">3357519169</span>, <span class="hljs-number">3456684767</span>, <span class="hljs-number">2373991303</span>, <span class="hljs-number">3774163111</span>, <span class="hljs-number">2808888127</span>, <span class="hljs-number">2384282179</span>, <span class="hljs-number">3360642323</span>, <span class="hljs-number">2890006079</span>, <span class="hljs-number">3498280733</span>, <span class="hljs-number">4159921411</span>, <span class="hljs-number">2968219733</span>, <span class="hljs-number">2201454251</span>, <span class="hljs-number">2563597627</span>, <span class="hljs-number">2925599561</span>, <span class="hljs-number">3511920007</span>, <span class="hljs-number">3455169373</span>, <span class="hljs-number">4244464129</span>, <span class="hljs-number">2267534219</span>, <span class="hljs-number">3802834417</span>, <span class="hljs-number">3249221947</span>, <span class="hljs-number">3788296273</span>, <span class="hljs-number">3211757309</span>, <span class="hljs-number">3459173929</span>, <span class="hljs-number">2167189499</span>, <span class="hljs-number">4259795633</span>, <span class="hljs-number">3173827273</span>, <span class="hljs-number">3798038071</span>, <span class="hljs-number">2881017599</span>, <span class="hljs-number">2491861231</span>, <span class="hljs-number">3698075663</span>, <span class="hljs-number">2442704783</span>, <span class="hljs-number">2464350851</span>, <span class="hljs-number">2577280613</span>, <span class="hljs-number">3793908917</span>, <span class="hljs-number">3390031453</span>, <span class="hljs-number">2983114619</span>, <span class="hljs-number">3646066681</span>, <span class="hljs-number">3158874871</span>, <span class="hljs-number">4184514839</span>, <span class="hljs-number">3301620067</span>, <span class="hljs-number">2516698291</span>, <span class="hljs-number">2473620133</span>, <span class="hljs-number">2187913543</span>, <span class="hljs-number">2861276653</span>, <span class="hljs-number">3335457143</span>, <span class="hljs-number">4076976949</span>, <span class="hljs-number">4077911921</span>, <span class="hljs-number">2762541787</span>, <span class="hljs-number">2973463733</span>, <span class="hljs-number">2198753783</span>, <span class="hljs-number">3496416383</span>, <span class="hljs-number">2424059459</span>], [<span class="hljs-number">3061838191</span>, <span class="hljs-number">3887444321</span>, <span class="hljs-number">2835006259</span>, <span class="hljs-number">2308551199</span>, <span class="hljs-number">2177389033</span>, <span class="hljs-number">3986307341</span>, <span class="hljs-number">2414267861</span>, <span class="hljs-number">2952804007</span>, <span class="hljs-number">3200321087</span>, <span class="hljs-number">2191758329</span>, <span class="hljs-number">2456777549</span>, <span class="hljs-number">3408679943</span>, <span class="hljs-number">3387498193</span>, <span class="hljs-number">2252571389</span>, <span class="hljs-number">2203638343</span>, <span class="hljs-number">4150893269</span>, <span class="hljs-number">4090387747</span>, <span class="hljs-number">2678251061</span>, <span class="hljs-number">2458844237</span>, <span class="hljs-number">2656259999</span>, <span class="hljs-number">3509519891</span>, <span class="hljs-number">3149747201</span>, <span class="hljs-number">3239724491</span>, <span class="hljs-number">2669248759</span>, <span class="hljs-number">3373027501</span>, <span class="hljs-number">4059007219</span>, <span class="hljs-number">2176826131</span>, <span class="hljs-number">3976102891</span>, <span class="hljs-number">3519556919</span>, <span class="hljs-number">2860631489</span>, <span class="hljs-number">3840588329</span>, <span class="hljs-number">2785908253</span>, <span class="hljs-number">2837499491</span>, <span class="hljs-number">2531399681</span>, <span class="hljs-number">2564265103</span>, <span class="hljs-number">2155431539</span>, <span class="hljs-number">3558134303</span>, <span class="hljs-number">3155722357</span>, <span class="hljs-number">2730822779</span>, <span class="hljs-number">3714250021</span>, <span class="hljs-number">2706880243</span>, <span class="hljs-number">2151311731</span>, <span class="hljs-number">3265319041</span>, <span class="hljs-number">3933743987</span>, <span class="hljs-number">3428310059</span>, <span class="hljs-number">3400800863</span>, <span class="hljs-number">3254316203</span>, <span class="hljs-number">2215699271</span>, <span class="hljs-number">2533362239</span>, <span class="hljs-number">3652131817</span>, <span class="hljs-number">3234801131</span>, <span class="hljs-number">2316545713</span>, <span class="hljs-number">3872326961</span>, <span class="hljs-number">2278496027</span>, <span class="hljs-number">2752640987</span>, <span class="hljs-number">4080627461</span>, <span class="hljs-number">2156282111</span>, <span class="hljs-number">2251944407</span>, <span class="hljs-number">3373404887</span>, <span class="hljs-number">2567296219</span>, <span class="hljs-number">2694349121</span>, <span class="hljs-number">2313219967</span>, <span class="hljs-number">2745218381</span>, <span class="hljs-number">4211643661</span>]]<br>S=[<span class="hljs-number">103031517597</span>, <span class="hljs-number">104870298939</span>, <span class="hljs-number">97387282977</span>]<br>n = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 确定列数</span><br>N=<span class="hljs-built_in">len</span>(S)<br>L = matrix(QQ, n + <span class="hljs-number">1</span>, n + N)  <br><br><span class="hljs-keyword">for</span> i, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">list</span>):<br>    <span class="hljs-keyword">for</span> row, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>        L[row, row] = <span class="hljs-number">2</span>  <br>        L[row, -(i + <span class="hljs-number">1</span>)] = x  <br><br>L[-<span class="hljs-number">1</span>, :] = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    L[-<span class="hljs-number">1</span>, -i-<span class="hljs-number">1</span>] =  S[i]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始矩阵:&quot;</span>)<br><span class="hljs-built_in">print</span>(L)<br><br><br>res = L.BKZ(block_size=<span class="hljs-number">20</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL 规约后的矩阵:&quot;</span>)<br><span class="hljs-built_in">print</span>(res)<br>l=res[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(l)<br>a=<span class="hljs-number">0</span><br>p=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span>  i <span class="hljs-keyword">in</span> l:<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span>:<br>       p=(<span class="hljs-number">1</span>&lt;&lt;a)+p<br>    <span class="hljs-keyword">if</span> i==<span class="hljs-number">1</span>:<br>        p=p+<span class="hljs-number">0</span><br>    a=a+<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(p)<br><br></code></pre></td></tr></table></figure><p>很明显可以发现得到的p是最大的。</p><h3 id="MITM-中间相遇算法"><a href="#MITM-中间相遇算法" class="headerlink" title="MITM(中间相遇算法)"></a>MITM(中间相遇算法)</h3><ul><li>这个算法效率不算高，这个算法的时间复杂度约为$o(2^{n&#x2F;2})$，不过这里可以当作了解，并且MITM算法在d超过1左右时也会失效。</li></ul><p>这个算法也不难，就是把有n个元素的子集和问题分成两部分计算，python示例如下，把要求的P分成两部分掩码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getPrime</span>(<span class="hljs-params">bits</span>):<br>    <span class="hljs-keyword">return</span> sympy.randprime(<span class="hljs-number">2</span> ** (bits - <span class="hljs-number">1</span>), <span class="hljs-number">2</span> ** bits)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_p_and_b</span>():<br>    L = []<br>    <span class="hljs-built_in">list</span> = []<br>    bag = []<br><br>    p = getPrime(<span class="hljs-number">32</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>):<br>        t = p<br>        a = [getPrime(<span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]<br>        b = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:<br>            temp = t % <span class="hljs-number">2</span><br>            b += temp * j<br>            t = t &gt;&gt; <span class="hljs-number">1</span><br>        A = copy.deepcopy(a)<br>        <span class="hljs-built_in">list</span>.append(a)<br>        L.append(A)<br>        L[i].append(b)<br>        bag.append(b)<br><br>    <span class="hljs-keyword">return</span> p, a, b<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MITM</span>(<span class="hljs-params">a, b</span>):<br>    n = <span class="hljs-built_in">len</span>(a)<br>    half = n // <span class="hljs-number">2</span><br><br><br>    left_sums = &#123;&#125;<br>    <span class="hljs-keyword">for</span> bits <span class="hljs-keyword">in</span> product([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], repeat=half):<br>        s = <span class="hljs-built_in">sum</span>(bits[i] * a[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(half))<span class="hljs-comment"># s子集和累加过程</span><br>        left_sums[s] = bits<span class="hljs-comment"># 构建字典键值对对应</span><br><br>    <span class="hljs-keyword">for</span> bits <span class="hljs-keyword">in</span> product([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], repeat=n - half):<br>        s = <span class="hljs-built_in">sum</span>(bits[i] * a[i + half] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - half))<br>        <span class="hljs-keyword">if</span> b - s <span class="hljs-keyword">in</span> left_sums:<span class="hljs-comment">#判断b-s是否唯一上述字典中</span><br>            left_bits = left_sums[b - s]<br>            full_bits = left_bits + bits<br>            p_bits = <span class="hljs-built_in">sum</span>(full_bits[i] &lt;&lt; i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n))<br>            <span class="hljs-keyword">return</span> p_bits<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><br>p, a, b = generate_p_and_b()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br>p1 =MITM(a, b)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;原始 p: <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;重建的 p: <span class="hljs-subst">&#123;p1&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>这里知识演示的一维的，如果是多维的，自行添加约束即可。不过这个算法比较慢，仅作参考</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>coppersmith方法相关</title>
    <link href="/2025/01/23/copper/"/>
    <url>/2025/01/23/copper/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="coppersmith"><a href="#coppersmith" class="headerlink" title="coppersmith"></a>coppersmith</h1><p>原论文<a href="https://www.math.auckland.ac.nz/~sgal018/crypto-book/ch19.pdf">ch19.pdf</a></p><p>借鉴博客：<a href="https://jayxv.github.io/2020/08/13/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bcoppersmith/">https://jayxv.github.io/2020/08/13/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bcoppersmith/</a></p><ul><li>前言</li></ul><p>最近经常遇到coppersmith攻击，所以决定还是有必要深入学习一下</p><h2 id="coppersmith’Method"><a href="#coppersmith’Method" class="headerlink" title="coppersmith’Method"></a>coppersmith’Method</h2><blockquote><p>介绍：coppersmith方法基于格约简和LLL算法来找到一定模数下多项式的小根。其核心思想是将求解模多项式方程的问题转化为一个格中的短向量问题</p></blockquote><blockquote><p>例如F$F(x)&#x3D;x^3+x+123(mod M)$,M&#x3D;77,假设存在x0使得$F(x_0)&#x3D;0$</p><p>并且这个x0小于某个特定值，就可以使用coppersmith算法</p><p>给定模M的多项式$F(x)&#x3D;x^d+a^{d−1}x_{d−1}+⋯+a^1x+a^0$,[必须让$x^d$满足系数为1，可以乘$a_d^{-1}$来配凑。如果ad没有模M逆元，可以拆分为多组。</p><p>假设我们知道$F(x_0)&#x3D;0(mod M)$ ,并且|$x_0$&lt;$M^{1&#x2F;d}$</p><p>假设我们现在能找到G($x_0$)&#x3D;0,不需要取模，我们可以用coppersmith方法把这个F(x)变为G(x)</p></blockquote><p>例如$M&#x3D;17*19&#x3D;323$,$F(x)&#x3D;x^2+33x+215,$,假设一个小根$x_0&#x3D;3$但是在整数</p><p>域下F(3)!&#x3D;0,所以我们要找到G(3)&#x3D;0,</p><blockquote><p>$G(x)&#x3D;9⋅F(x)−M⋅(x+6)&#x3D;9x^2−26x−3$，满足G(3)&#x3D;0,</p><p>这是一元coppersmith的核心思路。</p></blockquote><ul><li>为什么造格能得到较小的G(X)</li></ul><p>设F(x)构造系数矩阵为A,x&#x3D;(x,x,x)</p><p>G(x)系数矩阵,L&#x3D;UA。$A*x&#x3D;(ax+bx+cx)&#x3D;(0)mod(m)$</p><p>$L<em>x&#x3D;U</em>(A<em>X)&#x3D;U</em>(0)&#x3D;0mod(m)$</p><p>依然满足f(x0)&#x3D;0,G(x0)&#x3D;0,mod(m)</p><ul><li>我们现在主要要找x0的界，设X是|x0|的上界</li></ul><p>F(x)可以表示为一个行向量$B_F&#x3D;(a_0,a_1X,a_2X^2,…,a_dX^d)$</p><p>首先我们有F(X),M,B_F,X—-$F(x_0)&#x3D;0(mod M)$</p><p>那么当$|B_F|&lt;M&#x2F;(d+1)^{0.5}$,则有F(x0)&#x3D;0接下来证明它</p><ul><li>引入柯西不等式–1式子</li></ul><p>$(∑^n_{i&#x3D;1}x_iy_i)^2≤(∑^n_{i&#x3D;1}x^2_i)(∑^n_{i&#x3D;1}y^2i)$</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-18-214808.7w6x6ow66y.webp"></p><p>所以$-M&lt;F(x_0)&lt;M$ 且F(x0)&#x3D;0 mod M 所以F(X0)&#x3D;0</p><ul><li>确定边界值X</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-18-215702.5fkorrivy0.webp"></p><p>X为x0取值上界，这!个矩阵$det(L)&#x3D;M^dX^{d(d+1)&#x2F;2}$</p><p>我们可以利用格基规约找到最小的第一行b’,格的部分不多叙述可以参考写的LLL的速通blog</p><p>之后我们可以得到在满足1式子的条件下</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-18-215950.7egvi3oiam.webp"></p><p>可以得到X的大致范围</p><p>示例M&#x3D;10001,多项式$F(x)&#x3D;x^3+10x^2+5000x−222$</p><p>确定$x_0&lt;M^{1&#x2F;6}$,这里省略了相差无几的系数。确定上界为5左右</p><p>我们这是可以构造矩阵然后格基规约。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-18-222154.9nzw1l9ffn.webp"></p><p>第一行便是所需求满足要求的最小$G(x)&#x3D;444+x−20x^2−2x^3$</p><p>接的x0&#x3D;4</p><ul><li>The Full Coppersimth Method</li></ul><p>一个关于提高X大小的方法，有两个方法我们称这种往格里插入的，增加了格的维度而不增加M的多项式为：“x-shift” polynomial，它们是$xF(x),x^2F(x),…,x^kF(x)xF(x)$，显然这些多项式在M下的解也为x0</p><p>针对第二种方案，我们可以利用F(x)F(x)的幂来增加M，因为F(x0)≡0(modM)F，则有$F(x0)^k≡0(modM^ k)$</p><ul><li>另一个定理</li></ul><p>设$0&lt;ϵ&lt;min0.18,1&#x2F;d,F(x)$度为d的首一多项式如果在域下有一个或多个跟x0满足$|x0|&lt;M^{1&#x2F;d-ϵ}$ .那么我们就可以在与d,1&#x2F;ϵ,log(M)相关的多项式时间内找到x0.</p><p>证明有点抽象了论文放这里有空再瞅瞅吧，我直接写下几个脚本用得到的关系式子</p><p>h≈$1\over {dϵ}$ ，dh&#x3D;n表示格的维度。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-22-220410.b902hjivk.webp"></p><ul><li>关于已知p部分信息分解n</li></ul><blockquote><p>设$N&#x3D;p∗q$并且有$p&lt;q&lt;2p$，设$0&lt;ϵ&lt;14$4，如果满足关系：$|p−p′|≤$$$1\over{2\sqrt{2}} $$$$N^{1&#x2F;4−ϵ}$$，那么给定N和p’,我们就可以在与log(N)和1&#x2F;ϵ相关的时间复杂度内分解N。原理证明有点奥了</p></blockquote><p>举例:N&#x3D;16803551，p′&#x3D;2830，X&#x3D;10.</p><blockquote><p>设F(x)&#x3D;(x+p’),N,F(x)，xF(x)&#x3D;(x2+p′x)，x2F(x)</p><p>考虑多项式：N,F(X),xF(x),$x^2F(X)$,然后构造格</p></blockquote><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-23-172218.5c12u1ryzi.webp"></p><p>LLL规约后得到第一行的SVP为（105，-1200，800，1000），去除X&#x3D;10可以得到G(x)&#x3D;x3+8x2−120x+105；解的x&#x3D;7，</p><p>这里的N可以看作kp，把它看作是k∗p也许会好理解些：所选取的多项式带入正解x时均在模p下与0同余</p><h3 id="一些题目-单元coppersmith"><a href="#一些题目-单元coppersmith" class="headerlink" title="一些题目(单元coppersmith)"></a>一些题目(单元coppersmith)</h3><h4 id="已知P高位"><a href="#已知P高位" class="headerlink" title="已知P高位"></a>已知P高位</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long, inverse<br><br>flag=<span class="hljs-string">b&#x27;fox&#123;fox want to eat what&#125;&#x27;</span><br>p=getPrime(<span class="hljs-number">512</span>)<br>p_high=(p&gt;&gt;<span class="hljs-number">200</span>)&lt;&lt;<span class="hljs-number">200</span><br><span class="hljs-built_in">print</span>(p_high)<br>q=getPrime(<span class="hljs-number">512</span>)<br>e=<span class="hljs-number">0b10001</span><br>n=p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br>m=bytes_to_long(flag)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br></code></pre></td></tr></table></figure><p>解密代码，这里引用的beta表示N与p的指数关系在(0.4,0.5）而且一般已知p的信息的比特位数要为p本身比特位数的一般以上调整beta可以增加上限X但是会导致时间复杂度增大，,另外其实还要一个ϵ(epsilon)用来约束多项式的根，一般设置在0.01到0.05的样子，也可以在这个现成的函数中设置，越小约束越严格但是也会影响运算时间</p><p>可以在这个脚本实现源码看看，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>N=<span class="hljs-number">133710312641113123859964440077377533712342702504367787255182846824724010714496099762855320340674761905445770124260476807002239449704342315985473499561372208925050652507764912706096791716888012136098375017749241890296762979638092647971448134034808167719762321413756060356748672986521523183243757912647146630053</span><br>e=<span class="hljs-number">0b10001</span><br>c= <span class="hljs-number">65557915039839389047479107840683903322175662706377407690136936904175441214121027091201698676495252709350177099515464449769710120030105578393734170368995189857074788448412022342701700787139604106626472335713315769690072453661188617266051033715771747892127805257411819414888757977975890254221744212355033949446</span><br><br>p1=<span class="hljs-number">10588155095945660931536816256842811488117167553129301589697663144204701166787360146714639470812049936139282091010528731135222839016760257988792628488962048</span><br>ZmodN = Zmod(N)<br>P.&lt;x&gt;=PolynomialRing(ZmodN)<br>f=p1+x<br>x0=f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">200</span>,beta=<span class="hljs-number">0.4</span>)<br>p=p1+x0[<span class="hljs-number">0</span>]<br>p=<span class="hljs-built_in">int</span>(p)<br>q=N//p<br>h=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse_mod(e,h)<br>m=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,N))<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><ul><li>补充，如果是求低位可以,&#96;&#96;设f&#x3D;p+x*2^kbits,然后f &#x3D; f.monic()化系数为1</li></ul><h4 id="已知d低位"><a href="#已知d低位" class="headerlink" title="已知d低位"></a>已知d低位</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long, inverse<br><br>flag=<span class="hljs-string">b&#x27;fox&#123;fox want to sleep&#125;&#x27;</span><br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>e=<span class="hljs-number">49</span><br>n=p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br>m=bytes_to_long(flag)<br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>d0=d&amp;((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">512</span>)-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d0=&quot;</span>,d0)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br><br></code></pre></td></tr></table></figure><p>已知d的低512位，需要先推导求出p低位然后再利用p低位求法求出p</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-21-214742.2ks0rr9581.webp"></p><p>k必然是小于e的所以()如果e比较小可以用爆破，而且得到的p0不一定就是低位所以需要和n求公约数计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re</span>(<span class="hljs-params">p0,n</span>):<br>    P.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    pb=p0.nbits()<br>    nb=n.nbits()<br>    f = p0 + x*<span class="hljs-number">2</span>^pb<br>    f = f.monic()<br>    r = f.small_roots(X=<span class="hljs-number">2</span>^(nb//<span class="hljs-number">2</span>-pb),beta=<span class="hljs-number">0.4</span>)<br>    <span class="hljs-keyword">if</span> r:<span class="hljs-comment">#不一定是p0所以需要爆破一下</span><br>        x0 = r[<span class="hljs-number">0</span>]<br>        p = gcd(x0*<span class="hljs-number">2</span>^pb + p0, n)<br>        <span class="hljs-keyword">return</span> ZZ(p)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_p0</span>(<span class="hljs-params">d0,e,n</span>):<br>    X=var(<span class="hljs-string">&#x27;X&#x27;</span>)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e+<span class="hljs-number">1</span>):<br>        res=solve_mod([e*d0*X == k*n*X + k*X + X-k*X**<span class="hljs-number">2</span> - k*n],<span class="hljs-number">2</span>^d0.nbits())<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> res:<br>            p0=ZZ(x[<span class="hljs-number">0</span>])<br>            p=re(p0,n)<br>            <span class="hljs-keyword">if</span> p <span class="hljs-keyword">and</span> p!=<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> p<br>e=<span class="hljs-number">49</span><br>n= <span class="hljs-number">109414997218017430689750411358870671148755060537823638639312822690278731526747343386131161374178565377568510541067027291819153801268584631898655552531100229691697272740485676268557392576883083322538380985686287633325507643109809662875001865516112341416350089749503409352233344213405771505339817806009334467873</span><br>d0= <span class="hljs-number">6589907493136215112152812078061957297077302140846480772722502061060417041525745970773308362109848374417314681016788951311262599036142398830169352909596817</span><br>c= <span class="hljs-number">52618099026096173424982985915057984673936322178451784029192431909399153643977616885476290932528093004726036699015260255387007582939696987106414732619027888230272826489001101650428442052309028725473145170506018789419664921530741182296203037987680548988272155176048872109505915948350201120031522636544622010733</span><br>p=re_p0(d0,e,n)<br>q=n//p<br>d=inverse_mod(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br>’‘’<br>一般来说e是素数但是我当时应该是写错了题目脚本但是仍然能跑<br>‘’‘<br></code></pre></td></tr></table></figure><h4 id="已知d高位"><a href="#已知d高位" class="headerlink" title="已知d高位"></a>已知d高位</h4><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> m1<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task1</span>():<br>    e = <span class="hljs-number">149</span><br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p * q<br>    d = inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">pow</span>(m1, e, n), d &gt;&gt; <span class="hljs-number">222</span> &lt;&lt; <span class="hljs-number">222</span>, n)<br>    <br>c1, leak1, n1 = task1()<br><span class="hljs-built_in">print</span>(c1, leak1, n1)<br><span class="hljs-comment"># (89623543982221289730635223555830551523170205418976759060541832483843039074358160566735322009158596405712449020903311144480669706226166537602750967447480664875090686428406188847601970724994074417752345460791736191511081890913041143570455636020205647345764692062144226011846336769477026234106683791286490222089, 138474880017294332349992670187778287774153347391371789199005713563195654993662610111557185709277805165708109047494971468100563949333712521647405765501704478862377527360106399421209690341743821320754482338590671565510629203215009008479290995785318405211007685664887994061938667418220613430135743123498167435264, 146331610798417415036517077006943013321623040860385791423062775325646472298267580898028515394910588437521335092742913111680737790430660749825981979147191282007208147041227246620008377726207734522466015971515317594545750944838673018946440525615131606652748549901880641896940968837669894325535750125282351577689)</span><br><br></code></pre></td></tr></table></figure><p>这里l e a k d &#x3D; d &gt; &gt; 222 &lt; &lt; 222 </p><p>和上面计算低位方法类似但是这里得到到p不一定是p高位，这里的省略之类的不算很明白</p><p>有点抽象了，不太理解这里高位的误差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">full_p</span>(<span class="hljs-params">p_high, n,d_high,bits</span>):<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))    <br>    f = x + p_high<br>    f = f.monic()<br>    roots = f.small_roots(X=<span class="hljs-number">2</span>^(bits + <span class="hljs-number">4</span>), beta=<span class="hljs-number">0.4</span>)  <br>    <span class="hljs-keyword">if</span> roots:<br>        x0 = roots[<span class="hljs-number">0</span>]<br>        p = gcd(x0 + p_high, n)<br>        <span class="hljs-keyword">return</span> ZZ(p)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">p_high</span>(<span class="hljs-params">d_high, e, n,bits</span>):<br>    PR.&lt;X&gt; = PolynomialRing(RealField(<span class="hljs-number">1000</span>))<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, e+<span class="hljs-number">1</span>)):<br>        f=e * d_high * X - (k*n*X + k*X + X-k*X**<span class="hljs-number">2</span> - k*n)<br>        results = f.roots()<br>        <span class="hljs-keyword">if</span> results:<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> results:<br>                p_high = <span class="hljs-built_in">int</span>(x[<span class="hljs-number">0</span>])<br>                p = full_p(p_high, n,d_high,bits)<br>                <span class="hljs-keyword">if</span> p <span class="hljs-keyword">and</span> p != <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> p<br><br><br>c1 = <span class="hljs-number">89623543982221289730635223555830551523170205418976759060541832483843039074358160566735322009158596405712449020903311144480669706226166537602750967447480664875090686428406188847601970724994074417752345460791736191511081890913041143570455636020205647345764692062144226011846336769477026234106683791286490222089</span><br>leak1 = <span class="hljs-number">138474880017294332349992670187778287774153347391371789199005713563195654993662610111557185709277805165708109047494971468100563949333712521647405765501704478862377527360106399421209690341743821320754482338590671565510629203215009008479290995785318405211007685664887994061938667418220613430135743123498167435264</span><br>n1 = <span class="hljs-number">146331610798417415036517077006943013321623040860385791423062775325646472298267580898028515394910588437521335092742913111680737790430660749825981979147191282007208147041227246620008377726207734522466015971515317594545750944838673018946440525615131606652748549901880641896940968837669894325535750125282351577689</span><br>e1 = <span class="hljs-number">149</span><br>p1 = p_high(leak1, e1, n1,<span class="hljs-number">222</span>)<br>q1 = n1 // p1<br>d1 = inverse(e1,(p1 - <span class="hljs-number">1</span>) * (p1 - <span class="hljs-number">1</span>))<br>m1 = <span class="hljs-built_in">pow</span>(c1,<span class="hljs-built_in">int</span>(d1),n1)<br><span class="hljs-built_in">print</span>(m1)<br></code></pre></td></tr></table></figure><h3 id="SU-rsa"><a href="#SU-rsa" class="headerlink" title="SU_rsa"></a>SU_rsa</h3><p>应该算是比较容易分析的简单rsa</p><p>由于给的是d的高位，直接可以用得到k(这算是一种整除，当时确实没想到这种方法，因为n和p,q,k差值过大所以k可以利用整除求出来)<br>$$<br>k&#x3D;(e<em>d_m-1)&#x2F;&#x2F;n + 1<br>$$<br>由标准关系得到<br>$$<br>k</em>(n-p-q+1)+1&#x3D;&#x3D;e*d\<br>(p+q) &#x3D;(n+1+k^{-1})\mod e<br>$$<br>相当于给出了p%e或者q%e的值，e为256bits，显然small_roots求解一下就行。 </p><p>值得注意的是，这里由于取的低位比较小，已知信息比较少，需要爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>d_m =  <span class="hljs-number">54846367460362174332079522877510670032871200032162046677317492493462931044216323394426650814743565762481796045534803612751698364585822047676578654787832771646295054609274740117061370718708622855577527177104905114099420613343527343145928755498638387667064228376160623881856439218281811203793522182599504560128</span><br>n =  <span class="hljs-number">102371500687797342407596664857291734254917985018214775746292433509077140372871717687125679767929573899320192533126974567980143105445007878861163511159294802350697707435107548927953839625147773016776671583898492755338444338394630801056367836711191009369960379855825277626760709076218114602209903833128735441623</span><br>e =  <span class="hljs-number">112238903025225752449505695131644979150784442753977451850362059850426421356123</span><br>k = (e*d_m-<span class="hljs-number">1</span>)//n + <span class="hljs-number">1</span><br>s = (n+<span class="hljs-number">1</span>+inverse_mod(k, e))%e<br>PR.&lt;x&gt; = PolynomialRing(Zmod(e))<br>f = x^<span class="hljs-number">2</span>-s*x+n<br>p0 = <span class="hljs-built_in">int</span>(f.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(p0)<br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">copper_attack</span>(<span class="hljs-params">i</span>):<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    f = e*(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>*x + i) + p0<br>    f = f.monic()<br>    res = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">244</span>, beta=<span class="hljs-number">0.499</span>, epsilon=<span class="hljs-number">0.02</span>)<br>    <span class="hljs-keyword">if</span>(res != []):<br>        t = <span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>])<br>        p = e*(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>*t + i) + p0<br>        q = n // p<br>        <span class="hljs-keyword">assert</span> p * q == n <span class="hljs-keyword">and</span> isPrime(p) <span class="hljs-keyword">and</span> isPrime(q)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;SUCTF&#123;&#x27;</span>,sha256(<span class="hljs-built_in">str</span>(p).encode()).hexdigest()[:<span class="hljs-number">32</span>],<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;SUCTF&#123;&#x27;</span>,sha256(<span class="hljs-built_in">str</span>(q).encode()).hexdigest()[:<span class="hljs-number">32</span>],<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">with</span> multiprocessing.Pool(processes=<span class="hljs-number">16</span>) <span class="hljs-keyword">as</span> pool:<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> tqdm.tqdm(pool.imap(copper_attack, <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>)), total=<span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>)):<br>        <span class="hljs-keyword">if</span>(_):<br>            <span class="hljs-keyword">break</span><span class="hljs-comment">#多线程</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/01/11/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8(PRNG)/"/>
    <url>/2025/01/11/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8(PRNG)/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="伪随机数生成器-PRNG"><a href="#伪随机数生成器-PRNG" class="headerlink" title="伪随机数生成器(PRNG)"></a>伪随机数生成器(PRNG)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随机数生成分为伪随机，真随机。真随机是利用现实中的电子元件噪音来生产的。</p><p>伪随机数：用真随机数生成种子，用伪随机数生成器生成伪随机数位流</p><p>PRNG算法大致分为两类： </p><ul><li><p>专用算法：为生成伪随机位流而专门设计。 </p></li><li><p>基于现有密码算法的算法：密码算法会随机化输入数据。</p><ul><li>对称分组密码、</li><li>哈希函数</li><li>消息验证码</li></ul></li></ul><h2 id="专用算法"><a href="#专用算法" class="headerlink" title="专用算法"></a>专用算法</h2><h3 id="LCG-线性同余生成器"><a href="#LCG-线性同余生成器" class="headerlink" title="LCG(线性同余生成器)"></a>LCG(线性同余生成器)</h3><p>$x_{n+1}&#x3D;(aX_n+b)mod m$</p><blockquote><p>m，是模量，a是乘数，b是增量</p><p>$X_n&#x3D;(a^{-1}(X_{n+1}-b))mod m$</p><p>$a≡(X_{n+1}−b)⋅X_n^{−1}(modM)$或$a &#x3D; (X_{n+2} - X_{n+1})(X_{n+1} - X_n)^{-1} (mod m)$</p><p>$b &#x3D; X_{n+1} - aX_n (mod m)$</p><p>设$t_n &#x3D; X_{n+1}- X_n$<br>$t_n &#x3D; (aX_n+b) - (aX_{n-1}+b) &#x3D; at_{n-1}(mod m)$<br>$t_{n+1}t_{n-1} - t_nt_n &#x3D; (aat_{n-1}t_{n-1} - at_{n-1}at_{n-1}) &#x3D; 0 (mod m)$<br>即$T_n &#x3D; t_n+1t_{n-1} - t_nt_n$是m的倍数，求Tn , Tn-1最大公因数即为m<br>$m &#x3D; gcd((t_{n+1}t_{n-1} - t_nt_n) , (t_nt_{n-2} - t_{n-1}t_{n-1}))$</p></blockquote><h3 id="BBS生成器"><a href="#BBS生成器" class="headerlink" title="BBS生成器"></a>BBS生成器</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>楚慧杯(原题杯)抽象lcg</title>
    <link href="/2025/01/09/z3-LCG/"/>
    <url>/2025/01/09/z3-LCG/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DASCTF-2024楚慧杯原题杯-的一道抽象lcg做题过程"><a href="#DASCTF-2024楚慧杯原题杯-的一道抽象lcg做题过程" class="headerlink" title="DASCTF(2024楚慧杯原题杯)的一道抽象lcg做题过程"></a>DASCTF(2024楚慧杯原题杯)的一道抽象lcg做题过程</h1><h3 id="一些吐槽"><a href="#一些吐槽" class="headerlink" title="一些吐槽"></a>一些吐槽</h3><p>为什么翻遍全网都没有这道题wp，对于真菜的我，手搓有点难泵</p><h3 id="做题过程"><a href="#做题过程" class="headerlink" title="做题过程"></a>做题过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pytho">from Crypto.Util.number import *<br>from random import *<br>from secret import flag<br><br>LENGTH = 512<br>RATIO = 0.02024<br>M = 2**LENGTH<br>a, b, seed = getPrime(LENGTH), getPrime(LENGTH), getPrime(LENGTH)<br>SEED = seed<br><br><br>x = []<br>for i in range(64):<br>    seed = (a*seed + b) % M<br>    x.append(&quot;&quot;.join([bin(seed)[2:].zfill(LENGTH)[i] if uniform(0,1) &lt; RATIO else &quot;*&quot; for i in range(LENGTH)]))<br><br><br>print(&quot;c =&quot;, bytes_to_long(flag) ^ SEED)<br>print(&quot;a =&quot;,a)<br>print(&quot;b =&quot;,b)<br>print(&quot;x =&quot;,x)<br><br></code></pre></td></tr></table></figure><p>尝试模拟一个类似情</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mel">from Crypto.Util.number import *<br>from random import *<br>a = <span class="hljs-number">7048435472566573813031570507837890091364947084306630050544242220147807292350445564322172244244726206563452305566866223414437853917448623276909090327076693</span><br>b = <span class="hljs-number">9204853069421046007176344891235245198607052139715825810823076231566533652655127030214860066312526149219510111657539481375881111759200483396551737326166933</span><br>f=b<span class="hljs-string">&#x27;flag&#123;yoxi_nidi_liangmin&#125;&#x27;</span><br>m=bytes_to_long(f)<br>M=<span class="hljs-number">2</span>**<span class="hljs-number">512</span><br><span class="hljs-keyword">seed</span>=<span class="hljs-number">8656702749867102422219200570484898209691959687594188444284921871713214793286935518322058853234901407306874127174670521978953484935737586264798208150365287</span><br>RATIO=<span class="hljs-number">0.6</span><br>Seed=<span class="hljs-keyword">seed</span><br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">seed</span>)<br>x=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">seed</span> = (a * <span class="hljs-keyword">seed</span> + b) % M<br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">seed</span>)<br>    x.append(<span class="hljs-string">&quot;&quot;</span>.join([bin(<span class="hljs-keyword">seed</span>)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">512</span>)[i] <span class="hljs-keyword">if</span> <span class="hljs-keyword">uniform</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) &lt; RATIO <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">512</span>)]))<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">seed</span>)<br><span class="hljs-keyword">print</span>(x)<br>c=m^Seed<br><span class="hljs-keyword">print</span>(c)<br><br></code></pre></td></tr></table></figure><p>我把显示数据百分比调高了一点，因为测试如果太低就是出现错误结果。这行代码加密逻辑跟原题一样。过程也很简洁</p><p>我们使用z3约束。由于是才学的z3有的，写的时候也有些问题，比如定义</p><p>BitVec向量在转换的时候会出现类型错误。这是改进后的解开上述脚本的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><br>num = [[BitVec(<span class="hljs-string">f&#x27;num[<span class="hljs-subst">&#123;i&#125;</span>,<span class="hljs-subst">&#123;j&#125;</span>]&#x27;</span>, <span class="hljs-number">512</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>a = <br>b = <br>M = <span class="hljs-number">2</span>**<span class="hljs-number">512</span><br><br><br>A = []<br>s=Solver()<br><br><br><br>seed = []<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        <span class="hljs-keyword">if</span> A[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            s.add(Extract(<span class="hljs-number">511</span>-j, <span class="hljs-number">511</span>-j, num[i][<span class="hljs-number">0</span>]) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">elif</span> A[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            s.add(Extract(<span class="hljs-number">511</span>-j, <span class="hljs-number">511</span>-j, num[i][<span class="hljs-number">0</span>]) == <span class="hljs-number">1</span>)<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    s.add(num[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == (a * num[i][<span class="hljs-number">0</span>] + b) % M)<br><br><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    model = s.model()<br>    Seed=model[num[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]]<br></code></pre></td></tr></table></figure><p>接下来看一下题目本身</p><p>64此Lcg递推，得到64个被大部分隐藏的二进制位我们需要求到第一个被递归的再反推出SEED。解密过程看起来还算简单但是，计算也需要时间我的脚本大概算了半个小时。<br>补充</p><blockquote><p>Extract这一部分是定义起始和结束位置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><br>num = [BitVec(<span class="hljs-string">f&#x27;num[<span class="hljs-subst">&#123;i&#125;</span>]&#x27;</span>, <span class="hljs-number">512</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<span class="hljs-comment">#有点像二维数组，是重点得理解一下,512这里是num[i]一个的大小。我们定义j</span><br><br><br>a = <span class="hljs-number">7048435472566573813031570507837890091364947084306630050544242220147807292350445564322172244244726206563452305566866223414437853917448623276909090327076693</span><br>b = <span class="hljs-number">9204853069421046007176344891235245198607052139715825810823076231566533652655127030214860066312526149219510111657539481375881111759200483396551737326166933</span><br>M = <span class="hljs-number">2</span>**<span class="hljs-number">512</span><br>c = <span class="hljs-number">168815802663712138791999335515513916578434659976069633486645257813364375941625207868153496481655635421252190634818222465004994343266249958687663356753760620029589052494330932123212</span><br>A=[]<br><br>s=Solver()<br><br>seed = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>):<br>        <span class="hljs-keyword">if</span> A[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            s.add(Extract(<span class="hljs-number">511</span>-j, <span class="hljs-number">511</span>-j, num[i]) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">elif</span> A[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            s.add(Extract(<span class="hljs-number">511</span>-j, <span class="hljs-number">511</span>-j, num[i]) == <span class="hljs-number">1</span>)<span class="hljs-comment">#定义替换位置</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">63</span>):<br>    s.add(num[i+<span class="hljs-number">1</span>] == (a * num[i] + b) % M)<br><br><span class="hljs-keyword">if</span> s.check() == sat:<br><br>    model = s.model()<br>    Seed=model[num[<span class="hljs-number">0</span>]]<br>    <span class="hljs-built_in">print</span>(Seed)<br>然后<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">3109110488358343346016940967694590460203057088734099480714916540569545873216239855284197469883314735576988812243170940490083088872700634135415701390964362</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>a_1 = <span class="hljs-built_in">pow</span>(a, -<span class="hljs-number">1</span>, M)<br>seed = (a_1 * (Seed - b)) % M<br>m = c ^ seed<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;DASCTF&#123;0n\x85\xb8\xffU_know_th3_polynomial_0F_D47a_you_can_m@ke_Use_of_Leak_bits!&#125;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>z3</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>python</tag>
      
      <tag>Lcg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DSA签名算法</title>
    <link href="/2024/12/29/DSA%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95/"/>
    <url>/2024/12/29/DSA%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DSA签名算法"><a href="#DSA签名算法" class="headerlink" title="DSA签名算法"></a>DSA签名算法</h1><h2 id="DSA算法简介"><a href="#DSA算法简介" class="headerlink" title="DSA算法简介"></a>DSA算法简介</h2><p>DSA（Digital Signature Algorithm）是Schnorr和ElGamal<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95&zhida_source=entity">签名算法</a>的变种，被美国NIST作为DSS(DigitalSignature Standard) 数字签名的标准。</p><p>DSA是一种更高级的验证方式，它是一种<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E7%AE%97%E6%B3%95&zhida_source=entity">公开密钥算法</a>，不能用来加密数据，一般用于数字签名和认证。DSA 不单单只有公钥、私钥，还有数字签名。私钥加密生成数字签名，公钥验证数据及签名。在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性，包括数据的完整性以及数据发送者的身份。如果数据和签名不匹配则认为验证失败！数字签名的作用就是校验数据在传输过程中不被修改。</p><p>DSA数字签名可以理解为是<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86&zhida_source=entity">单向加密</a>的升级，不仅校验数据完整性，还校验发送者身份，同时还由于使用了非对称的密钥来保证密钥的安全，所以相比消息摘要算法更安全。</p><p>DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=1&q=%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2&zhida_source=entity">密钥交换</a>，只用于签名,它比RSA要快很多。</p><h2 id="DSA算法签名的过程"><a href="#DSA算法签名的过程" class="headerlink" title="DSA算法签名的过程"></a>DSA算法签名的过程</h2><ol><li>使用<a href="https://zhida.zhihu.com/search?content_id=165246664&content_type=Article&match_order=2&q=%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95&zhida_source=entity">消息摘要算法</a>（例如sha-256&#x2F;md5)将要发送数据加密生成信息摘要。</li><li>发送方用自己的DSA私钥对信息摘要再加密，形成数字签名。</li><li>将原报文和加密后的数字签名一并通过互联网传给接收方。</li><li>接收方用发送方的公钥对数字签名进行解密，同时对收到的数据用消息摘要算法产生同一信息摘要。</li><li>将解密后的信息摘要和收到的数据在接收方重新加密产生的摘要进行比对校验，如果两者一致，则说明在传送过程中信息没有破坏和篡改；否则，则说明信息已经失去安全性和保密性。</li></ol><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>DSA是证书基于有限域离散对数的难题。</p><ul><li><strong>相关参数</strong></li></ul><p>p:一个素模数，其值满足:$2^ {L-1}&lt;p&lt;2^L,$  L是64的倍数满足512&lt;&#x3D;L&lt;&#x3D;1024</p><p>q:(p-1)的素数因子，其值满足2^159^&lt;p&lt;2^160^ 即q长度为160.</p><p>g:g&#x3D;pow(h,(p-1)&#x2F;q,p).h满足1&lt;h&lt;p-1 的任意整数，从而有pow(h,(p-1)&#x2F;q,p)&gt;1</p><p>x:私钥。x为一个伪随机或随机生成的整数，其值满足0&lt;x&lt;q</p><p>y:公钥。y&#x3D;pow(g,x,p)</p><ul><li><strong>DSA签名过程:</strong></li></ul><ol><li>产生一个随机数k，其值大小满足0&lt;k&lt;q。</li><li>计算r&#x3D;pow(g,k,p) mod p,其值满足r&gt;0</li><li>计算$S&#x3D;（K^{-1}(SHA(M)+x*r))mod q$,其值满足s&gt;0</li></ol><p>$k^{-1}$表示整数k关于某个模的逆元。k在每次签名都重新生成</p><p>sha(M):M的hash值，M为待签名的明文，sha是一个单向散列函数。SHA(M)是一个长为160bites的字符串。</p><p>4。 最终签名是证书对(r,s)，它们和M一起发送到验证方</p><ol start="5"><li>尽管 r 和 s 为 0 的概率相当小，但只要有任何一个为 0 ，必须重新生成 k，并重新计算 r 和 s</li></ol><ul><li><strong>DSA验证签名过程</strong></li></ul><blockquote><p>w&#x3D;s^-1^(mod p);计算u1&#x3D;SHA(M)*w(mod p)</p><p>u2&#x3D;r*w(mod q) </p><p>v&#x3D;(g^u1^y^u2^(mod p))(mod q)</p><p>验证v&#x3D;r</p><p>r&#x3D;pow(g,k,p)(mod q)</p><p>我们要证v&#x3D;r， 只需证明$g^{u1}⋅y^{u2}≡g^k(modp)mod q$</p></blockquote><img src="https://raw.githubusercontent.com/rockfox0/picx-images-hosting/master/dsa1.7lk2cajx72.webp" style="zoom:33%;" /><h2 id="一道关于签名的题"><a href="#一道关于签名的题" class="headerlink" title="一道关于签名的题"></a>一道关于签名的题</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><br>from secret import r<span class="hljs-punctuation">,</span> t<span class="hljs-punctuation">,</span>flag<br>from Crypto.Util.number import *<br><br>flag <span class="hljs-punctuation">=</span> bytes_to_long<span class="hljs-punctuation">(</span>flag.encode<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>e <span class="hljs-punctuation">=</span> <span class="hljs-number">65537</span><br><br>def gen_keys<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">:</span><br>    p <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>    q <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>    phi <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>p<span class="hljs-punctuation">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span>*<span class="hljs-punctuation">(</span>q<span class="hljs-punctuation">-</span><span class="hljs-number">1</span><span class="hljs-punctuation">)</span><br>    d <span class="hljs-punctuation">=</span> inverse<span class="hljs-punctuation">(</span>e<span class="hljs-punctuation">,</span>phi<span class="hljs-punctuation">)</span><br>    n <span class="hljs-punctuation">=</span> p*q<br>    print<span class="hljs-punctuation">(</span>f&#x27;n = &#123;n&#125;&#x27;<span class="hljs-punctuation">)</span><br>    Gensin_imapct <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>d ** <span class="hljs-number">6</span> <span class="hljs-punctuation">+</span> <span class="hljs-number">7</span><span class="hljs-punctuation">)</span> % phi<br>    print<span class="hljs-punctuation">(</span>f&#x27;Gensin_imapct= &#123;Gensin_imapct&#125;&#x27;<span class="hljs-punctuation">)</span><br>    return d<span class="hljs-punctuation">,</span> n<span class="hljs-punctuation">,</span> Gensin_imapct<br><br>def sign_in<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">,</span>d<span class="hljs-punctuation">)</span><span class="hljs-punctuation">:</span><br>    m <span class="hljs-punctuation">=</span> flag * <span class="hljs-built_in">pow</span><span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">,</span>e**<span class="hljs-number">3</span><span class="hljs-punctuation">+</span>d**<span class="hljs-number">4</span><span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">)</span> % n<br>    s <span class="hljs-punctuation">=</span> <span class="hljs-built_in">pow</span><span class="hljs-punctuation">(</span>m<span class="hljs-punctuation">,</span>d**<span class="hljs-number">2</span><span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">)</span><br>    return s<br><br>def clue<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">:</span><br>    assert t &gt; <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>r &gt; <span class="hljs-number">1</span><br>    clue <span class="hljs-punctuation">=</span> <span class="hljs-built_in">pow</span><span class="hljs-punctuation">(</span>r<span class="hljs-punctuation">,</span>t<span class="hljs-punctuation">)</span><span class="hljs-punctuation">+</span><span class="hljs-number">1</span><br>    <span class="hljs-meta">#print(t)</span><br>    print<span class="hljs-punctuation">(</span>isPrime<span class="hljs-punctuation">(</span>clue<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br><br>d<span class="hljs-punctuation">,</span>n<span class="hljs-punctuation">,</span>Gensin_imapct <span class="hljs-punctuation">=</span> gen_keys<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>clue<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><br>sign <span class="hljs-punctuation">=</span> sign_in<span class="hljs-punctuation">(</span>n<span class="hljs-punctuation">,</span>d<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;sign = &#123;sign&#125;&#x27;<span class="hljs-punctuation">)</span><br><br>&#x27;&#x27;&#x27;<br>n = <span class="hljs-number">19639600328223</span><span class="hljs-number">84467170448912</span><span class="hljs-number">35469885019032</span><span class="hljs-number">91473349872361</span><span class="hljs-number">01873374900992</span><span class="hljs-number">35320163949095</span><span class="hljs-number">67762757637482</span><span class="hljs-number">27981733198307</span><span class="hljs-number">18606820715206</span><span class="hljs-number">55098361565285</span><span class="hljs-number">24171541461838</span><span class="hljs-number">07043355911537</span><span class="hljs-number">76055798928550</span><span class="hljs-number">29596256255556</span><span class="hljs-number">09821531659803</span><span class="hljs-number">97579235902710</span><span class="hljs-number">14581030885883</span><span class="hljs-number">83616253063214</span><span class="hljs-number">88259768221057</span><span class="hljs-number">35233257594943</span><span class="hljs-number">49507721269702</span><span class="hljs-number">11685369981876</span><span class="hljs-number">61347072502855</span><span class="hljs-number">83246543964703</span><span class="hljs-number">04051821380286</span><span class="hljs-number">34998049047122</span><span class="hljs-number">05450221890639</span><span class="hljs-number">94727777531050</span><span class="hljs-number">92338755867733</span><span class="hljs-number">86805066295473</span><span class="hljs-number">93515821317364</span><span class="hljs-number">70784436503385</span><span class="hljs-number">51391338657593</span><span class="hljs-number">55286813851518</span><span class="hljs-number">29489714323857</span><span class="hljs-number">99295497313102</span><span class="hljs-number">23985355362071</span><span class="hljs-number">60512827633675</span><span class="hljs-number">81487024513259</span><span class="hljs-number">80353936486982</span><span class="hljs-number">95761231935673</span><span class="hljs-number">28112121558438</span><span class="hljs-number">88427077650287</span><span class="hljs-number">47574728595160</span>1<br>Gensin_imapct= <span class="hljs-number">18615555428360</span><span class="hljs-number">73720385848311</span><span class="hljs-number">97613798031066</span><span class="hljs-number">44123408751679</span><span class="hljs-number">93935871527101</span><span class="hljs-number">93226223071624</span><span class="hljs-number">05939351971133</span><span class="hljs-number">49434361718733</span><span class="hljs-number">61429064747281</span><span class="hljs-number">42088496643169</span><span class="hljs-number">39425060989161</span><span class="hljs-number">84658671434281</span><span class="hljs-number">66101133715080</span><span class="hljs-number">08672890560522</span><span class="hljs-number">58234178266565</span><span class="hljs-number">87225513551367</span><span class="hljs-number">39429001353366</span><span class="hljs-number">55190422227648</span><span class="hljs-number">01563252344045</span><span class="hljs-number">26317511663378</span><span class="hljs-number">66573505541269</span><span class="hljs-number">06044647802447</span><span class="hljs-number">91115016937996</span><span class="hljs-number">85793286356164</span><span class="hljs-number">55291791600544</span><span class="hljs-number">04011586231897</span><span class="hljs-number">77493819354020</span><span class="hljs-number">23854289083858</span><span class="hljs-number">69456073212978</span><span class="hljs-number">84481858791649</span><span class="hljs-number">09390679473356</span><span class="hljs-number">53489678909744</span><span class="hljs-number">38067150657024</span><span class="hljs-number">02663094294822</span><span class="hljs-number">60023169901634</span><span class="hljs-number">43409951591975</span><span class="hljs-number">84811683173565</span><span class="hljs-number">57541315705141</span><span class="hljs-number">19138583237472</span><span class="hljs-number">95630124277461</span><span class="hljs-number">05236672734074</span><span class="hljs-number">08969327099398</span><span class="hljs-number">98865571387315</span><span class="hljs-number">26292041808679</span>6<br>1<br>sign = <span class="hljs-number">18261288204538</span><span class="hljs-number">98118157203048</span><span class="hljs-number">27597984265847</span><span class="hljs-number">90136542118628</span><span class="hljs-number">59672989593212</span><span class="hljs-number">17958474429167</span><span class="hljs-number">05403582815245</span><span class="hljs-number">84790036056298</span><span class="hljs-number">52836449001592</span><span class="hljs-number">84591973184497</span><span class="hljs-number">64410933317169</span><span class="hljs-number">82897124114044</span><span class="hljs-number">41725787627481</span><span class="hljs-number">26221751595280</span><span class="hljs-number">43832658613950</span><span class="hljs-number">76527124697355</span><span class="hljs-number">90424448908497</span><span class="hljs-number">68659898808439</span><span class="hljs-number">29716655444342</span><span class="hljs-number">66745079347402</span><span class="hljs-number">89112385815614</span><span class="hljs-number">97418112019001</span><span class="hljs-number">37134278753663</span><span class="hljs-number">90061291630074</span><span class="hljs-number">54921434977528</span><span class="hljs-number">44144796958648</span><span class="hljs-number">14381738638647</span><span class="hljs-number">29524626228931</span><span class="hljs-number">57776771994548</span><span class="hljs-number">62423889409624</span><span class="hljs-number">27531910977068</span><span class="hljs-number">38634387659596</span><span class="hljs-number">60041452765723</span><span class="hljs-number">20724583981474</span><span class="hljs-number">33491427033501</span><span class="hljs-number">64863896170184</span><span class="hljs-number">40139421924715</span><span class="hljs-number">45946760153334</span><span class="hljs-number">90120458473155</span><span class="hljs-number">24603087767378</span><span class="hljs-number">61250198418837</span><span class="hljs-number">67276980680906</span><span class="hljs-number">18376138788002</span><span class="hljs-number">60718292723081</span>1<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><blockquote><p>欧拉定理的应用。</p><p>如果a&#x3D;b mod(ϕ(n))</p><p>那么r^a&#x3D;r^b(mod n)</p><p>关于r，因为r&gt;1。r^t+1为素数</p><p>当t&#x3D;1时，r&#x3D;一个素数-1有无数中情况</p><p>当t!&#x3D;1，r^t^+1&#x3D;(r-1)(r^t-1^+r^t-2^+…+r-1)。r&gt;1，仅当r&#x3D;2时r-1&#x3D;1，才可能出现r^t^+1为质数。</p><p>sign&#x3D;flag^d2^*pow(r,e^3^+d^6^,n)(mod n)</p><p>利用欧拉定理化简，ed&#x3D;1mod(ϕ(n))</p><p>sign&#x3D;flag^d2^*pow(r,e+Gensin_imapct-7,n)mod(n)</p><p>解题代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">from Crypto.Util.number import long_to_bytes, inverse</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">n = 19639600328223844671704489123546988501903291473349872361018733749009923532016394909567762757637482279817331983071860682071520655098361565285241715414618380704335591153776055798928550295962562555560982153165980397579235902710145810308858838361625306321488259768221057352332575949434950772126970211685369981876613470725028558324654396470304051821380286349980490471220545022189063994727777531050923387558677338680506629547393515821317364707844365033855139133865759355286813851518294897143238579929549731310223985355362071605128276336758148702451325980353936486982957612319356732811212155843888427077650287475747285951601</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">Gensin_imapct= 18615555428360737203858483119761379803106644123408751679939358715271019322622307162405939351971133494343617187336142906474728142088496643169394250609891618465867143428166101133715080086728905605225823417826656587225513551367394290013533665519042222764801563252344045263175116633786657350554126906044647802447911150169379968579328635616455291791600544040115862318977749381935402023854289083858694560732129788448185879164909390679473356534896789097443806715065702402663094294822600231699016344340995159197584811683173565575413157051411913858323747295630124277461052366727340740896932709939898865571387315262920418086796</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">r=2</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">e=65537</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">sign = 18261288204538981181572030482759798426584790136542118628596729895932121795847442916705403582815245847900360562985283644900159284591973184497644109333171698289712411404441725787627481262217515952804383265861395076527124697355904244489084976865989880843929716655444342667450793474028911238581561497418112019001371342787536639006129163007454921434977528441447969586481438173863864729524626228931577767719945486242388940962427531910977068386343876595966004145276572320724583981474334914270335016486389617018440139421924715459467601533349012045847315524603087767378612501984188376727698068090618376138788002607182927230811</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">flagd2=sign*inverse(pow(r,e+Gensin_imapct-7,n),n)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">flag=pow(flagd2,e**2,n)</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">print</span>(long_to_bytes(flag))</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-string">b&#x27;</span>SYC&#123;G0od_Math_h3lps_S1gnature_in_RSA&#125;<span class="hljs-string">&#x27;</span></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span></span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA维纳攻击及其扩展</title>
    <link href="/2024/12/29/RSA-wiener/"/>
    <url>/2024/12/29/RSA-wiener/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RSA两种特殊攻击情况"><a href="#RSA两种特殊攻击情况" class="headerlink" title="RSA两种特殊攻击情况"></a>RSA两种特殊攻击情况</h1><h2 id="P和q的不当分解"><a href="#P和q的不当分解" class="headerlink" title="P和q的不当分解"></a>P和q的不当分解</h2><p><strong>|p-q|很大</strong>时，一定存在某个参数ip较小，这里我们假设p较小我们可以通过穷举法分解模数，但是很少遇到</p><ul><li><p>如果两个质数差距很小（即 <code>q - p</code> 很小），那么：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">n = p * q = (<span class="hljs-keyword">a</span> - b)(<span class="hljs-keyword">a</span> + b) = <span class="hljs-keyword">a</span>^<span class="hljs-number">2</span> - b^<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>推导过程如下：</p><ul><li>令：<code>a = (p + q) / 2</code>，<code>b = (q - p) / 2</code></li><li>则：<code>n = a^2 - b^2</code></li><li>所以我们可以从 <code>a = ⌈√n⌉</code> 开始，不断尝试 <code>b^2 = a^2 - n</code> 是否是<strong>完全平方数</strong></li><li>如果找到了某个 <code>a</code> 使得 <code>b^2 = a^2 - n</code> 是完全平方数，就能还原 <code>p = a - b, q = a + b</code></li></ul></li></ul><p>举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 生成 p 和 q</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = gmpy2.next_prime(p, p + <span class="hljs-number">10000</span>) <span class="hljs-comment">#这个数的下一个素数在某个范围内。</span><br>n = p * q<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor</span>(<span class="hljs-params">n</span>):<br>    a = gmpy2.iroot(n, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment">#a可以看作p+q</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a+=<span class="hljs-number">1</span><br>        b2 = a * a - n  <span class="hljs-comment">#</span><br><br>        <span class="hljs-keyword">if</span> gmpy2.is_square(b2):<span class="hljs-comment">#判断b2是否是全平方</span><br>            b2 = gmpy2.mpz(b2)  <span class="hljs-comment"># 转换为大整数</span><br>            b, xflag = gmpy2.iroot(b2, <span class="hljs-number">2</span>) <span class="hljs-comment">#返回元组</span><br>            <span class="hljs-keyword">assert</span> xflag  <span class="hljs-comment"># 如果能平方返回True</span><br>            <span class="hljs-keyword">return</span> (a - b, a + b)<br><br><span class="hljs-built_in">print</span>(factor(n))<br><br></code></pre></td></tr></table></figure><p>一个变式题目:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">5</span>]==<span class="hljs-string">b&#x27;flag&#123;&#x27;</span><br>​<br>m1 = bytes_to_long(flag[:<span class="hljs-number">20</span>])<br>p  = getPrime(<span class="hljs-number">512</span>)<br>p1 = gmpy2.next_prime(p)<br>q  = getPrime(<span class="hljs-number">512</span>)<br>q1 = gmpy2.next_prime(q)<br>n1 = p*q*p1*q1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n1 =&#x27;</span>,n1)<br>e = <span class="hljs-number">0x10001</span><br>c1 = <span class="hljs-built_in">pow</span>(m1,e,n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c1 =&#x27;</span>,c1)<br>​<br></code></pre></td></tr></table></figure><p>这里有n&#x3D;四个素数因子乘积</p><p>上述可以分为两种。。(p,q)(p1,q1)…(p,q1)(p1,q)这两组每组两个元素乘积相近，可以利用费马分解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, inverse, long_to_bytes<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> pywin.Demos.cmdserver <span class="hljs-keyword">import</span> flags<br><span class="hljs-keyword">from</span> scipy.signal <span class="hljs-keyword">import</span> qspline1d<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> factor_list<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor</span>(<span class="hljs-params">n</span>):<br>    a = gmpy2.iroot(n, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment">#a可以看作p+q</span><br>    factor_list = []<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a+=<span class="hljs-number">1</span><br>        b2 = a * a - n  <span class="hljs-comment">#</span><br><br>        <span class="hljs-comment"># 如果 b^2 是一个完全平方数</span><br>        <span class="hljs-keyword">if</span> gmpy2.is_square(b2):<br>            b2 = gmpy2.mpz(b2)  <span class="hljs-comment"># 转换为大整数</span><br>            b, xflag = gmpy2.iroot(b2, <span class="hljs-number">2</span>) <span class="hljs-comment">#返回元组</span><br>            <span class="hljs-keyword">assert</span> xflag<span class="hljs-comment"># 如果能平方返回True</span><br>            factor_list.append([a + b, a - b])<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(factor_list) == <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">return</span> factor_list<br>e = <span class="hljs-number">0x10001</span><br>c1 = <span class="hljs-number">6201882078995455673376327652982610102807874783073703018551044780440620679217833227711395689114659144506630609087600915116940111002026241056808189658969089532597757995423694966667948250438579639890580690392400661711864264184444018345499567505424672090632235109624193289954785503512742400960515331371813467034511130432319427185134018830006918682733848618201088649690422818940385123599468595766345668931882249779415788129316594083269412221804774856038796248038700275509397599351533280014908894068141056694660319816046357462684688942519849441237878018480036145051967731081582598773076490918572392784684372694103015244826</span><br>n = <span class="hljs-number">6348779979606280884589422188738902470575876294643492831465947360363568026280963989291591157710389629216109615274754718329987990551836115660879103234129921943824061416396264358110216047994331119920503431491509529604742468032906950984256964560405062345280120526771439940278606226153077959057882262745273394986607004406770035459301695806378598890589432538916219821477777021460189140081521779103226953544426441823244765828342973086422949017937701261348963541035128661464068769033772390320426795044617751909787914185985911277628404632533530390761257251552073493697518547350246993679844132297414094727147161169548160586911</span><br>factor_list=factor(n)<br>X1,Y1=factor_list[<span class="hljs-number">0</span>]<br>X2,Y2=factor_list[<span class="hljs-number">1</span>]<br>p=gcd(X1,X2)<br>p1=gcd(Y1,Y2)<br>q=X1//p<br>q1=Y1//p1<br>Phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(p1-<span class="hljs-number">1</span>)* (q1-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q1=&quot;</span>,q1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1&quot;</span>,p1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Phi=&quot;</span>,Phi)<br><br>d = inverse(e, Phi)<br>flag=<span class="hljs-built_in">pow</span>(c1,d,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag=&quot;</span>,long_to_bytes(flag),<span class="hljs-string">&quot;&#125;&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">flag= b&#x27;flag&#123;Euler_funct1ons&#x27; &#125;&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>私钥d&lt;1&#x2F;3N^1&#x2F;4^,选择较大的公钥e，用*e* ′代替*e*，其中*e* ′ &#x3D; *e* + *k* ⋅ *λ* ( *N* )，*k*为某个较大的数。当*e* ′ 足够大时，即*e* ′ &gt; <em>N</em> 3&#x2F;2 <em>，则无论d</em>有多小，都无法实施维纳攻击。假设p与q二进制长度相等即p&lt;q&lt;2p，可以得到p+q&lt;3p&lt;3(n)^0.5^</p><p>欧拉函数φ(N)&#x3D;N-p-q+1 满足N-3(N)^0.5^&lt;φ(N)&lt;N</p><ul><li>基于定理</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/wiener.99tfjay02x.webp"></p><h3 id="维纳攻击-1"><a href="#维纳攻击-1" class="headerlink" title="维纳攻击"></a>维纳攻击</h3><blockquote></blockquote><h3 id="维纳的方法"><a href="#维纳的方法" class="headerlink" title="维纳的方法"></a>维纳的方法</h3><blockquote><p>ed&#x3D;1+k*φ(N)</p><p>|$e\over φ(N) $-$k\over d$|&#x3D;$1 \over d*φ(n)$</p><p>φ(N)约等于N,K&#x2F;d约等于e&#x2F;—&gt;|$e\over N$-$k\over d$|&#x3D;|$k(p+q-1)-1\over Nd$|</p><p>要使上述式子&lt;1&#x2F;(2d^2^) </p><p>p+q&lt;3(N)^0.5^,0&lt;K&lt;d可以推断，|$e\over N$-$k\over d$|&lt;3&#x2F;N)^0.5^</p><p>所以d&lt;3&#x2F;(n)^0.25^</p></blockquote><blockquote><p><em>e<strong>d</strong>g</em>&#x3D;<em>k</em>(<em>p</em>−1)(<em>q</em>−1)+<em>g</em>,<em>k</em>&gt;<em>g</em></p><p>同时除以k，k&#x2F;g&lt;1可以忽略</p><p>⌊<em>k<strong>e</strong>d**g</em>⌋&#x3D;(<em>p</em>−1)(<em>q</em>−1)</p><p>(<em>pq</em>−(<em>p</em>−1)(<em>q</em>−1)+1)&#x2F;2&#x3D;(p+q)&#x2F;2</p><p>($(p+q)\over 2$)^2^-pq&#x3D;($p-q\over 2$)^2^ #可以用这个判断连分数收敛是否为所需的k&#x2F;(dg)</p></blockquote><p>例题sagemath上的连分数扩展函数实现更便捷</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">possible</span>(<span class="hljs-params">e,alist,N</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> alist:<br>        <span class="hljs-keyword">if</span> x==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi=(e*x.denominator()-<span class="hljs-number">1</span>)//x.numerator()<br>        <span class="hljs-keyword">if</span> (N-phi+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> sqrt(<span class="hljs-built_in">pow</span>((N-phi+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)-N).is_integer():<br>            (p,q)=var(<span class="hljs-string">&#x27;p q&#x27;</span>)<br>            x=solve([(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)==phi,p*q==N],p,q)<br>            <span class="hljs-keyword">return</span> x <br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienner_attack</span>(<span class="hljs-params">e,N</span>):<br>    c=continued_fraction(e/N)<span class="hljs-comment">#获取连分数集合</span><br>    alist=c.convergents()<span class="hljs-comment">#利用连分数得到连分数收敛</span><br>    <span class="hljs-keyword">return</span> possible(e,alist,N)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">x.denominator():</span><br><span class="hljs-string"></span><br><span class="hljs-string">这个函数返回分数 x 的分母。</span><br><span class="hljs-string">x.numerator():</span><br><span class="hljs-string"></span><br><span class="hljs-string">这个函数返回分数 x 的分子。</span><br><span class="hljs-string">e * x.denominator():</span><br><span class="hljs-string"></span><br><span class="hljs-string">这个部分将 e 乘以 x 的分母。</span><br><span class="hljs-string">e * x.denominator() - 1:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这个代码返回的是p和q</p><h3 id="rrrrrrsa–一道题"><a href="#rrrrrrsa–一道题" class="headerlink" title="rrrrrrsa–一道题"></a>rrrrrrsa–一道题</h3><p><img src="https://rockfox0.github.io/picx-images-hosting/26a1d4b9c2b9329f06b882ccf7930df9.54xu78e8w8.webp"></p><p>这是一个关于rsa-wiener攻击拓展的推导</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">P1 = getPrime(<span class="hljs-number">1038</span>)<br>P2 = sympy.nextprime(P1)<br><span class="hljs-keyword">assert</span>(P2 - P1 &lt; <span class="hljs-number">1000</span>)<br><br>Q1 = getPrime(<span class="hljs-number">512</span>)<br>Q2 = sympy.nextprime(Q1)<br><br>N1 = P1 * P1 * Q1<br>N2 = P2 * P2 * Q2<br></code></pre></td></tr></table></figure><p>刚好可以应用在这里。</p><p>很明显是满足条件的。所以Q1&#x2F;Q2是N1&#x2F;N2的收敛连分数扩展</p><blockquote><p>N1&#x2F;N2&#x3D;(P1&#x2F;P1)^2^*(Q1&#x2F;Q2) </p><p>Q1&#x2F;Q1&gt;N1&#x2F;N2,N1&lt;N2,Q1&lt;Q2</p><p>n1&#x2F;n2&lt;Q1&#x2F;Q2&lt;1,然后我们用</p><p>因为Q1和Q2都是素数，我们可以直接得到Q1和Q2</p><p>并用N1%Q1来判断是否符合条件</p></blockquote><p>解题代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">possible</span>(<span class="hljs-params">alist,N1</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> alist:<br>        <span class="hljs-keyword">if</span> x==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        Q1=x.numerator()<br>        <span class="hljs-keyword">if</span> N1%Q1==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> Q1!=<span class="hljs-number">1</span>:<br>            Q2=x.denominator()<br>            <span class="hljs-keyword">return</span> Q1,Q2<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienner_attack</span>(<span class="hljs-params">N1,N2</span>):<br>    c=continued_fraction(N1/N2)<span class="hljs-comment">#获取连分数集合</span><br>    alist=c.convergents()<span class="hljs-comment">#利用连分数得到连分数收敛</span><br>    <span class="hljs-keyword">return</span> possible(alist,N1)<br>N1=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span><br>c1=<span class="hljs-number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span><br>E1=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span><br>N2=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span><br>c2=<span class="hljs-number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span><br>E2=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span><br><br>t=wienner_attack(N1,N2)<br>Q1=t[<span class="hljs-number">0</span>]<br>Q2=t[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(Q1)<br><span class="hljs-built_in">print</span>(Q2)<br>P2=gmpy2.iroot(N2//Q2,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>P1=gmpy2.iroot(N1//Q1,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>phi1=(P1-<span class="hljs-number">1</span>)*P1*(Q1-<span class="hljs-number">1</span>)<br>phi2=(P2-<span class="hljs-number">1</span>)*P2*(Q2-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(E1,phi1)<br>d2=gmpy2.invert(E2,phi2)<br>m1=gmpy2.powmod(c1,d1,N1)<br>m2=gmpy2.powmod(c2,d2,N2)<br>f1=long_to_bytes(m1)<br>f2=long_to_bytes(m2)<br><span class="hljs-built_in">print</span>(f1,f2)<br></code></pre></td></tr></table></figure><h3 id="rrrrsa-—-l3hctf"><a href="#rrrrsa-—-l3hctf" class="headerlink" title="rrrrsa — l3hctf"></a>rrrrsa — l3hctf</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_vulnerable_key</span>(<span class="hljs-params">bits=<span class="hljs-number">1024</span></span>):<br>    p_bits = bits // <span class="hljs-number">2</span><br>    q_bits = bits - p_bits<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = random_prime(<span class="hljs-number">2</span>**(p_bits), lbound=<span class="hljs-number">2</span>**(p_bits-<span class="hljs-number">1</span>))<br>        q = random_prime(<span class="hljs-number">2</span>**(q_bits), lbound=<span class="hljs-number">2</span>**(q_bits-<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> p != q <span class="hljs-keyword">and</span> p &gt; q <span class="hljs-keyword">and</span> p &lt; <span class="hljs-number">2</span>*q:<br>            <span class="hljs-keyword">break</span><br>            <br>    N = p * q<br>    phi = (p**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>) * (q**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>)<br><br>    d_bits = <span class="hljs-number">1024</span><br>    d_bound = <span class="hljs-number">2</span>**d_bits<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        d_small = randint(<span class="hljs-number">2</span>, d_bound)<br>        d = phi - d_small<br>        <span class="hljs-keyword">if</span> gcd(d, phi) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> d_small.bit_length() == <span class="hljs-number">1021</span>:<br>                <span class="hljs-keyword">break</span><br><br>    e = inverse_mod(d, phi)<br>    <br>    <span class="hljs-keyword">return</span> N, e<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m, N, e</span>):<br>    n = <span class="hljs-number">4</span><br>    r = <span class="hljs-number">2</span><br>    R = Integers(N)<br>    P = PolynomialRing(R, <span class="hljs-string">&#x27;t&#x27;</span>)<br>    t = P.gen()<br>    Q = P.quotient(t**n - r)<br><br>    m_poly = Q([m, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br><br>    c_poly = m_poly ** e<br><br>    <span class="hljs-keyword">return</span> c_poly.lift()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    N, e = generate_vulnerable_key()<br>    m = <span class="hljs-built_in">int</span>.from_bytes(flag, <span class="hljs-string">&#x27;big&#x27;</span>)<br>    c = encrypt(m, N, e)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;N = <span class="hljs-subst">&#123;N&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># N = 99697845285265879829811232968100099666254250525000506525475952592468738395250956460890611762459685140661035795964867321445992110528627232335703962897072608767840783176553829502743629914407970206513639916759403399986924602596286330464348286080258986075962271511105387188070309852907253486162504945490429185609</span><br><span class="hljs-comment"># e = 74900336437853271512557457581304251523854378376434438153117909482138661618901386551154807447783262736408028580620771857416463085746907317126876189023636958838207330193074215769008709076254356539808209005917645822989554532710565445155350102802675594603406077862472881027575871589046600011223990947361848608637247276816477996863812313225929441545045479384803449990623969591150979899801722841101938868710054151839628803383603849632857020369527380816687165487370957857737696187061619496102857237814447790678611448197153594917852504509869007597997670022501500067854210261136878917620198551551460145853528269270832725348151160651020188255399136483482428499340574623409209151124687319668989144444549871527949104436734300277004316939985015286758651969045396343970037328043635061226100170529991733947365830164811844853806681198818875837903563263114249814483901121700854712406832325690101810786429930813776784979083590353027191492894890551838308899148551566437532914838098811643805243593419063566975400775134981190248113477610235165151367913498299241375039256652674679958159505112725441797566678743542054295794919839551675786573113798857814005058856054462008797386322048089657472710775620574463924678367455233801970310210504653908307254926827</span><br><span class="hljs-comment"># c = 98460941530646528059934657633016619266170844887697553075379408285596784682803952762901219607460711533547279478564732097775812539176991062440097573591978613933775149262760936643842229597070673855940231912579258721734434631479496590694499265794576610924303262676255858387586947276246725949970866534023718638879</span><br><br></code></pre></td></tr></table></figure><p>利用维纳攻击，这里可以推一下，<br>$$<br>ed-1&#x3D;k*(phi)\<br>\frac{e}{phi}-\frac{k}{d}&#x3D;\frac{1}{d*phi}\<br>\frac{e}{n^4}-\frac{k}{(d-ds)}≈\frac{e}{phi}-\frac{k}{d-ds}\<br>\frac{e}{n^4}-\frac{k}{ds} &gt;\frac{1}{2ds^2}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>N = <span class="hljs-number">99697845285265879829811232968100099666254250525000506525475952592468738395250956460890611762459685140661035795964867321445992110528627232335703962897072608767840783176553829502743629914407970206513639916759403399986924602596286330464348286080258986075962271511105387188070309852907253486162504945490429185609</span><br>e = <span class="hljs-number">74900336437853271512557457581304251523854378376434438153117909482138661618901386551154807447783262736408028580620771857416463085746907317126876189023636958838207330193074215769008709076254356539808209005917645822989554532710565445155350102802675594603406077862472881027575871589046600011223990947361848608637247276816477996863812313225929441545045479384803449990623969591150979899801722841101938868710054151839628803383603849632857020369527380816687165487370957857737696187061619496102857237814447790678611448197153594917852504509869007597997670022501500067854210261136878917620198551551460145853528269270832725348151160651020188255399136483482428499340574623409209151124687319668989144444549871527949104436734300277004316939985015286758651969045396343970037328043635061226100170529991733947365830164811844853806681198818875837903563263114249814483901121700854712406832325690101810786429930813776784979083590353027191492894890551838308899148551566437532914838098811643805243593419063566975400775134981190248113477610235165151367913498299241375039256652674679958159505112725441797566678743542054295794919839551675786573113798857814005058856054462008797386322048089657472710775620574463924678367455233801970310210504653908307254926827</span><br>c = <span class="hljs-number">98460941530646528059934657633016619266170844887697553075379408285596784682803952762901219607460711533547279478564732097775812539176991062440097573591978613933775149262760936643842229597070673855940231912579258721734434631479496590694499265794576610924303262676255858387586947276246725949970866534023718638879</span><br>A = N**<span class="hljs-number">4</span><br><br>cf = continued_fraction(e / A)<br>conv_gen = cf.convergents()<br>N2 = N**<span class="hljs-number">2</span><br>N2p1 = N2 + <span class="hljs-number">1</span><br>target_val = N2p1**<span class="hljs-number">2</span>  <span class="hljs-comment"># (N^2 + 1)^2</span><br><br>found = <span class="hljs-literal">False</span><br><span class="hljs-keyword">for</span> c_frac <span class="hljs-keyword">in</span> conv_gen:<br>    k = c_frac.numerator()<br>    d_small = c_frac.denominator()<br>    bl = d_small.bit_length()<br>    <span class="hljs-keyword">if</span>(bl!=<span class="hljs-number">1021</span>):<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(bl)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Trying convergent: k=<span class="hljs-subst">&#123;k&#125;</span>, d_small=<span class="hljs-subst">&#123;d_small&#125;</span>, bits=<span class="hljs-subst">&#123;bl&#125;</span>&quot;</span>)<br>    <br>    c_val = e * d_small + <span class="hljs-number">1</span><br>    <br>    phi_cand = c_val // k<br>    diff = target_val - phi_cand<br>    <span class="hljs-keyword">if</span>(is_square(diff)==<span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">continue</span><br>    <br>    E = sqrtD // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> t_val <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>*N + E]:<br>        <span class="hljs-keyword">if</span> t_val &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_square(t_val):<br>            <span class="hljs-keyword">continue</span><br>        <br>        s_val = isqrt(t_val)<br>        <span class="hljs-keyword">if</span> s_val**<span class="hljs-number">2</span> != t_val:<br>            <span class="hljs-keyword">continue</span><br>        <br>        <span class="hljs-comment">#x^2 - s_val*x + N = 0 </span><br>        R.&lt;x&gt; = PolynomialRing(ZZ)<br>        poly = x**<span class="hljs-number">2</span> - s_val*x + N<br>        roots = poly.roots(multiplicities=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(roots) != <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">continue</span><br>        p, q = roots<br>        <span class="hljs-keyword">if</span> p * q != N:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;N factorized successfully!&quot;</span>)<br>        found = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> found:<br>        <span class="hljs-keyword">break</span><br>phi = (p**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>) * (q**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>)<br><br>d = inverse_mod(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, N)<br>flag_bytes = <span class="hljs-built_in">int</span>(m).to_bytes((m.bit_length() + <span class="hljs-number">7</span>) // <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag_bytes.decode())<br></code></pre></td></tr></table></figure><h3 id="扩展维纳"><a href="#扩展维纳" class="headerlink" title="扩展维纳"></a>扩展维纳</h3><p>参考：论文:<a href="https://dunkirkturbo.github.io/2020/05/04/WriteUp-De1CTF2020-Crypto/howgrave-graham1999.pdf">https://dunkirkturbo.github.io/2020/05/04/WriteUp-De1CTF2020-Crypto/howgrave-graham1999.pdf</a></p><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/">ctf-wiki-扩展维纳</a></p><h4 id="维纳的方法-1"><a href="#维纳的方法-1" class="headerlink" title="维纳的方法"></a>维纳的方法</h4><p>这里我们忽略前面提到的q&lt;p&lt;2q的条件。利用其他进行维纳攻击</p><p>这里有个前提，e约等于n,S约等于(n)^0.5^(大概就是2的指数差不多)</p><p>λ(N)&#x3D;lcm(p-1,q-1)….g&#x3D;gcd(p-1,q-1). s&#x3D;1-p-q</p><blockquote><p>$ed-k*λ(N)&#x3D;1$</p><p>$edg-kN&#x3D;g+ks$</p><p>$e\over N$-$k\over dg$&#x3D;($k\over dg$)($s\over N$)+$1\over dN$</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-144234.9rjh97w4em.webp"></p><p>这里原论文的证明近似的量有点多，不够严谨，不能算是严格的维纳证明，最开始的那个更细节</p></blockquote><h4 id="GUO的方法"><a href="#GUO的方法" class="headerlink" title="GUO的方法"></a>GUO的方法</h4><p>考虑存在两个e。</p><p>$e_1d_1g-k_1(p-1)(p-1)&#x3D;g$</p><p>$e_2d_2g-k_2(p-1)(q-1)&#x3D;g$</p><p>化简可以得到</p><p>$k_2d_1e_1−k_1d_2e_2&#x3D;k_2−k_1$</p><blockquote><p>同时除以$k_2d_1e_2$</p><p>$e_1\over e_2$-$k_1d_2\over k_2d_1$&#x3D;$k_2-k_1\over k_2d_1e_2$</p><p>设$d_i&lt;N^α$</p><p>$k_2-k_1\over k_2d_1e_2$≈N^−(1+α)^</p><p>为了满足上述定理</p><p>2(<em>k</em>2−<em>k</em>1)<em>d</em>1<em>k</em>2&lt;<em>e</em>2</p><p>但是通过$k_1d_2\over k_2 d_1$找到分解N不是很现实，这个扩展结合了上述两种方法利用格来求</p></blockquote><h4 id="扩展维纳攻击"><a href="#扩展维纳攻击" class="headerlink" title="扩展维纳攻击"></a>扩展维纳攻击</h4><p>两个关系：</p><blockquote><p>$d_ige_i−k_iN&#x3D;g+k_is$  —M</p><p>k_id_je_j−k_jd_ie_i&#x3D;k_i−k_j —G<sub>i,j</sub></p></blockquote><p>我们假设$d_i$ 和$k_i $都小于N^αn^，且g很小，s≈N^1&#x2F;2^。可以注意到$W_i$ 和Gi的右侧非常小，实际上分别最多为N^1&#x2F;2+α^ 和N^α^。</p><p>接下来我们可以利用四个等式构造格</p><p>$k_1 k_2&#x3D;k_1 k_2$</p><p>$d_1ge_1−k_1N&#x3D;g+k_1s$</p><p>$k_1d_2e_2−k_2d_1e_1&#x3D;k_1−k_2$</p><p>$d_1d_2g^2e_1e_2−d_1gk_2e_1N−d_2gk_1e_2N+k_1k_2N_2&#x3D;(g+k_1s)(g+k_2s)$</p><p>可以构造如下格</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-155922.8l060oyhju.webp" alt="屏幕截图-2025-01-05-155922"></p><p>视作A*L&#x3D;B</p><p>根据假设</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-155934.4xumd62jsr.webp" alt="屏幕截图-2025-01-05-155934"></p><p><img src="https://rockfox0.github.io/picx-images-hosting/eae24001bbe299decdd775bef1ea1800.73u0gaysyt.webp" alt="img"></p><p>明显|L|≈2N,但是明显N^2α^,N^1&#x2F;2+2α^,N^α2^,N^1+2α^.明显这里不符合定理要求需要构造一下，</p><blockquote><p>$M_1&#x3D;N$^1&#x2F;2^,$M_2&#x3D;N$^1+α^，得到</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-01-05-161454.83a4c4gc3x.webp" alt="屏幕截图-2025-01-05-161454"></p><p>根据上述条件</p><p><em>α</em>≤5&#x2F;14</p><p>把B2当作求出的最短向量。A&#x3D;B*L^-1^。这是我们就能得到A，A[1]&#x2F;A[0]&#x3D;$d_1g\over k_1$</p><p>φ(N)&#x3D;$edg\over k$-$g\over k$&#x3D;$edg\over k$</p></blockquote><h4 id="羊城杯-simple-py"><a href="#羊城杯-simple-py" class="headerlink" title="羊城杯 simple.py"></a>羊城杯 simple.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><br>key = <span class="hljs-string">&quot;abcdefgh&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">m</span>):<br>    des = DES.new(key, DES.MODE_ECB)<br>    res = des.encrypt(m)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    p = getPrime(<span class="hljs-number">2048</span>)<br>    q = getPrime(<span class="hljs-number">2048</span>)<br>    n = p * q<br>    bit = n.bit_length()<br>    phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    num = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        u = getPrime(bit / <span class="hljs-number">4</span> - num)<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(u, phi_n) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        t = gmpy2.invert(u, phi_n)<br>        e = bytes_to_long(des_encrypt(long_to_bytes(t)))<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(e, phi_n) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> (n, e)<br><br>P = getPrime(<span class="hljs-number">1024</span>)<br>Q = getPrime(<span class="hljs-number">1024</span>)<br>N = P * Q<br>E = <span class="hljs-number">65537</span><br>lcm = gmpy2.lcm(P-<span class="hljs-number">1</span>, Q-<span class="hljs-number">1</span>)<br>e1 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>e2 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, E, N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;N = &quot;</span> + <span class="hljs-built_in">str</span>(N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;e2 = &quot;</span> + <span class="hljs-built_in">str</span>(e2)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;c = &quot;</span> + <span class="hljs-built_in">str</span>(c)<br>_n, _e = gen_key()<br>_c = <span class="hljs-built_in">pow</span>(e1, _e, _n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_n = &quot;</span> + <span class="hljs-built_in">str</span>(_n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_e = &quot;</span> + <span class="hljs-built_in">str</span>(_e)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_c = &quot;</span> + <span class="hljs-built_in">str</span>(_c)<br><br><span class="hljs-comment"># N = 14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span><br><span class="hljs-comment"># e2 = 27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span><br><span class="hljs-comment"># c = 6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span><br><span class="hljs-comment"># _n = 440489238264900860776949063845200558734341182253911040104689726634414488997095518284964514078079911856352824174173937251558842251349762631716798307360995414545464514355957499460396352456341058329671470384493547042182238690727766731554287411757022792467324815342497916894285866240516524768645049867582541899123632009100512965460004548382054578461249990158442675234477122521189649316341623637146867589119951831385717513964941787562068891523060843170463600255518728070958509224053460041184869943038887434435024428311063533345514827827485121055022245800823723487812635502090530820946638405345755666124356919178290008475459419571761406117827422883820901663916276191422633940699113760516149002609672230610575442643822241126824287790055264162725209120192661985259423924307785452001927701323647247782658775780117642900694831475681037634691806232211286493187121464506122012889644137364079403183353774265910554863733455161820449073656744610495110838881353269890437984975607744603113572453211439334880155671730821755361054781243639407912133971530394031933785051770725331242932929244719594830548310768937037042243794551163891451545574837838357398072638709907958216067999891842395376953596940377457308329336524488962532620850237570279134567668379</span><br><span class="hljs-comment"># _e = 861605654852236668414010386016782729745549477722901970933220380452652052018502113737968204529790495739233258572209422774257139256367928649554562561889013164344608269555777150446651170697255381344437283003508476336814132594917061838422072660017477530465048729471603537912401826065081663165440462979219418291010867656746870617893935758241591032350010782861988742885918015532494020406350897048575155800941991107973433915573030255070411073793489218782862225921465295055907689734413881263179029741870520797816282420230090879687287575328294171448819803530205292587159921154471289747571107461754730577787617451127061265552788125691266357724955508391085485034126227212788895416902189479587194999818764639403752596165043883295506465916277734482380252399557395621566461322664559344483889187037851178431011220134914560438657522787409632677020269086895142488669203469256629173438313487046130238010206678820035631793666627274457756812810094004185303422637897314225624079032617334487815628021058997628511963565055629435278956251869329025544623291223984190562109149316159243565323565271491356378189561005084676592786453581431393651385181326525455441155960432946682976515756161038293313433862078763004704003356983371787414787104076401121444383911561</span><br><span class="hljs-comment"># _c = 305937839546594439230463861584604201077374759167468410827830943528403007941779658881672477705113617614828611332427199124217887937391378281943856159571057598203709366891547401974326016980711130197275312149966105151573748299654404630150641461765232935912266448303266990247145252052886920248198006212876273661195636104435277145396636985516064154534488750879453474211852461463041960835745695368577903786702607508492658563272121038693371752289017330781719235752018697635304458321008407930986565779826278048082764754367267460637798512780153281325733348999426407049795270044819657399403071013496169060640127279409914638535996355848933378734045908205536540619564723586905257569498716707820544351092379516465943537383422680357333849248129118148543389733395686399565999586899123087310025442994131218237679518267106194962305629529210402269726736072967966518381350920965727690274018080619332676536005722214955949897632990356174168234408837737546230730400434240785496100281815168806724358191550743656843853383646410487436540166360406982096949178466861150173527305369007546917550634679211293496458282787881244581230558011582720632502886494712233308474151958909251857281750741736910202763888790654287328846201724930302778996046434656839999091303411</span><br><br><br></code></pre></td></tr></table></figure><p>我们需要先求出e1，再通过e1和e2找到lcm，再通过lcm找到d和m</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">def <span class="hljs-built_in">des_decrypt</span>(m):<br>    des = DES.<span class="hljs-built_in">new</span>(key, DES.MODE_ECB)<br>    res = des.<span class="hljs-built_in">decrypt</span>(m)<br>    return res<br>ciphertext = <span class="hljs-built_in">long_to_bytes</span>(_e)<br>decrypted_data = <span class="hljs-built_in">des_decrypt</span>(ciphertext)<br>_t=<span class="hljs-built_in">bytes_to_long</span>(decrypted_data)<br><span class="hljs-built_in">print</span>(_t)利用这个先求出_t<br></code></pre></td></tr></table></figure><p>t &#x3D; gmpy2.invert(u, phi_n)，这里t满足维纳攻击的条件可以利用t求出phi_n再解出_d和e1。_</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs excel">from gmpy2 import invert<br>def possible(e,alist,<span class="hljs-built_in">N</span>)<span class="hljs-symbol">:</span><br>    for x in ali<span class="hljs-symbol">st:</span><br>        <span class="hljs-built_in">if</span> x==<span class="hljs-symbol">0:</span><br>            continue<br>        <span class="hljs-built_in">phi</span>=(e*x.denominator()-<span class="hljs-number">1</span>)//x.numerator()<br>        <span class="hljs-built_in">if</span> (<span class="hljs-built_in">N</span>-<span class="hljs-built_in">phi</span>+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-built_in">and</span> <span class="hljs-built_in">sqrt</span>(pow((<span class="hljs-built_in">N</span>-<span class="hljs-built_in">phi</span>+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)-<span class="hljs-built_in">N</span>).is_integer()<span class="hljs-symbol">:</span><br>            (p,q)=<span class="hljs-built_in">var</span>(&#x27;p q&#x27;)<br>            <span class="hljs-built_in">Phi</span>=<span class="hljs-built_in">phi</span><br>            return <span class="hljs-built_in">Phi</span><br>        el<span class="hljs-symbol">se:</span><br>            continue<br>def wienner_attack(e,<span class="hljs-built_in">N</span>)<span class="hljs-symbol">:</span><br>    c=continued_fraction(e/<span class="hljs-built_in">N</span>)#获取连分数集合<br>    alist=c.convergents()#利用连分数得到连分数收敛<br>    return possible(e,alist,<span class="hljs-built_in">N</span>)<br>_<span class="hljs-built_in">t</span>=<br>_c = <br>_<span class="hljs-built_in">n</span> = <br>_e = <br><span class="hljs-built_in">phi</span>=wienner_attack(_<span class="hljs-built_in">t</span>,_<span class="hljs-built_in">n</span>)<br><span class="hljs-symbol">d1</span>=invert(_e,<span class="hljs-built_in">phi</span>)<br><span class="hljs-symbol">e1</span>=pow(_c,<span class="hljs-symbol">d1</span>,_<span class="hljs-built_in">n</span>)<br>print(<span class="hljs-symbol">e1</span>)<br></code></pre></td></tr></table></figure><p>利用e1构造矩阵得到phi在求出m</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from gmpy2 import invert<br>from Crypto<span class="hljs-selector-class">.Util</span><span class="hljs-selector-class">.number</span> import bytes_to_long, long_to_bytes<br>c = <br>e2 = <br>e1 = <br>N  = <br><span class="hljs-selector-tag">a</span>  = <span class="hljs-number">5</span>./<span class="hljs-number">14</span><br>M1=N**<span class="hljs-number">0.5</span><br>M2= N **(a+<span class="hljs-number">1</span>)<br>D = <span class="hljs-built_in">diagonal_matrix</span>(ZZ,<span class="hljs-selector-attr">[N,M1,M2,1]</span>)<br>M=<span class="hljs-built_in">matrix</span>(ZZ,<span class="hljs-selector-attr">[[1,-N,0,N**2]</span>,<span class="hljs-selector-attr">[0,e1,-e1,-e1*N]</span>,<span class="hljs-selector-attr">[0,0,e2,-e2*N]</span>,<span class="hljs-selector-attr">[0,0,0,e1*e2]</span>])*D<br>L=M<span class="hljs-selector-class">.LLL</span>()<br>t=<span class="hljs-built_in">vector</span>(ZZ,L<span class="hljs-selector-attr">[0]</span>)<br><span class="hljs-attribute">x</span>=t*M**(-<span class="hljs-number">1</span>)<br>phi = <span class="hljs-built_in">int</span>(<span class="hljs-attribute">x</span>[<span class="hljs-number">1</span>]/x[<span class="hljs-number">0</span>]*e1)<br>d = <span class="hljs-built_in">invert</span>(<span class="hljs-number">0</span>x10001,phi)<br>m=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,N))<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(long_to_bytes(m)</span></span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>RSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CRT中国剩余定理复现</title>
    <link href="/2024/12/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/12/29/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%982024%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="极客大挑战2024中国剩余定理复现"><a href="#极客大挑战2024中国剩余定理复现" class="headerlink" title="极客大挑战2024中国剩余定理复现"></a>极客大挑战2024中国剩余定理复现</h1><h2 id="CRT-中国剩余定理"><a href="#CRT-中国剩余定理" class="headerlink" title="CRT(中国剩余定理)"></a>CRT(中国剩余定理)</h2><h3 id="一些定理的证明"><a href="#一些定理的证明" class="headerlink" title="一些定理的证明"></a>一些定理的证明</h3><p>1.证明辗转相除法</p><blockquote><p>a&#x3D;bq+r</p><p>证明gcd(a,b)&#x3D;gcd(b,r)</p><p>已知gcd(a,b)|a,gcd(a,b)|b</p><p>r&#x3D;a-bq,—&gt;gcd(a,b)|r</p><p>所有gcd(a,b)&lt;&#x3D;gcd(b,r)</p><p>gcd(b,r)|b,gcd(b,r)|r并且gcd(b,r)|a</p><p>所以gcd(b,c)&lt;&#x3D;gcd(a,b)</p></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs PY"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">while</span> b!=<span class="hljs-number">0</span>:<br>        r=a%b<br>        a=b<br>        b=r<br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入a&quot;</span>)<br>a=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入b&quot;</span>)<br>b=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-built_in">print</span>(gcd(a,b))<br>n=<span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> n!=<span class="hljs-number">0</span>:<br>    n=n-<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(n)<br><br></code></pre></td></tr></table></figure><ol start="2"><li>证明裴蜀定理</li></ol><blockquote><p>如果a和b是不为0的整数，则有整数x,y，是的ax+by&#x3D;gcd(a,b)</p><p>gcd(a,b)&#x3D;gcd(b,a%b&#x3D;r1)&#x3D;gcd(r1,b%r1&#x3D;r2)&#x3D;gcd(r2,r1%r2&#x3D;r3)&#x3D;gcd(r3,r2%r3&#x3D;0),,r3为最大公约数</p><p>r3&#x3D;r1-?r2,&#x3D;r1-(b-?r1)&#x3D;?r1+?b&#x3D;?(a-b?)+?b&#x3D;?a+?b(?为任意整数)</p><p>推论：</p><p><strong>a,b互质&lt;–&gt;ax+by&#x3D;1</strong>(a,b不全为0)</p><p><strong>如果a和b是不全为0的整数，并且ax+by&#x3D;c有解，那么c一定是gcd(a,b)的整数倍</strong></p><p>a和b两项的裴蜀定理可以推广到多项（ax+by+cz&#x3D;gcd(a,b,c)</p></blockquote><ol start="3"><li>扩展欧几里得算法</li></ol><blockquote></blockquote><p>1.用于处理一元线性同余方程组问题</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b3e3b83a47f7942fa7337d9157658625d6685ef0"></p><p>举例一个类似的线性矩阵，满足m之间互质，则对于任意a，X有解。</p><p>Mi表示m<sub>1</sub>*m<sub>2</sub>*…*m<sub>n-1</sub></p><p>$$\prod_{i&#x3D;1}^{n} i&#x3D;M$$</p><p>t<sub>i</sub>&#x3D;M<sub>i</sub><sup>-1</sup>即他们互为倒数</p><p>可以得到t<sub>i</sub>*m<sub>i</sub>&#x3D;1mod(m<sub>i</sub>)</p><p>可以得到</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/105e4e1aa217620e7ebfa31a2c894845dd2ca1df" alt="{\displaystyle x=a_{1}t_{1}M_{1}+a_{2}t_{2}M_{2}+\cdots +a_{n}t_{n}M_{n}+kM=kM+\sum _{i=1}^{n}a_{i}t_{i}M_{i},\quad k\in \mathbb {Z} .}"></p><p>如果对x去模M则就有<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/56e89d12fd609dc39d5c6919c2d9c47252dbf829" alt="{\displaystyle x=\sum _{i=1}^{n}a_{i}t_{i}M_{i}.}">唯一解，也是最小解</p><p>做题WP</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br><span class="hljs-keyword">from</span><span class="hljs-built_in"> secret </span>import flag<br><br>p = [getPrime(1024) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(4)]<br>A = random_matrix(ZZ,4,4)<br>x = vector(p)<br>C = A*x<br>m = bytes_to_long(flag)<br>C_list = [m^2 % p[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> p]<br><br><span class="hljs-built_in">print</span>(A.list())<br><span class="hljs-built_in">print</span>(C.list())<br><span class="hljs-built_in">print</span>(C_list)<br></code></pre></td></tr></table></figure><p>p &#x3D; [getPrime(1024) for i in range(4)]随机生成四个1024位的大素数。</p><p>A &#x3D; random_matrix(ZZ,4,4)随机生成一个4*4矩阵。</p><p>x &#x3D; vector(p)将p变成4维向量X。</p><p>C&#x3D;A*X&#x2F;&#x2F;A与X矩阵相乘得到C。</p><p>m &#x3D; bytes_to_long(flag)。将flag从字节转换成一个长整数。</p><p>C_list &#x3D; [m^2 % p[i] for i in p]。将m<sup>2</sup>模p中的每个数，得到有四个元素的列表C_list。</p><p>我们反推这个题，已知C，A，C_list。先通过C &#x3D; A*x反推出X然后得到P。然后通过P利用中国剩余定理，得到m<sup>2</sup>最后得到flag</p><p>python解密代码如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs makefile">from sympy import Matrix, floor, sqrt<br>from sympy.ntheory.modular import solve_congruence<br>from Crypto.Util.number import long_to_bytes<br><br><span class="hljs-comment"># 已知矩阵 A 和向量 C</span><br>A = Matrix([[0, 3, 13, -14], [3, 23, 0, -2], [1, 0, -2, -2], [0, 6, 23, -1]])<br>C = Matrix([<br>    240291916026450853326299190970230346016172195881040521282143062887044415649037529786726996601318182310764736460576505905853588791461834136499382728467644441025444276310127878088660033443492552638740545000926442503220444210798223930409598242340803157100462304319147723884276724762657521839584789559871925165760,<br>    2717720293948071692375399406613869670771599238582123998465247515177734926976499453293454850275431149956050441808723146824893873695181057831740557746748569414755121567964485941329619805530387035869417797456365550166284561344481782536841750836701781173446215190576686468572143336023976555984489188188587442599216,<br>    -533548100977056273203151152482369923618163132589214562561487066657940175907095576692149455190734101432827064737665463493053792538736227178020400115918642405290979502807029452417998359787492016936318980930297669652709045919397558996256596914383243332942443302758025216611814306941895320000161610678184972875739,<br>    4222318758561393352580663599337085248915805543151591039306576069590530359211724446951051459283547556643285440266930522614603788902068741368143298763016144907986405290404635699093289327803758616517987063925407686664235188616756483626348375811993157044295992929396465160478520815655459249252288507190574794338922<br>])<br><br><span class="hljs-comment"># 求解 x 向量</span><br>x = A.LUsolve(C)  <span class="hljs-comment"># 使用 sympy 的 LU 分解来解线性方程组，避免浮点数溢出</span><br><br><span class="hljs-comment"># 模数和余数列表</span><br>p = list(x)<br>C_list = [<br>    1480960470329638043680688727038239738930475793098218659683171073192289938334049452419257815941575064684613256921077170955193683633002228493232830695650419041071577617101320586384<br>] * 4<br><br><span class="hljs-comment"># 使用 solve_congruence 求解 m^2</span><br>congruences = [(C_list[i], p[i]) for i in range(4)]<br>m_squared, _ = solve_congruence(*congruences)<br><br><span class="hljs-comment"># 求解 m</span><br>m = floor(sqrt(m_squared))<br>flag = long_to_bytes(m)<br><br>print(<span class="hljs-string">&quot;解出的 flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><p>flag: b’MaybeLinearAlgebraStillNeedYourEffort’</p><h3 id="扩展知识–如果模数不互质"><a href="#扩展知识–如果模数不互质" class="headerlink" title="扩展知识–如果模数不互质"></a>扩展知识–如果模数不互质</h3><h4 id="扩展欧几里得定理和裴蜀定理。"><a href="#扩展欧几里得定理和裴蜀定理。" class="headerlink" title="扩展欧几里得定理和裴蜀定理。"></a>扩展欧几里得定理和裴蜀定理。</h4><p>描述：<strong>一定存在整数 x, y 满足等式 a * x + b * y &#x3D; gcd(a,b)</strong></p><p>证明，。</p><blockquote><ul><li>如果b&#x3D;0,，则 gcd⁡(a,b)&#x3D;∣a∣,此时我们取x&#x3D;1或-1和y&#x3D;0显然满足a<em>x+b</em>y&#x3D;d。</li><li>如果b≠0,根据欧几里得几何算法，可以写出：</li></ul><p>a&#x3D;b*q+r即a其中 q 是商，r是余数，且 0≤r&lt;∣b∣。根据这一表示法，我们有gcd(a,b)&#x3D;gcd(b,r)</p><p>现在我将问题转化为证明：存在整数x’和y’，是的</p><ul><li><strong>b<em>x’+r</em>y’&#x3D;gcd(b,r)</strong></li></ul><p>根据数学归纳法，这个等式成立。</p><ul><li>由于r&#x3D;a-bq,我们可以将r带入上式</li></ul><p>*<em>bx’+(a-bq)<em>y’&#x3D;d,</em></em></p><p><strong>ay’+b(x’-qy’)&#x3D;d</strong></p><p>这表明，若令x&#x3D;y’和y&#x3D;x’-qy’，那么ax+by&#x3D;d</p><p>那么我们一步步递归就能得到余数，有点类似辗转相除，递归的每一步b,q,d,,a都是整数，递归到最后一步的整除倍数</p><p>r<sub>k-2</sub>&#x3D;r<sub>k-1</sub>*q<sub>k</sub>+r<sub>k</sub></p><p>r<sub>k-1</sub>&#x3D;r<sub>k</sub>*q<sub>k+1</sub>+0</p><p>r<sub>k</sub>&#x3D;r<sub>k-2</sub>-q<sub>k</sub>r<sub>k-1</sub></p><p>d&#x3D;x<sub>k</sub>r<sub>k-2</sub>+y<sub>k</sub>r<sub>k-1</sub></p><p>明显x<sub>k</sub>&#x3D;1,y<sub>k</sub>&#x3D;-q<sub>k</sub>为整数</p><p>向上步步递归可以得到的x和y也为整数。</p><ul><li>我们通过扩展欧几里得算法一般得到的是特解(x<sub>0</sub>,y<sub>0</sub>)满足</li></ul><p>ax+by&#x3D;d.我们需要证明所有满足此方程的整数解（x,y)的形式是。k为任意整数。</p><p><strong>x&#x3D;x<sub>0</sub>+(b&#x2F;d)k,</strong></p><p><strong>y&#x3D;y<sub>0</sub>-(a&#x2F;d)k;</strong></p><p>我们将两对解相减得到</p><p><em><em>a*(x<sub>1</sub>-x<sub>0</sub>)+b</em>(y<sub>1</sub>-y<sub>0</sub>)&#x3D;0</em>*</p><p>a*(x<sub>1</sub>-x<sub>0</sub>)&#x3D;-b*(y<sub>1</sub>-y<sub>0</sub>)</p><p>满足比例关系-b&#x2F;a&#x3D;(x<sub>1</sub>-x<sub>0</sub>)&#x2F;(y<sub>1</sub>-y<sub>0</sub>)</p><p>并且gcd(a,b)&#x3D;d，对a和b同时除以公因子,b&#x2F;a完成化简。</p><p>就能得到*<em>x<sub>1</sub>-x<sub>0</sub>&#x3D;(b&#x2F;d)<em>k</em></em>||y<sub>1</sub>-y<sub>0</sub>&#x3D;-(a&#x2F;d)*k</p><p>最后得到通解。</p></blockquote><h4 id="中国剩余不互质的应用（假设求的数为ans"><a href="#中国剩余不互质的应用（假设求的数为ans" class="headerlink" title="中国剩余不互质的应用（假设求的数为ans)"></a>中国剩余不互质的应用（假设求的数为ans)</h4><blockquote><p>中国剩余定理是用于求一个最小的xx，满足$x≡ci(modmi)cocrt$</p><p>一般的中国剩余定理都满足mi之间互质，这里扩展的是不互质的情况</p><p>假设我们现在有两条方程:</p></blockquote><p>$$<br>\left{<br>\begin{aligned}<br>x &amp; ≡ c_1(modm_1) \<br>x &amp;≡ c_2(mod m_2)\<br>\end{aligned}<br>\right.<br>$$</p><p>展开同余<br>$$<br>\left{<br>\begin{aligned}<br>x&#x3D;c_1+m_1k_1 \<br>x&#x3D;c_2+m_2k_2\<br>\end{aligned}<br>\right.<br>$$</p><p>联立得解:$m_1k_1&#x3D;(c_2-c_1)+m_2k_2$</p><p>若方程有解,$(m1,m2)|(c2−c1)$</p><p>令$d&#x3D;(m1,m2)$</p><p>两边同时除以d</p><p>$m_1 k_1\over d$&#x3D;$c_2-c_1\over d$(mod $m_2 \over d$)</p><p>k1&#x3D;inv($m_1 \over d$,$m_2 \over d$)*$c_2-c_1\over d$(mod $m_2 \over d$)</p><p>最后得到：$x≡inv(m1&#x2F;d,m2&#x2F;d)×(c2−c1)&#x2F;d×m1+c1(mod(m1m2)&#x2F;d)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">b&#x27;SYC&#123;...&#125;&#x27;</span><br>m = bytes_to_long(flag+<span class="hljs-string">b&#x27;\x01&#x27;</span>*<span class="hljs-number">23</span>)<br><br>p = [<span class="hljs-number">0</span>]*<span class="hljs-number">5</span><br>c = [<span class="hljs-number">0</span>]*<span class="hljs-number">5</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    p0 = random.randint(<span class="hljs-number">2</span>**<span class="hljs-number">100</span>,<span class="hljs-number">2</span>**<span class="hljs-number">101</span>)<br>    p[i] = p0<br>c = [m%p[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">p = [1921232050179818686537976490035, 2050175089402111328155892746480, 1960810970476421389691930930824, 1797713136323968089432024221276, 2326915607951286191807212748022]</span><br><span class="hljs-string">c = [1259284928311091851012441581576, 1501691203352712190922548476321, 1660842626322200346728249202857, 657314037433265072289232145909, 2056630082529583499248887436721]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>m模p得到c，并且p不是互质的。这里要使用不互质的算法</p><p>解题代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> gcdex<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uni</span>(<span class="hljs-params">P,Q</span>):<br>    c1,m1=P<br>    c2,m2=Q<br>    d=gcd(m1,m2)<br>    <span class="hljs-keyword">assert</span> (c2-c1)%d==<span class="hljs-number">0</span><br>    l=inverse(m1//d,m2//d)<br>    <span class="hljs-built_in">print</span>(l)<br>    <span class="hljs-keyword">return</span> (c1 + (c2 - c1) // d * l * m1) % lcm(m1, m2), lcm(m1, m2)<span class="hljs-comment">#返回的是一个元组</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">eq</span>):<br>    <span class="hljs-keyword">return</span> reduce(uni, eq)<span class="hljs-comment">#</span><br><br><br>ms = [<span class="hljs-number">1921232050179818686537976490035</span>, <span class="hljs-number">2050175089402111328155892746480</span>, <span class="hljs-number">1960810970476421389691930930824</span>,<br>      <span class="hljs-number">1797713136323968089432024221276</span>, <span class="hljs-number">2326915607951286191807212748022</span>]<br>cs = [<span class="hljs-number">1259284928311091851012441581576</span>, <span class="hljs-number">1501691203352712190922548476321</span>, <span class="hljs-number">1660842626322200346728249202857</span>,<br>      <span class="hljs-number">657314037433265072289232145909</span>, <span class="hljs-number">2056630082529583499248887436721</span>]<br>flag, lcm = CRT(<span class="hljs-built_in">zip</span>(cs, ms))<span class="hljs-comment">#把两个列表打包，依次对应有点像二维数组,但其实返回的是元组</span><br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">90728466640069861245808807287</span><br><span class="hljs-string">88626484234357944548738818769</span><br><span class="hljs-string">341093009098982253215042305269</span><br><span class="hljs-string">635742831101395206473512021361</span><br><span class="hljs-string">b&#x27;SYC&#123;wha+s_wr0n9!_CRT_bu+_n0+_&lt;0mpr1me!&#125;\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="rnocrt"><a href="#rnocrt" class="headerlink" title="rnocrt"></a>rnocrt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> x<br><br>m = [getRandomNBitInteger(<span class="hljs-number">256</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>u = hashlib.sha256(x).hexdigest()<br><span class="hljs-keyword">assert</span> u[:<span class="hljs-number">5</span>]==<span class="hljs-string">b&#x27;6a651&#x27;</span><br>flag = <span class="hljs-string">b&#x27;SYC&#123;&#x27;</span>+u+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br>c = [x % i  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment">#[207867980504656835313307696396607264603, 245036212212570610987366430554968489325, 270836744824069537438646110613439698666, 319275775495422875474878625752594133023, 254268823435329877199449670714528712873, 213093607196415232366564484229844568444, 246921085368773491003187313772615702950]</span><br><span class="hljs-comment">#[150031581047390726903711035932621949276, 21260202376534810598778595491323328519, 144049733622518360270048059408969512643, 236920143187836025924037873968303507493, 99781504248790469459151935530031893836, 69236016568483424294966410179787943383, 20613188366058016717435734248097940419]</span><br></code></pre></td></tr></table></figure><p>这个题跟上个题很像，但是上一个返回的最小值就是flag这个需要一定的爆破，并且注意数据的类型</p><p>因为f是被mod各个mi最大公约数的结果，属于值最小的可能,我们可以挨个f+i&#x2F;*lcm知道得到最大值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uni</span>(<span class="hljs-params">P,Q</span>):<br>    c1,m1=P<br>    c2,m2=Q<br>    d=gcd(m1,m2)<br>    <span class="hljs-keyword">assert</span> (c2-c1)%d==<span class="hljs-number">0</span><br>    l=inverse(m1//d,m2//d)<br>    <span class="hljs-built_in">print</span>(l)<br>    <span class="hljs-keyword">return</span> (c1 + (c2 - c1) // d * l * m1) % lcm(m1, m2), lcm(m1, m2)<span class="hljs-comment">#返回的是一个元组</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CRT</span>(<span class="hljs-params">eq</span>):<br>    <span class="hljs-keyword">return</span> reduce(uni, eq)<span class="hljs-comment">#</span><br><br><br>ms = [<span class="hljs-number">207867980504656835313307696396607264603</span>, <span class="hljs-number">245036212212570610987366430554968489325</span>, <span class="hljs-number">270836744824069537438646110613439698666</span>, <span class="hljs-number">319275775495422875474878625752594133023</span>, <span class="hljs-number">254268823435329877199449670714528712873</span>, <span class="hljs-number">213093607196415232366564484229844568444</span>, <span class="hljs-number">246921085368773491003187313772615702950</span>]<br>cs = [<span class="hljs-number">150031581047390726903711035932621949276</span>, <span class="hljs-number">21260202376534810598778595491323328519</span>, <span class="hljs-number">144049733622518360270048059408969512643</span>, <span class="hljs-number">236920143187836025924037873968303507493</span>, <span class="hljs-number">99781504248790469459151935530031893836</span>, <span class="hljs-number">69236016568483424294966410179787943383</span>, <span class="hljs-number">20613188366058016717435734248097940419</span>]<br>f, lcm = CRT(<span class="hljs-built_in">zip</span>(cs, ms))<span class="hljs-comment">#把两个列表打包，依次对应有点像二维数组,但其实返回的是元组</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>    x=<span class="hljs-built_in">str</span>(f+i*lcm).encode()<br>    u=hashlib.sha256(x).hexdigest()<br>    flag=<span class="hljs-string">&quot;SYC&#123;&quot;</span>+u+<span class="hljs-string">&quot;&#125;&quot;</span><br>    <span class="hljs-keyword">if</span> u[:<span class="hljs-number">5</span>]==<span class="hljs-string">&quot;6a651&quot;</span>:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">SYC&#123;6a651b7ce47b35cc1aca565028fb633fab9e35ca08e45d5ce987a6caeb500465&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AES加密以及代码实现</title>
    <link href="/2024/12/24/AES%E5%8A%A0%E5%AF%86%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/12/24/AES%E5%8A%A0%E5%AF%86%E5%9B%9E%E9%A1%BE%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AES加密回顾以及代码实现"><a href="#AES加密回顾以及代码实现" class="headerlink" title="AES加密回顾以及代码实现"></a>AES加密回顾以及代码实现</h1><p><a href="https://formaestudio.com/rijndaelinspector/archivos/Rijndael_Animation_v4_eng-html5.html">Rijndael_Animation_v4_eng-html5</a></p><p>这里放了一个动态演示AES加密过程的网站，有兴趣的可以观看，建议挂代理食用</p><p>Rcon是轮常量：<img src="https://pic4.zhimg.com/v2-1b2965b8a4932014106cee1a392ec980_r.jpg" alt="对称加密与非对称加密算法原理详解（对称加密篇） - 知乎"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接触密码学也两个月了，之前是学过AES的但是都是简单看了下大概，打CTF的时候喜欢python库脚本一把梭，对AES涉及的一些数学原理不理解，希望尝试用python实现AES加密。</p><h2 id="重要的前置知识，有限域多项式乘法运算。"><a href="#重要的前置知识，有限域多项式乘法运算。" class="headerlink" title="重要的前置知识，有限域多项式乘法运算。"></a>重要的前置知识，有限域多项式乘法运算。</h2><h3 id="1-GF-28-中的多项式"><a href="#1-GF-28-中的多项式" class="headerlink" title="1.GF(28)中的多项式"></a>1.GF(2<Sup>8</sup>)中的多项式</h3><p>伽罗瓦域之前以及了解过，大家有兴趣可以自己搜一下</p><p>$f(x)&#x3D;a_7x^7+a_6x^6+…+a_1x^1+a_2x^2$</p><p>其中ai是x&#x3D;2的系数&#x3D;只能为1或者0，该多项式可以表示一个二进制整数</p><h3 id="2-不可约的多项式规"><a href="#2-不可约的多项式规" class="headerlink" title="2.不可约的多项式规"></a>2.不可约的多项式规</h3><p>$m(X)&#x3D;x^8+x^4+x^3+x+1$</p><p>称之为不可约多项式，也就是质数</p><h3 id="多项式模运算"><a href="#多项式模运算" class="headerlink" title="多项式模运算"></a>多项式模运算</h3><p>接下来估计又是长篇大论了。多项式模运算我可以写的详细点</p><p>多项式运算分为三种</p><ul><li><p>使用代数方法运算的普通多项式</p></li><li><p>系数运算是模P的多项式，即再系数GF(p)中</p></li><li><p>系数在GF(p)中，且多项式被定义为模一个n次多项式m(x)的多项式运算</p></li></ul><p>我们乘法逆元要用到第三章，然后正常运算后对M(X)取余数，才是最终运算结果。</p><blockquote><p>例如f(x)&#x3D;x<sup>6</sup>+x<sup>3</sup>++1与g(x)&#x3D;x<sup>5</sup>+x<sup>4</sup>+x<sup>3</sup>相加</p><p>f(x)+g(x)&#x3D;x<sup>5</sup>+x<sup>4</sup>+1,和异或一样。作乘法时</p><p>f(x)*g(x)&#x3D;</p></blockquote><blockquote><p>讲一下多项式有限域相乘。先进行正常的代数相乘</p><p>得到，记得相加的时候是异或相加f(x)*g(x)&#x3D;x11+x10+x9+x8+x7+x6+x5+x4+x3 mod(m(x))</p><h6 id="x11-x3-x8—-多项式异或x3m-x-x11-x7-x6-x4-x3"><a href="#x11-x3-x8—-多项式异或x3m-x-x11-x7-x6-x4-x3" class="headerlink" title="x11&#x3D;x3*x8—&gt;多项式异或x3m(x)&#x3D;x11+x7+x6+x4+x3"></a>x<sup>11</sup>&#x3D;x<sup>3</sup>*x<sup>8</sup>—&gt;多项式异或x<sup>3</sup>m(x)&#x3D;x11+x7+x6+x4+x3</h6><p>f(x)&#x3D;x10+x9+x10+x9+x8+x5再异或x<sup>2</sup>m(x)&#x3D;x10+x6+x5+x3+x2</p><p>得到f(x)&#x3D;x9+x6+x3+x2异或相加xm(x)和m(x)求出结果</p><p>f(x)&#x3D;x<sup>7</sup>+x<sup>6</sup>+x<sup>5</sup>+x<sup>4</sup>+x<sup>2</sup>+x</p></blockquote><p>GF(2<sup>8</sup>)还定义了运算，称为x乘法，其定义为</p><p>x*b(x)&#x3D;b<sub>7</sub>x<sup>8</sup>+b<sub>6</sub>x<sup>7</sup>+…+b<sub>0</sub>x(mod m(x))</p><p>如果b<sub>7</sub>&#x3D;0,求模结果不变，否则乘积减去m(x),即求乘积的结果与m(x)异或。</p><p>由此的得出十六进制02乘b(x)相当于在字节上左移一位（最后一位补0），若b<sup>7</sup>&#x3D;1,则再与1B（00011011）做逐比特异或来实现，该运算记为b&#x3D;xtime(a)</p><p>上述运算将会应用在列混淆之中</p><p>接下来示例57(16进制)在该条件下乘02</p><blockquote><p>57&#x3D;01010111,02&#x3D;00000010相当于，第7位小于0，57左移一位后面补0。57&#x3D;10101110&#x3D;AE</p><p>如果是57*03可以看作57*（01+02)</p><p>如果AE*02,因为AE&#x3D;10101110,先将AE左移一位补0</p><p>01011100*02 mod(00011011),这些都是为了满足有限域内的条件，具体数学原理，我也不太明白</p></blockquote><h2 id="1-AES加密"><a href="#1-AES加密" class="headerlink" title="1. AES加密"></a>1. AES加密</h2><p>首先我们要知道，AES本身只能处理128位(16字节)的明文。在处理时将其按字节分成16块，4*4</p><table><thead><tr><th>A</th><th>E</th><th>I</th><th>N</th></tr></thead><tbody><tr><td>B</td><td>F</td><td>J</td><td>O</td></tr><tr><td>C</td><td>G</td><td>K</td><td>P</td></tr><tr><td>D</td><td>H</td><td>M</td><td>Q</td></tr></tbody></table><p>如果少了则填充0A。多了则重新排在另一个4*4的表格。</p><p>AES支持三种长度的密钥：<strong>128位，192位，256位</strong></p><p>128位经历10轮，之后两种多64位增加两轮。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/AES.5q7hdo4b6l.webp"></p><p>可以看出，AES加密有三个过程。初始轮，中间轮，最后轮。中间轮的数量在128Bites密钥中有</p><p>基础的四个过程。</p><ol><li>字节替换（SubBytes）q</li></ol><p>依据一个被称为S盒（Subtitution Box）的16*16大小的二维常量数组。示例如图。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/Shex.8l05jgfe41.webp"></p><p>如果我们要替换4d字节，那么我们就找到第4行，第d列即为e3。</p><ol start="2"><li><p>行位移（ShiftRows）</p><p>第一行不变，第二行左移一个字节，第三行左移三个字节，第四行左移四个字节。</p><table><thead><tr><th>A</th><th>E</th><th>I</th><th>N</th></tr></thead><tbody><tr><td>O</td><td>B</td><td>F</td><td>J</td></tr><tr><td>K</td><td>P</td><td>C</td><td>G</td></tr><tr><td>H</td><td>M</td><td>Q</td><td>D</td></tr></tbody></table><ol start="3"><li>列混淆（MixColumns）。</li></ol><p><img src="https://img2018.cnblogs.com/i-beta/1810390/201911/1810390-20191115142019897-587484033.png" alt="img"></p><p>用给定的一段矩阵左乘我们的数据，但是不完全跟矩阵乘法相同，示例结果如下，左乘的数</p><p>例如第一行第一列，得到的结果是<br>$$<br>q1&#x3D;(02<em>p1)⊕(03</em>p2)⊕(01<em>p3)⊕(01</em>p4)<br>$$<br>⊕是异或(^)的意思。</p><ol start="4"><li>轮密钥加(AddRoundKey)</li></ol><p>用明文矩阵和给定的轮密钥每一列进行异或。</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2024-12-24-145502.1lbw1l0ect.webp"></p></li></ol><p>例如如同。</p><p>这个密钥矩阵每轮都会改变。关于每轮的密钥扩展，</p><ul><li>每一轮都会生成一个新的轮密钥</li></ul><p><img src="https://rockfox0.github.io/picx-images-hosting/Keyadd.1vypuqh6zf.webp"></p><p>初始轮密钥为a0&#x2F;1&#x2F;2&#x2F;3.第<strong>i</strong>列的数据。</p><p>当 <strong>i!&#x3D;4</strong>n时。     **ai&#x3D;a[i-4] ^ a[i-1]**。</p><p>当i&#x3D;4n时。      <strong>a[i]&#x3D;a[i-4]^T(a[i-1])</strong></p><p>T(a[i-1])需要做出解释。</p><p>分为三步。例如a4&#x3D;a0^T(a[3])</p><ol><li><p>b3&#x3D;[09,cf,4f,3c]左移一位&lt;&lt;得a3&#x3D;[cf,4f,3c,09]</p></li><li><p>字节代换</p><p> 根据S盒。c3&#x3D;[8a,84,eb,01]</p></li><li><p>将前两步的结果同轮常量Rcon[j],j表示轮数，</p></li></ol><p>Rcon[j]是一个给定的4*j的表。</p><p>d3&#x3D;b3^c3^rj</p><p>就能得到T(a[3])&#x3D;d3</p><h3 id="AES加密的不同模式"><a href="#AES加密的不同模式" class="headerlink" title="AES加密的不同模式"></a>AES加密的不同模式</h3><p>AES加密算法的模式主要有五种,主要区别在于加密过程中明文和密文的处理方式以及安全性特</p><p>1.ECB模式</p><blockquote><ol><li>每个明文块被独立加密，相同的明文块得到相同的密文块。</li><li>不适合加密大量数据或具有重复模式的数据，容易受到攻击。</li></ol></blockquote><ol start="2"><li>CBC模式</li></ol><blockquote><ol><li><p>使用前一个密文块对当前明文块进行加密，增加了随机性，相同的明文块在不同位置得到</p></li><li><p>需要使用初始化向量（IV）来增加安全性。</p></li></ol></blockquote><ol start="3"><li>CFB模式。</li></ol><blockquote><ul><li>使用前一个密文块作为输入生成伪随机密钥流与明文进行异或运算得到密文。</li><li>可以支持实时加密和流加密。</li></ul></blockquote><ol start="4"><li>OFB模式</li></ol><blockquote><ul><li>类似于CFB，使用前一个密文块生成伪随机密钥流，然后与明文进行异或运算。</li><li>对加密和解密中的错误更加鲁棒，但不支持部分更新。</li></ul></blockquote><ol start="5"><li>CTR模式</li></ol><blockquote><ul><li>使用一个计数器与密钥输入加密算法生成伪随机密钥流，与明文进行异或运算。</li><li>可以并行加密和解密，适用于需要高效加密的场景。</li></ul></blockquote><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">import copy<br>def <span class="hljs-keyword">mul</span>(poly1, poly2):   # 两个多项式相乘<br>result = <span class="hljs-number">0</span><br>for index <span class="hljs-keyword">in</span> range(poly2<span class="hljs-number">.</span>bit_length()):<br>if poly2 &amp; (<span class="hljs-number">1</span> &lt;&lt; index):<br>result ^= (poly1 &lt;&lt; index)<br>return result<br><br>def mod(poly, mod = <span class="hljs-number">0b100011011</span>):    # 多项式poly模多项式<span class="hljs-number">100011011</span><br>while poly<span class="hljs-number">.</span>bit_length() &gt; <span class="hljs-number">8</span>:<br>poly ^= (mod &lt;&lt; (poly<span class="hljs-number">.</span>bit_length() - <span class="hljs-number">9</span>))<br>return poly<br><br>def substitute(m_hex, inverse=False):<br>    m_s = []<br>    box = s_box if <span class="hljs-keyword">not</span> inverse else i_s_box<br>    for i <span class="hljs-keyword">in</span> m_hex:<br>        x, y = <span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>) // <span class="hljs-number">16</span>, <span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>) % <span class="hljs-number">16</span><br>        temp = hex(box[x*<span class="hljs-number">16</span>+y])<br>        m_s<span class="hljs-number">.</span>append(temp)<br>    return m_s<br><br>s_box =   [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>]<br>i_s_box = [<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7D</span>]<br>rcon = [<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x36</span>]<br>mix_column_matrix   = [<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>] # 列混合乘的矩阵<br>i_mix_column_matrix = [<span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0xd</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xe</span>] # 列混合乘的逆矩阵<br>def gen_key(key):<br>    key_hex = get_hex(key)<br>    key_rotate = []<br>    w = [[] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">44</span>)]<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):<br>        w[i // <span class="hljs-number">4</span>].append(key_hex[i])<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>, <span class="hljs-number">44</span>):<br>        gw = copy<span class="hljs-number">.</span>deepcopy(w[i - <span class="hljs-number">1</span>])<br>        if i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:<br>            gw[<span class="hljs-number">0</span>], gw[<span class="hljs-number">1</span>], gw[<span class="hljs-number">2</span>], gw[<span class="hljs-number">3</span>] = gw[<span class="hljs-number">1</span>], gw[<span class="hljs-number">2</span>], gw[<span class="hljs-number">3</span>], gw[<span class="hljs-number">0</span>]<br>            gw = substitute(gw) #g(w(i-<span class="hljs-number">1</span>))<br>            gw[<span class="hljs-number">0</span>] = hex(<span class="hljs-keyword">int</span>(gw[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>) ^ rcon[i // <span class="hljs-number">4</span> - <span class="hljs-number">1</span>]) #ppt上说的<span class="hljs-number">2</span>^(i-<span class="hljs-number">4</span>)/<span class="hljs-number">4</span>有误，看书p84<br>        for j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            w[i].append(hex(<span class="hljs-keyword">int</span>(gw[j], <span class="hljs-number">16</span>) ^ <span class="hljs-keyword">int</span>(w[i-<span class="hljs-number">4</span>][j], <span class="hljs-number">16</span>)))<br>    key_rotate = [w[i * <span class="hljs-number">4</span>] + w[i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>] + w[i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>] + w[ i* <span class="hljs-number">4</span> + <span class="hljs-number">3</span>] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)] # 轮密钥列表,每个元素都是有<span class="hljs-number">16</span>个字节的列表<br>    return key_rotate<br><br>def <span class="hljs-keyword">xor</span>(a, key): #a和key都是列表，都存了<span class="hljs-number">16</span>字节<br>    return [hex(<span class="hljs-keyword">int</span>(a[i], <span class="hljs-number">16</span>) ^ <span class="hljs-keyword">int</span>(key[i], <span class="hljs-number">16</span>)) for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)]<br><br>def get_hex(s): #得到一个字符串的十六进制值，以列表形式返回<br>    return [hex(ord(i)) for i <span class="hljs-keyword">in</span> s]<br><br>def shiftrows(a, inverse=False): #inverse为True时表示为逆操作，默认为False<br>    return [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">3</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">11</span>] ] if <span class="hljs-keyword">not</span> inverse else [ a[<span class="hljs-number">0</span>], a[<span class="hljs-number">13</span>], a[<span class="hljs-number">10</span>], a[<span class="hljs-number">7</span>], a[<span class="hljs-number">4</span>], a[<span class="hljs-number">1</span>], a[<span class="hljs-number">14</span>], a[<span class="hljs-number">11</span>], a[<span class="hljs-number">8</span>], a[<span class="hljs-number">5</span>], a[<span class="hljs-number">2</span>], a[<span class="hljs-number">15</span>], a[<span class="hljs-number">12</span>], a[<span class="hljs-number">9</span>], a[<span class="hljs-number">6</span>], a[<span class="hljs-number">3</span>] ]<br><br>def mixcolumn(m_row, inverse=False):<br>    matrix = mix_column_matrix if <span class="hljs-keyword">not</span> inverse else i_mix_column_matrix<br>    m_col = []<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>):<br>        x, y = i % <span class="hljs-number">4</span>, i // <span class="hljs-number">4</span><br>        result = <span class="hljs-number">0</span><br>        for j <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>            result ^= (<span class="hljs-keyword">mul</span>(matrix[x * <span class="hljs-number">4</span> + j], <span class="hljs-keyword">int</span>(m_row[y * <span class="hljs-number">4</span> + j], <span class="hljs-number">16</span>)))<br>        result = mod(result)<br>        m_col<span class="hljs-number">.</span>append(hex(result))<br>    return m_col<br><br>def aes_encrypt(m, key_rotate):<br>    m_hex = get_hex(m) #得到明文的hex列表<br>    m_xor = <span class="hljs-keyword">xor</span>(m_hex, key_rotate[<span class="hljs-number">0</span>]) #将明文初始<span class="hljs-keyword">xor</span>密钥 w0 w1 w2 w3<br>    for rotate <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>): #十轮<br>        m_s = substitute(m_xor) # 字节代替<br>        m_row = shiftrows(m_s)<br>        m_col = m_row #列混合<br>        if rotate != <span class="hljs-number">10</span>: #最后一轮不用列混合<br>            m_col = mixcolumn(m_row)<br>        m_xor = <span class="hljs-keyword">xor</span>(m_col, key_rotate[rotate])<br>    ciphertext = <span class="hljs-string">&quot;&quot;</span> #输出的密文为每个十六进制字符的联结，类似e365e09962d634a8fbfe8359c57b22c5。一共<span class="hljs-number">32</span>个，每两个字母对应了一个字节的十六进制。<span class="hljs-number">16</span>个进制，<span class="hljs-number">128</span>位。<br>    for i <span class="hljs-keyword">in</span> m_xor:<br>        ciphertext += (i[<span class="hljs-number">2</span>:] if len(i[<span class="hljs-number">2</span>:]) == <span class="hljs-number">2</span> else <span class="hljs-string">&quot;0&quot;</span> + i[<span class="hljs-number">2</span>:]) #对类似<span class="hljs-number">0xf</span>的十六进制格式化为<span class="hljs-number">0x0f</span><br>    return ciphertext<br><br>def aes_decrypt(c, key_rotate):<br>    c_hex = [<span class="hljs-string">&#x27;0x&#x27;</span> + c[i * <span class="hljs-number">2</span>] + c[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>)] #将密文恢复为列表<br>    c_xor = <span class="hljs-keyword">xor</span>(c_hex, key_rotate[<span class="hljs-number">10</span>])<br>    c_row = shiftrows(c_xor, inverse=True)<br>    c_s = substitute(c_row, inverse=True)<br>    for rotate <span class="hljs-keyword">in</span> range(<span class="hljs-number">9</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>): #循环<span class="hljs-number">9</span>次<br>        c_xor = <span class="hljs-keyword">xor</span>(c_s, key_rotate[rotate])<br>        c_col = mixcolumn(c_xor, inverse=True)<br>        c_row = shiftrows(c_col, inverse=True)<br>        c_s = substitute(c_row, inverse=True)<br>    plaintext = <span class="hljs-string">&quot;&quot;</span><br>    for i <span class="hljs-keyword">in</span> <span class="hljs-keyword">xor</span>(c_s, key_rotate[<span class="hljs-number">0</span>]): #将明文的hex列表转化为字母<br>        plaintext += chr(<span class="hljs-keyword">int</span>(i, <span class="hljs-number">16</span>))<br>    return plaintext<br># 原始明文和密钥<br>m = <span class="hljs-string">&quot;1234567890abcdef&quot;</span><br>key = <span class="hljs-string">&quot;1234567890abcdef&quot;</span><br><br># 生成轮密钥<br>key_rotate = gen_key(key)<br><br># 加密<br>ciphertext = aes_encrypt(m, key_rotate)<br>print(<span class="hljs-string">&quot;Ciphertext:&quot;</span>, ciphertext)<br><br># 解密<br>plaintext = aes_decrypt(ciphertext, key_rotate)<br>print(<span class="hljs-string">&quot;Decrypted text:&quot;</span>, plaintext)<br><br></code></pre></td></tr></table></figure><h3 id="一道题"><a href="#一道题" class="headerlink" title="一道题"></a>一道题</h3><h3 id="Knuckle-Buster"><a href="#Knuckle-Buster" class="headerlink" title="Knuckle Buster"></a>Knuckle Buster</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">在这个挑战中，两个人 Alice 和 Bob 正在秘密交流。他们使用 Diffie-Hellman 密钥交换协议来保护他们的通信。我将为您提供足够的信息来解密他们之间截获的消息。您需要做的就是计算共享密钥并对其进行解密以获取标志。<br><br>这是加密的标志。它使用 AES-256-CBC 加密，其中 SHA-256 用于密钥派生，并预置了 16 字节 IV。<br><br>publicA<br>-----BEGIN PUBLIC KEY-----<br>MIGaMFMGCSqGSIb3DQEDATBGAkEAiBB/FlC3W8aPLJxYGXzKsnpEmPKIKR4JetlA1ky+TKTYofXUKSFucGxtrmWlVFjnLZUqJFjj0bVDKSiYOfod1wIBAgNDAAJAN3YrjXtIssyugO9tQ3BRy2TN92Qkhkp/VP5zfLEMQg1AE/YofkCIc/KSZOBpuroiQoCK0qTNkD4HzCzDa7ap5Q==<br><span class="hljs-section">-----END PUBLIC KEY</span><br><span class="hljs-section">-----</span><br>privateB<br>-----BEGIN PRIVATE KEY<br>-----MIGcAgEAMFMGCSqGSIb3DQEDATBGAkEAiBB/FlC3W8aPLJxYGXzKsnpEmPKIKR4JetlA1ky<span class="hljs-code">+TKTYofXUKSFucGxtrmWlVFjnLZUqJFjj0bVDKSiYOfod1wIBAgRCAkBSsgvp3xivPK6Wp2X+</span>SIjGllg1MT4zJdEoyUjV6iDLGytdeLpokYOO6xss GIiVb8b6A/5onnopra2iXBb0dS5rn<br><span class="hljs-section">-----END PRIVATE KEY</span><br><span class="hljs-section">-----</span><br>dhparam<br>-----BEGIN DH 参数-----<br>MEYCQQCIEH8WULdbxo8snFgZfMqyekSY8ogpHgl62UDWTL5MpNih9dQpIW5wbG2uZaVUWOctlSokWOPRtUMpKJg5+h3XAgEC<br><span class="hljs-section">-----END DH 参数</span><br><span class="hljs-section">-----</span><br></code></pre></td></tr></table></figure><p>这是一个基础的AES-CBC加密的DH密钥协商通信。</p><p>整数A，b和dhpraram&#x3D;p分别代表了不同的内容。</p><p>P代表了DH中的那个大素数</p><p>协商密钥s&#x3D;A^b^ modp。我们可以用python库或者在线网站提取证书内容，我这里直接用在线网站提取。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import long_to_bytes<br><span class="hljs-keyword">from</span> nacl.hash import sha256<br><br><span class="hljs-attribute">A</span>=2904759796559791913432271862881153382405066619449245072640765589088056204557610156688164735437813811038059974077392278848266560053756599200768336365791717<br><br><span class="hljs-attribute">b</span>=4331114469004424101417452893702925534425506579657643668189751982919697469877978008431455296821274876511281317445036625437218508812066778389432224377969383<br><br><span class="hljs-attribute">P</span>=7126272917341517371021493195431918906260195973018916295547365059382419902222692924409321274266211448465008202837786841249505239162738008847348464904445399<br><span class="hljs-attribute">s</span>=pow(A,b,P)<br><span class="hljs-attribute">key</span>=sha256(long_to_bytes(s))<br>with open(<span class="hljs-string">&quot;C:\\Users\\24055\OneDrive\文档\Crypto200-1_flag.txt (1).enc&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:<br>    <span class="hljs-attribute">iv</span>=f.read(16)<br>    <span class="hljs-attribute">cipher</span>=f.read()<br><span class="hljs-attribute">cipher1</span>=cipher.hex()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;IV:&quot;</span>,iv.hex())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cipher1:&quot;</span>,cipher1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Key:&quot;</span>,key)#之后可以拿到在线网站解密即可<br><span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">IV: fe942f31b9579db8905e4202793cd70e</span><br><span class="hljs-string">Cipher1: c206bd30b9339b208876fa125faac03f461db5cd6cf87ddf232ba7ff118d0d25</span><br><span class="hljs-string">Key: b&#x27;</span>bb7d44a422b90bb2b585c1639e46a7a7dff2cca315f564450694295d187b85d8<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>flag: poctf&#123;uwsp_f1r3_4nd_br1m570n3&#125;<br></code></pre></td></tr></table></figure><h3 id="SU-rsa"><a href="#SU-rsa" class="headerlink" title="SU_rsa"></a>SU_rsa</h3><p>应该算是比较容易分析的简单rsa</p><p>由于给的是d的高位，直接可以用得到k(这算是一种整除，当时确实没想到这种方法，因为n和p,q,k差值过大所以k可以利用整除求出来)<br>$$<br>k&#x3D;(e<em>d_m-1)&#x2F;&#x2F;n + 1<br>$$<br>由标准关系得到<br>$$<br>k</em>(n-p-q+1)+1&#x3D;&#x3D;e*d\<br>(p+q) &#x3D;(n+1+k^{-1})\mod e<br>$$<br>相当于给出了p%e或者q%e的值，e为256bits，显然small_roots求解一下就行。 </p><p>值得注意的是，这里由于取的低位比较小，已知信息比较少，需要爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>d_m =  <span class="hljs-number">54846367460362174332079522877510670032871200032162046677317492493462931044216323394426650814743565762481796045534803612751698364585822047676578654787832771646295054609274740117061370718708622855577527177104905114099420613343527343145928755498638387667064228376160623881856439218281811203793522182599504560128</span><br>n =  <span class="hljs-number">102371500687797342407596664857291734254917985018214775746292433509077140372871717687125679767929573899320192533126974567980143105445007878861163511159294802350697707435107548927953839625147773016776671583898492755338444338394630801056367836711191009369960379855825277626760709076218114602209903833128735441623</span><br>e =  <span class="hljs-number">112238903025225752449505695131644979150784442753977451850362059850426421356123</span><br>k = (e*d_m-<span class="hljs-number">1</span>)//n + <span class="hljs-number">1</span><br>s = (n+<span class="hljs-number">1</span>+inverse_mod(k, e))%e<br>PR.&lt;x&gt; = PolynomialRing(Zmod(e))<br>f = x^<span class="hljs-number">2</span>-s*x+n<br>p0 = <span class="hljs-built_in">int</span>(f.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(p0)<br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">copper_attack</span>(<span class="hljs-params">i</span>):<br>    PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>    f = e*(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>*x + i) + p0<br>    f = f.monic()<br>    res = f.small_roots(X=<span class="hljs-number">2</span>^<span class="hljs-number">244</span>, beta=<span class="hljs-number">0.499</span>, epsilon=<span class="hljs-number">0.02</span>)<br>    <span class="hljs-keyword">if</span>(res != []):<br>        t = <span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>])<br>        p = e*(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>*t + i) + p0<br>        q = n // p<br>        <span class="hljs-keyword">assert</span> p * q == n <span class="hljs-keyword">and</span> isPrime(p) <span class="hljs-keyword">and</span> isPrime(q)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;SUCTF&#123;&#x27;</span>,sha256(<span class="hljs-built_in">str</span>(p).encode()).hexdigest()[:<span class="hljs-number">32</span>],<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;SUCTF&#123;&#x27;</span>,sha256(<span class="hljs-built_in">str</span>(q).encode()).hexdigest()[:<span class="hljs-number">32</span>],<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">with</span> multiprocessing.Pool(processes=<span class="hljs-number">16</span>) <span class="hljs-keyword">as</span> pool:<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> tqdm.tqdm(pool.imap(copper_attack, <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>)), total=<span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>^<span class="hljs-number">12</span>)):<br>        <span class="hljs-keyword">if</span>(_):<br>            <span class="hljs-keyword">break</span><span class="hljs-comment">#多线程</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>python</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DH密钥交换协议</title>
    <link href="/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DH-密钥交换协议"><a href="#DH-密钥交换协议" class="headerlink" title="DH 密钥交换协议"></a>DH 密钥交换协议</h1><p>在基于<a href="https://zhida.zhihu.com/search?content_id=221358888&content_type=Article&match_order=1&q=%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&zhida_source=entity">对称加密</a>进行安全通信的过程中，通信双方需要持有一个共享的密钥。只有这样，由任何一方加密的信息才能由另一方使用相同的密钥解密。但是<strong>在能够安全的通信之前，通信双方应该如何约定一个共享的密钥呢？这就是安全中的经典问题：密钥配送问题（Key Distribution Problem</strong>[<a href="https://zhuanlan.zhihu.com/p/599518034#ref_1">1]</a><strong>）</strong>。</p><p>Diffe-Hellman密钥交换协议只是其中一种约定功能共享密钥的方式，</p><h2 id="DHKE协议简介"><a href="#DHKE协议简介" class="headerlink" title="DHKE协议简介"></a>DHKE协议简介</h2><p><strong>DHKE是一种通过公共通道安全地交换加密密钥的数学方法，以Whitfield Diffi</strong>e和Martin Hellman的名字命名。</p><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><blockquote><p>$c&#x3D;G^e mod P(0&lt;&#x3D;c&lt;P)$</p><p>G是P的原根，满足条件</p><p>{g1modp,g2modp,g3modp,…,gp−1modp}&#x3D;{1,2,3,…,p−1}</p></blockquote><h2 id="DHKE协议的过程"><a href="#DHKE协议的过程" class="headerlink" title="DHKE协议的过程"></a>DHKE协议的过程</h2><p><img src="https://rockfox0.github.io/picx-images-hosting/v2-39cb492c048f5f2a643368c135626925_1440w.175g9ciqha.webp"></p><ol><li><p>客户端和服务端生成协商大素数P及其原根G</p></li><li><p>客户端生成私钥和公钥a和A</p><blockquote><p>A&#x3D;G<sup>a</sup> mod p</p></blockquote></li><li><p>将公钥A发送给服务端</p></li><li><p>服务端生成私钥b和公钥B</p></li></ol><blockquote><p>$B&#x3D;G^b mod P$</p></blockquote><ol><li><p>服务端将公钥B发送给客户端</p></li><li><p>客户端已知G,P,A,a,B计算密钥S1</p></li><li><blockquote><p>$S1&#x3D;B^a mod P$ </p></blockquote></li><li><p>服务端已知A B b G P计算共享密钥</p></li></ol><blockquote><p>$S2&#x3D;A^b mod p$</p></blockquote><ol start="9"><li>客户端和服务端共享密钥S</li></ol><blockquote><p>$S&#x3D;S1&#x3D;B^a mod P&#x3D;(G^b) mod p&#x3D;A^b mod P&#x3D;S2$</p></blockquote><p>可以知道共享密钥的原理，</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格密码</title>
    <link href="/2024/12/23/%E6%A0%BC%E6%A0%BC%E6%A0%BC%E5%AF%86%E7%A0%81/"/>
    <url>/2024/12/23/%E6%A0%BC%E6%A0%BC%E6%A0%BC%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h1><ol><li>简介：LLL算法用于解决最短向量问题的多项式时间复杂度算法。</li></ol><h2 id="LLL算法解释"><a href="#LLL算法解释" class="headerlink" title="LLL算法解释"></a>LLL算法解释</h2><h2 id="对格的认识"><a href="#对格的认识" class="headerlink" title="对格的认识"></a>对格的认识</h2><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/0368780808a7e1b750e955cf6b101d73.2yyf2pk3ws.webp" alt="0368780808a7e1b750e955cf6b101d73"></p><p>不同的基也可以生成同一个格。</p><p>例如一个基向量是（1,0)和（0，1）构成的格。该格用数学符号表示。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.5xap69j4x6.webp"></p><p><img src="https://www.helloimg.com/i/2024/12/17/6760eb205ecb2.png"></p><p>格的维数:即向量的个数，上述表示的是一个二维的格。</p><p>然后根据系数a的不同就能得到不同的L集合。</p><p>假定现在v1,v2,v3…vn(称为张空间) 是格L的基，让存在不同个集合属于L 即w1 w2 …,wm。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.99tf0nbkwz.webp" alt="img"></p><p>可以转化位矩阵运算。</p><p>AV&#x3D;W</p><blockquote><p>线性无关（linearly independence）v1 , v2 , … , vn线性无关，当且仅当方程a1v1+…+anvn&#x3D;0的唯一解是a全部为0；否则线性相关（linearly dependent）</p><p>正交基（orthogonal basis）v1 , v2 , … , vn 中任意不同的两个v点积的结果为0</p><p>规范正交（orthonormal） 上面的每一个v的**欧几里得范数(类似于模 长度)**为1</p><p>据此在上面的w的||w||2 &#x3D; 所有系数a的平方和</p></blockquote><p>A(转置)&#x3D;(a1,a2…,an) V&#x3D;(v1,v2…,vn) w&#x3D;(w1,w2..,wn)</p><p>AV&#x3D;W;</p><p>示例一个有关向量的问题</p><p>选定基向量生成格L:</p><p><img src="https://rockfox0.github.io/picx-images-hosting/eaba6027147f175e55cc60cb4c6b0e6c.1lbw05nx6x.webp"></p><p>化作行矩阵<img src="https://rockfox0.github.io/picx-images-hosting/d333e18fcc3fa9fcd7c7939bdc22f328.7ax8bqja7e.webp"></p><p>将设L的某向量组：</p><p><img src="https://rockfox0.github.io/picx-images-hosting/ecdebf47b0420ef33e2e6ff92c32262d.39l8xcg9ch.webp"></p><p>其系数a形成向量组U&#x3D;</p><p><img src="https://rockfox0.github.io/picx-images-hosting/a5f5017c9499507f3eca6345e218dec0.8s3ddhost5.webp"></p><p>W(转置)&#x3D;（w1,w2,w3).</p><p>W&#x3D;A*U</p><p>操作代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#sage</span><br>v1 = <span class="hljs-selector-attr">[2, 1, 3]</span><br>v2 = <span class="hljs-selector-attr">[1, 2, 0]</span><br>v3 = <span class="hljs-selector-attr">[2, -3, -5]</span><br><br>A= <span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[v1, v2, v3]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(A)</span></span><br>U=<span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[[1, 0, 1]</span>, <span class="hljs-selector-attr">[1, -1, 2]</span>, <span class="hljs-selector-attr">[1, 2, 0]</span>])<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U.det()</span></span>)<br>W=A*U<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(W)</span></span><br>int_U=U<span class="hljs-selector-class">.inverse</span>()#求矩阵的逆<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;.............&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int_U)</span></span><br>assert int_U*W==A<br></code></pre></td></tr></table></figure><p>SVP(最短向量问题)</p><p>一个格会有无数多个向量集合v</p><p>最短向量问题，指的格L中最短的非零向量，即寻找一个v满足<em><strong>欧几里得范数</strong></em>最小（指的该集合每一个元素的平方和再开平方，类似于模的长度）范数就是长度。</p><blockquote><ol><li>基：</li></ol><p>在向量空间的每一个点，都可以通过对基的线性组合变化得到，叫做基向量</p><p>一个格可能会有很多个基 不唯一</p><ol start="2"><li>正交基：</li></ol><p>基相互垂直，就是正交基</p><ol start="3"><li><strong>格基约规</strong></li></ol><p><img src="https://rockfox0.github.io/picx-images-hosting/32a8129eef81a915f4b4f7ace6f8d010.361mzmnojh.webp"></p><p>random basis也是一组基，可以构成这个格子中的所有点 但是不是正交基</p><p>通过LLL或BKZ算法 得到正交基或者是最接近正交基，我们通过到他们，在之中</p></blockquote><p>Cvp(最近向量问题)—不是很能理解这里先留着</p><h2 id="接下来实战一些格的题"><a href="#接下来实战一些格的题" class="headerlink" title="接下来实战一些格的题"></a>接下来实战一些格的题</h2><h3 id="hermite-定理"><a href="#hermite-定理" class="headerlink" title="hermite 定理"></a>hermite 定理</h3><p><img src="https://rockfox0.github.io/picx-images-hosting/eae24001bbe299decdd775bef1ea1800.73u0gaysyt.webp"></p><p>给出最短向量的上限。</p><p>2024极客大挑战</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c">from Crypto.Util.number import *<br><br>flag <span class="hljs-punctuation">=</span> b&#x27;******&#x27;<br>m <span class="hljs-punctuation">=</span> bytes_to_long<span class="hljs-punctuation">(</span>flag<span class="hljs-punctuation">)</span><br><br>assert m.bit_length<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">=</span><span class="hljs-punctuation">=</span> <span class="hljs-number">327</span><br>p <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>a <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>c <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">400</span><span class="hljs-punctuation">)</span><br><br>b <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>a*m <span class="hljs-punctuation">+</span> c<span class="hljs-punctuation">)</span> % p<br><br>print<span class="hljs-punctuation">(</span>f&#x27;a = &#123;a&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;b = &#123;b&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;p = &#123;p&#125;&#x27;<span class="hljs-punctuation">)</span><br><br>&#x27;&#x27;&#x27;<br>a = <span class="hljs-number">16979084980432</span><span class="hljs-number">35409461972047</span><span class="hljs-number">08402762862586</span><span class="hljs-number">19760418310258</span><span class="hljs-number">92707418597085</span><span class="hljs-number">50301920348112</span><span class="hljs-number">94130599976409</span><span class="hljs-number">21979969292984</span><span class="hljs-number">74590062625556</span><span class="hljs-number">80679361326852</span><span class="hljs-number">77637740137726</span><span class="hljs-number">85954699561684</span><span class="hljs-number">24494543484365</span><span class="hljs-number">65153078018829</span><span class="hljs-number">95934869499880</span><span class="hljs-number">28859414291938</span><span class="hljs-number">15017964888150</span><span class="hljs-number">33294127591623</span><span class="hljs-number">26089476475021</span><span class="hljs-number">45889934568404</span><span class="hljs-number">04443515671353</span><span class="hljs-number">80261445041171</span>7<br>b = <span class="hljs-number">87985708831523</span><span class="hljs-number">23898094893816</span><span class="hljs-number">54149843183794</span><span class="hljs-number">59926002798504</span><span class="hljs-number">43596453820344</span><span class="hljs-number">38779885998886</span><span class="hljs-number">15810231215118</span><span class="hljs-number">82813830689557</span><span class="hljs-number">20628331079889</span><span class="hljs-number">65151522391460</span><span class="hljs-number">21683769192796</span><span class="hljs-number">02498745118188</span><span class="hljs-number">78134399363147</span><span class="hljs-number">00804256222291</span><span class="hljs-number">02347399406975</span><span class="hljs-number">53852540265617</span><span class="hljs-number">60348299509120</span><span class="hljs-number">31050401874604</span><span class="hljs-number">85673579382171</span><span class="hljs-number">26019729178374</span><span class="hljs-number">88867659293761</span><span class="hljs-number">79151804062085</span><br>p = <span class="hljs-number">13172449451206</span><span class="hljs-number">56588010397665</span><span class="hljs-number">46788821718063</span><span class="hljs-number">96314446781873</span><span class="hljs-number">57680406313670</span><span class="hljs-number">69153816254855</span><span class="hljs-number">22965544955909</span><span class="hljs-number">91886944032600</span><span class="hljs-number">44990366292026</span><span class="hljs-number">91608534025007</span><span class="hljs-number">71987352157741</span><span class="hljs-number">49087025577263</span><span class="hljs-number">76984665072859</span><span class="hljs-number">31801010739405</span><span class="hljs-number">07285459917860</span><span class="hljs-number">72655138522748</span><span class="hljs-number">17158735036126</span><span class="hljs-number">83249433020201</span><span class="hljs-number">72919086243047</span><span class="hljs-number">60548221028654</span><span class="hljs-number">41136763977415</span><span class="hljs-number">82433185880161</span>7<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><p>已知a,b,p。</p><p>接下来构造函数</p><blockquote><p>b&#x3D;am+c-kp</p><p>c&#x3D;b+kp-am</p><p>m&#x3D;0+m+0</p><p>1&#x3D;[1,0,0]</p><p>[1,m,k]*[1,0,b&#x2F;&#x2F;0,1,-a&#x2F;&#x2F;0,0,p]&#x3D;[1,m,c]</p><p>如果m和c远远小于a,b,p则[1,m,c]可视为最短向量,通过求出最短向量即可求出m和c。但是这里[1,0,b]不能确定是否一定比[1,m,c]大很多，所以我们可以先尝试</p></blockquote><img src="https://www.helloimg.com/i/2024/12/19/67642106d12f7.jpg" style="zoom:33%;" /><p>这里构造出来，$b-a*m +kp &#x3D; c$<br>$$(1\quad m\quad k )\begin{bmatrix}1&amp;0&amp;b\0&amp;1&amp;-<br>a\0&amp;0&amp;p\end{bmatrix}&#x3D;\begin{pmatrix}1&amp;m&amp;c\end{pmatrix}$$<br>$||\mathbf{v}||&#x3D;\sqrt{1+|m|2+|c|2}\approx2^{401}&gt;|p|{1&#x2F;3}&#x3D;2^{341}$<br>补个$2^{200}$<br>|V|&lt;&#x3D;|p|*1&#x2F;3，并且大小接近，但是为了它解决一些问题（我也不知道是啥），但是加了ZZ之后早格的范围变大了一些。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><span class="hljs-attribute">a</span> = <span class="hljs-number">169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717</span><br><span class="hljs-attribute">b</span> = <span class="hljs-number">87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085</span><br><span class="hljs-attribute">p</span> = <span class="hljs-number">131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617</span><br><br><br><span class="hljs-attribute">M</span> = matrix([[<span class="hljs-number">2</span>^<span class="hljs-number">377</span>,<span class="hljs-number">0</span>, b],<span class="hljs-meta"> [0,1, -a],[0,0,p]])</span><br><span class="hljs-meta">L = M.LLL()[0]</span><br><br><span class="hljs-attribute">print</span>(long_to_bytes(L[<span class="hljs-number">1</span>]))<br><br><span class="hljs-comment">#b&#x27;SYC&#123;1e989433efffd767589e989ad0f091075c06&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="easyLattice"><a href="#easyLattice" class="headerlink" title="easyLattice"></a>easyLattice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">47</span><br><br>f = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>g = getPrime(<span class="hljs-number">128</span>)<br>h = (gmpy2.invert(f, p) * g %<br>     p)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h =&#x27;</span>, h)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, p)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span><br><span class="hljs-string">p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/12/20/6765634b5c0e0.jpg"></p><p>造格，(2p)**1&#x2F;2&gt;&#x3D;(f^2+ g^2) ^1&#x2F;2  不成立，所以我们需要配平，对h和p同时乘256如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br>import gmpy2<br>h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443<br>p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     <br><span class="hljs-attribute">b</span>=2^256<br><span class="hljs-attribute">L</span>=matrix(ZZ,[[1,b*h],[0,b*p]])<br><span class="hljs-built_in">print</span>(L.LLL()[0])<br>f,<span class="hljs-attribute">g</span>=L.LLL()[0]<br><span class="hljs-attribute">f</span>=abs(f)<br><span class="hljs-built_in">print</span>(long_to_bytes(f)<br>’‘’<br>(-50073894085033274448337202692453522746880698077702322983028272289946704698284083256500537353714697134260425361796, -29555150073396592208680335494684523983684143293301981158157800432304888982432677680588686983225737089584138075242496)<br>b<span class="hljs-string">&#x27;SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;A\xf0\x89\x84&#x27;</span><br>‘’‘<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD5算法原理以及实现</title>
    <link href="/2024/04/23/MD5%E7%AE%97%E6%B3%95/"/>
    <url>/2024/04/23/MD5%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h1><p> MD5（单向散列算法） 的全称是Message-Digest Algorithm 5（信息-摘要算法）</p><p>MD5的功能:</p><blockquote><p>输入任意长度的信息，经过处理，输出位128位的信息；不同的输入可以得到不同的结果(唯一性)</p><p>根据128位输出结果反推出输入信息是及其困难的(不可逆)</p></blockquote><ul><li>散列函数</li></ul><blockquote><p>散列函数是一种将输入数据映射到固定大小的散列值的函数。它通过对输入数据进行计算，生成一个唯一的散列值，用于快速查找或验证数据的完整性。</p></blockquote><p>散列函数的特点和要求</p><blockquote><ol><li>均匀分布:散列函数将输入数据均匀地分布在散列值的范围内，以避免碰撞(即多个不同的数据得到相同散列值)的发生–不过无法完全避免</li><li>碰撞概率最小化</li><li></li></ol></blockquote><ul><li>memcpy</li></ul><blockquote><p>复制字符串，原理自查。</p><p>memcpy(需要赋值的char [],被复制的char1 []的起始位置，被复制的数据多少)；</p><p><a href="https://www.runoob.com/cprogramming/c-function-memcpy.html">C 库函数 – memcpy() | 菜鸟教程</a></p></blockquote><h2 id="大致过程"><a href="#大致过程" class="headerlink" title="大致过程"></a>大致过程</h2><h3 id="填充该数据"><a href="#填充该数据" class="headerlink" title="填充该数据"></a>填充该数据</h3><p>示例输入 message ,将其加上64bit 然后补充至512的 K倍。最后的64bit是表示的</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-24-170516.2a5aesc1oq.webp"></p><p>就像这样。</p><p>然后每一个512bit进行HMD5的操作</p><p><img src="https://rockfox0.github.io/picx-images-hosting/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE-2025-04-24-170826.4joay9w3ap.webp" alt="image-20250424170829070"></p><p>接下来我们只需知道HMD5是什么操作就行了</p><p>这里的IV是初始的数据，128Bit是固定的</p><h3 id="初始化缓冲区"><a href="#初始化缓冲区" class="headerlink" title="初始化缓冲区"></a>初始化缓冲区</h3><p>算法实验128bit的缓冲区存放中间结果和最终哈希，128bit 可以看做四组32-bit字所占的Bit位。$Buffer_A,Buffer_B,Buffer_C,Buffer_D$. 每个缓冲区都以小端的方式存储数据. 将 4 块 Buffer 组合起来记为链接向量 CVi。</p><h3 id="循环哈希"><a href="#循环哈希" class="headerlink" title="循环哈希"></a>循环哈希</h3><p>调用$H_{MD5}(mi,CVi)$数对魅族消息分组进行哈希计算</p><p><img src="https://rockfox0.github.io/picx-images-hosting/2724888-20221023140447258-1939332805.83a8o3b8wb.webp" alt="img"></p><p>由上图可知，哈希函数计算分为4大步，每一大步又有16小伦次。，共进行64次运算。我们将512bit的M存储在uint_32 X[16]这个数组中。得到的128bit与之前的相加就行了。</p><h3 id="每一轮轮函数"><a href="#每一轮轮函数" class="headerlink" title="每一轮轮函数"></a>每一轮轮函数</h3><p>每轮进行16次计算，每次计算用特定方式调用T和X中的数据，详情看代码</p><p><img src="https://rockfox0.github.io/picx-images-hosting/2724888-20221023140446865-1970868950.wirarctno.webp" alt="img"></p><p>CLS 表示循环左位移。</p><p>详情见代码，四轮每一个函数有区别的详情见代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span> <span class="hljs-comment">// for uint* type</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span> <span class="hljs-comment">// for CHAR_BIT</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> T[<span class="hljs-number">64</span>] = &#123;<br><span class="hljs-number">0xd76aa478</span>, <span class="hljs-number">0xe8c7b756</span>, <span class="hljs-number">0x242070db</span>, <span class="hljs-number">0xc1bdceee</span>, <span class="hljs-number">0xf57c0faf</span>, <span class="hljs-number">0x4787c62a</span>, <span class="hljs-number">0xa8304613</span>, <span class="hljs-number">0xfd469501</span>,<br><span class="hljs-number">0x698098d8</span>, <span class="hljs-number">0x8b44f7af</span>, <span class="hljs-number">0xffff5bb1</span>, <span class="hljs-number">0x895cd7be</span>, <span class="hljs-number">0x6b901122</span>, <span class="hljs-number">0xfd987193</span>, <span class="hljs-number">0xa679438e</span>, <span class="hljs-number">0x49b40821</span>,<br><span class="hljs-number">0xf61e2562</span>, <span class="hljs-number">0xc040b340</span>, <span class="hljs-number">0x265e5a51</span>, <span class="hljs-number">0xe9b6c7aa</span>, <span class="hljs-number">0xd62f105d</span>, <span class="hljs-number">0x2441453</span>, <span class="hljs-number">0xd8a1e681</span>, <span class="hljs-number">0xe7d3fbc8</span>,<br><span class="hljs-number">0x21e1cde6</span>, <span class="hljs-number">0xc33707d6</span>, <span class="hljs-number">0xf4d50d87</span>, <span class="hljs-number">0x455a14ed</span>, <span class="hljs-number">0xa9e3e905</span>, <span class="hljs-number">0xfcefa3f8</span>, <span class="hljs-number">0x676f02d9</span>, <span class="hljs-number">0x8d2a4c8a</span>,<br><span class="hljs-number">0xfffa3942</span>, <span class="hljs-number">0x8771f681</span>, <span class="hljs-number">0x6d9d6122</span>, <span class="hljs-number">0xfde5380c</span>, <span class="hljs-number">0xa4beea44</span>, <span class="hljs-number">0x4bdecfa9</span>, <span class="hljs-number">0xf6bb4b60</span>, <span class="hljs-number">0xbebfbc70</span>,<br><span class="hljs-number">0x289b7ec6</span>, <span class="hljs-number">0xeaa127fa</span>, <span class="hljs-number">0xd4ef3085</span>, <span class="hljs-number">0x4881d05</span>, <span class="hljs-number">0xd9d4d039</span>, <span class="hljs-number">0xe6db99e5</span>, <span class="hljs-number">0x1fa27cf8</span>, <span class="hljs-number">0xc4ac5665</span>,<br><span class="hljs-number">0xf4292244</span>, <span class="hljs-number">0x432aff97</span>, <span class="hljs-number">0xab9423a7</span>, <span class="hljs-number">0xfc93a039</span>, <span class="hljs-number">0x655b59c3</span>, <span class="hljs-number">0x8f0ccc92</span>, <span class="hljs-number">0xffeff47d</span>, <span class="hljs-number">0x85845dd1</span>,<br><span class="hljs-number">0x6fa87e4f</span>, <span class="hljs-number">0xfe2ce6e0</span>, <span class="hljs-number">0xa3014314</span>, <span class="hljs-number">0x4e0811a1</span>, <span class="hljs-number">0xf7537e82</span>, <span class="hljs-number">0xbd3af235</span>, <span class="hljs-number">0x2ad7d2bb</span>, <span class="hljs-number">0xeb86d391</span>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> SHIFT[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]&#123;<br>&#123;<span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>, <span class="hljs-number">22</span>&#125;,<br>&#123;<span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">20</span>&#125;,<br>&#123;<span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>&#125;,<br>&#123;<span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>&#125;&#125;;<br><span class="hljs-comment">//控制每一轮移位</span><br><span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> PADDING[] = &#123;<br><span class="hljs-number">0x80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">// 使用指针形式</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">padmes</span><span class="hljs-params">(string message, <span class="hljs-type">uint8_t</span> *mes1)</span> </span>&#123;<br>    <span class="hljs-type">uint64_t</span> mesL=message.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-type">uint64_t</span> bitmesL=mesL*CHAR_BIT;<br>    <span class="hljs-type">int</span> block =(bitmesL<span class="hljs-number">+64</span>)/<span class="hljs-number">512</span><span class="hljs-number">+1</span>;<span class="hljs-comment">//计算填充后的数据量是512的block倍</span><br>    <span class="hljs-built_in">memcpy</span>(mes1, message.<span class="hljs-built_in">c_str</span>(), mesL);<span class="hljs-comment">//将原数据拷贝到mes1中</span><br><span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i =mesL;i&lt;(block*<span class="hljs-number">64</span><span class="hljs-number">-8</span>);i++)&#123;<br>mes1[i]=PADDING[i-mesL];<br>&#125;<br>    <span class="hljs-built_in">memcpy</span>(mes1+(block*<span class="hljs-number">64</span><span class="hljs-number">-8</span>), &amp;bitmesL, <span class="hljs-number">8</span>);<span class="hljs-comment">//存储长度数据</span><br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">Left_Rotate</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> x, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n)</span> </span>&#123;<br>n&amp;=<span class="hljs-number">31</span>;<br><span class="hljs-keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; (<span class="hljs-number">32</span>-n));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">FF</span><span class="hljs-params">(<span class="hljs-type">int</span> i ,<span class="hljs-type">uint32_t</span> b, <span class="hljs-type">uint32_t</span> c, <span class="hljs-type">uint32_t</span> d)</span> </span>&#123;<br><span class="hljs-keyword">switch</span> (i)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> (b &amp; c) | (~b &amp; d);<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> (b &amp; d) | (c &amp; (~d));<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">return</span> b ^ c ^ d;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">return</span> c ^ (b | (~d));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">Subs</span><span class="hljs-params">(<span class="hljs-type">int</span> round_i,<span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-keyword">switch</span> ( round_i)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> i;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> (<span class="hljs-number">5</span>*i<span class="hljs-number">+1</span>)%<span class="hljs-number">16</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">return</span> (<span class="hljs-number">3</span>*i<span class="hljs-number">+5</span>)%<span class="hljs-number">16</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">return</span> (<span class="hljs-number">7</span>*i)%<span class="hljs-number">16</span>;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//控制输入的X[i]的位置</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Round_F</span><span class="hljs-params">(<span class="hljs-type">int</span> Round_i,<span class="hljs-type">uint32_t</span> buffer[<span class="hljs-number">4</span>],<span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> X[<span class="hljs-number">16</span>])</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>buffer[<span class="hljs-number">0</span>]+=<span class="hljs-built_in">FF</span>(Round_i,buffer[<span class="hljs-number">1</span>],buffer[<span class="hljs-number">2</span>],buffer[<span class="hljs-number">3</span>]);<br>buffer[<span class="hljs-number">0</span>]+=X[<span class="hljs-built_in">Subs</span>(Round_i,i)];<br>buffer[<span class="hljs-number">0</span>]+=T[i+Round_i*<span class="hljs-number">16</span>];<br>buffer[<span class="hljs-number">0</span>]=<span class="hljs-built_in">Left_Rotate</span>(buffer[<span class="hljs-number">0</span>],SHIFT[Round_i][i%<span class="hljs-number">4</span>]);<br>buffer[<span class="hljs-number">0</span>]+=buffer[<span class="hljs-number">1</span>];<br><span class="hljs-type">uint32_t</span> temp=buffer[<span class="hljs-number">3</span>];<br>buffer[<span class="hljs-number">3</span>]=buffer[<span class="hljs-number">2</span>];<br>buffer[<span class="hljs-number">2</span>]=buffer[<span class="hljs-number">1</span>];<br>buffer[<span class="hljs-number">1</span>]=buffer[<span class="hljs-number">0</span>];<br>buffer[<span class="hljs-number">0</span>]=temp;<br>&#125;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">oneMD5</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> chain_vetor[<span class="hljs-number">4</span>],<span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> X[<span class="hljs-number">16</span>])</span> </span>&#123;<br><span class="hljs-type">uint32_t</span> buffer[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>buffer[i]=chain_vetor[i];<br>&#125;<span class="hljs-comment">//chain_vetor[4]代表初始的128bit数据是固定的</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br><span class="hljs-built_in">Round_F</span>(i,buffer,X);<span class="hljs-comment">//完整的一次进行四次不同的操作，每次16轮。</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>chain_vetor[i]+=buffer[i];<br>&#125;<br>&#125;<span class="hljs-comment">/**/</span><br><span class="hljs-function"><span class="hljs-type">__uint128_t</span> <span class="hljs-title">MD5</span><span class="hljs-params">(string message)</span></span>&#123;<br><span class="hljs-type">uint64_t</span> mesL=message.<span class="hljs-built_in">length</span>();<br><span class="hljs-type">uint64_t</span> bitmesL=mesL*CHAR_BIT;<br><span class="hljs-type">uint64_t</span> block =(bitmesL<span class="hljs-number">+64</span>)/<span class="hljs-number">512</span><span class="hljs-number">+1</span>;<span class="hljs-comment">//计算填充后的数据量是512的block倍</span><br><span class="hljs-type">uint8_t</span> mes1[block*<span class="hljs-number">64</span>];<span class="hljs-comment">//填充后的数据</span><br><span class="hljs-type">uint32_t</span> chain_vetor[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0x67452301</span>,<span class="hljs-number">0xEFCDAB89</span>,<span class="hljs-number">0x98BADCFE</span>,<span class="hljs-number">0x10325476</span>&#125;;<span class="hljs-comment">//初始的128bit数据是固定的</span><br><span class="hljs-built_in">padmes</span>(message, mes1);<span class="hljs-comment">//填充数据</span><br><span class="hljs-type">uint32_t</span> *X=<span class="hljs-keyword">new</span> <span class="hljs-type">uint32_t</span>[<span class="hljs-number">16</span>];<span class="hljs-comment">//每次进行512bit的操作</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;i&lt;block;i++)&#123;<br><span class="hljs-built_in">memcpy</span>(X,mes1<span class="hljs-number">+64</span>*i,<span class="hljs-number">64</span>);<span class="hljs-comment">//每次512bit的操作</span><br><span class="hljs-built_in">oneMD5</span>(chain_vetor,X);<span class="hljs-comment">//进行一次hash操作</span><br>&#125;<br><span class="hljs-type">__uint128_t</span> md5 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>md5 += (<span class="hljs-type">__uint128_t</span>)chain_vetor[i] &lt;&lt; (i * <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">delete</span>[] X;<br><span class="hljs-keyword">return</span> md5;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MD5_Print</span><span class="hljs-params">(<span class="hljs-type">__uint128_t</span> in)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *ptr = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)&amp;in;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x&quot;</span>, ptr[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><br><br>cout &lt;&lt; <span class="hljs-string">&quot;----------------- MD5 -----------------\n&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;-----------------------\n&quot;</span>;<br>string str;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;text: &quot;</span>;<br><span class="hljs-built_in">getline</span>(cin, str);<br><span class="hljs-type">__uint128_t</span> md5 = <span class="hljs-built_in">MD5</span>(str);<br><br>cout &lt;&lt; <span class="hljs-string">&quot;result: &quot;</span>;<br><span class="hljs-built_in">MD5_Print</span>(md5);<br><span class="hljs-keyword">if</span>(str == <span class="hljs-string">&quot;Please_let_me_go~&quot;</span>) <span class="hljs-keyword">break</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;\n-----------------------\n&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>algorithm</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>weil pairing</title>
    <link href="/2024/01/16/ECC_sign_inmd/"/>
    <url>/2024/01/16/ECC_sign_inmd/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Weil-paIring"><a href="#Weil-paIring" class="headerlink" title="Weil paIring"></a>Weil paIring</h1><ul><li>前言</li></ul><p>编者对群的了解比较基础，可能一些证明不太会</p><p>借鉴<a href="https://link.springer.com/content/pdf/10.1007/s00145-004-0315-8.pdf">crypt03-15.tex.dvi</a></p><h2 id="双线性映射"><a href="#双线性映射" class="headerlink" title="双线性映射"></a>双线性映射</h2><ul><li><p>在数学中，一个双线性映射是由两个<a href="https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4">向量空间</a>上的元素，生成第三个向量空间上一个元素之函数，并且该函数对每个参数都是线性的。例如<a href="https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5">矩阵</a>乘法就是一个例子。</p></li><li><p>线性性</p></li></ul><p>x,x’∈<strong>V</strong>,y’∈<strong>W</strong>,以及标量a,b为整数，双线性映射$f:V×W→K$</p><p>必须满足:</p><blockquote><p>$f(ax+bx’,y)&#x3D;af(x,y)+bf(x’,y)$<br>$f(x,ay+by’)&#x3D;af(x,y)+bf(x,y’)$</p></blockquote><p><strong>双线性配对的性质</strong>:设映射e:</p><blockquote><p>双线性映射可以用五元组(p,G1,G2,GT,e)来描述，G1，G2，GT是三个素数阶乘法循环群，阶数皆为p，定义在这三个三个群上的一个映射关系e：G1*G2 —&gt;GT，满足以下性质：</p><ul><li>双线性性</li></ul><p>对于任意$a，b∈Zp$ ,有，有，有$e(Ra, Sb) &#x3D; e(R, S)ab$</p><p>e(P,Q+R)&#x3D;e(P,Q)*e(P,R)</p><ul><li>非退化性：</li></ul><p>存在R∈G2，S∈G1，使得e(R, S) ≠ 1（1∈G2代表G2群的单位元）</p><ul><li>可计算性质</li></ul><p>存在有效的算法对任意的R∈G2，S∈G1，计算e(R, S)的值。</p></blockquote><h2 id="Weil-Pairing"><a href="#Weil-Pairing" class="headerlink" title="Weil Pairing"></a>Weil Pairing</h2><blockquote><ul><li><strong>挠点</strong> 指在椭圆曲线上具有有限阶的点。即存在正整数 m≥1<em>m</em>≥1，使得对于椭圆曲线 E<em>E</em> 上的点 P<em>P</em>，有 mP&#x3D;O<em>m**P</em>&#x3D;<em>O</em>，其中 O<em>O</em> 是曲线的单位元（无穷远点）。点 <em>P</em> 的阶即为    m，此时 P 被称为挠点。</li></ul><p>将所有阶为m的倍数的点集合起来，就构成了m-挠群，定义为</p><p>$E[m]&#x3D;{P∈E：mP&#x3D;O}$</p><p>挠群 E[m] 是椭圆曲线 E 的一个加法子群，其中单位元是无穷远点 O。如果 P,Q∈E[m]，则 P+Q 和 Q−P 也属于 E[m]，说明挠群具有封闭性和存在逆元，因此构成一个群结构.</p><p>当椭圆曲线定义在域 K上时，m-挠群记为 E(K)[m]。例如，定义在 Fp上的 E的 m-挠群写作 E(Fp)[m]</p></blockquote><blockquote><ul><li>除子</li></ul><p>是椭圆曲线上点的形式和，可以看作是一种“加权”点的概念，用于追踪有理函数上的零点和极点。如果在 α1 处有 e 个零点，就记为 $e1[α1]$；如果在 β1处有 d1 个极点，就记为 $−d1[β1$，然后再把它们形式的加起来（不是普通的加法运算）：</p><p>$div(f)&#x3D;e1[α1]+…+e_r[α_r]-d_1[β_1]-…-d_t[β_t]$</p></blockquote><p>$E[m]&#x3D;Z&#x2F;mZ×Z&#x2F;mZ$</p><p>E[m]表示有两个阶为m的循环周期组成。</p><p>选取一组基{$T_1,T_2$}，定义映射：</p><p>det:$E[m]×E[m]→Z&#x2F;mZ$   det$(aT_1+bT_2,cT_1,dT_2)&#x3D;ad−bc$</p><p>这一段原理验证借鉴的别人的博客和论文(抽象代数大概看了基础群环域也还是看不太懂，以后学到一定程度了再看看)</p><p>设P,Q∈E[m],也就是说P和Q是群E上阶为m的点。f<sub>P</sub>和f<sub>Q </sub> </p><p>$div(f_p)&#x3D;m[P]-m[O]$,$div(f_Q)&#x3D;m[Q]-m[O]$</p><p>可知 <em>f</em>∘[<em>m</em>] 与 <em>g**m</em> 有相同的除子, 因此在差一个常数的意义下 <em>f</em>∘[<em>m</em>]&#x3D;$g^m$. 对任意 <em>S</em>∈<em>E</em>[<em>m</em>] 及 <em>X</em>∈<em>E</em>, 我们有</p><p>$g(X+S)m&#x3D;f([m]X+[m]S)&#x3D;f([m]X)&#x3D;g(X)^m.$</p><p>因此对任意 <em>X</em> 有 g(X+S)&#x2F;g(X) 都是 <em>m</em>-次单位根, 且 <em>E</em>→P1 不是满射, 只能是常值映射. 因此</p><blockquote><p>$e_m:E[m]×E[m]→u_m, $</p><p>$*e_m S,T&#x3D;g(X)\over g(X+S)$</p></blockquote><h3 id="Weil-配对有如下性质："><a href="#Weil-配对有如下性质：" class="headerlink" title="Weil 配对有如下性质："></a>Weil 配对有如下性质：</h3><blockquote><ul><li>双线性：</li></ul><p>$e_m(S_1+S_2,T)&#x3D;e_m(S_1,T)e_m(S2,T),e_m(S,T_1+T_2)&#x3D;e_m(S,T_1)+e_m(S,T_2)$</p><p>$e_m(s_1^a,T^b)^{ab}$</p><ul><li>反对称:</li></ul><p>$e_m(S,T)&#x3D;e_m (T,S)^{-1}.$</p><ul><li>非退化</li></ul><p>若对任意 <em>S</em>∈<em>E</em>[<em>m</em>] 有 $e_m$(S*,*T)&#x3D;1, 则有 <em>T</em>&#x3D;<em>O</em>.</p><ul><li>Galois不变:</li></ul><p>对任意 a∈GKˉK, 有 $e_m(S,T)^a&#x3D;e_m(S^a,T^a).$</p><ul><li>Compatibility:</li></ul><p>If$ P ∈ E[mn]$ and$ Q ∈ E[n]$, the$n e_{mn}(P, Q) &#x3D; e_n(mP, Q)$.</p><ul><li>阶的性质</li></ul><p>如果P和Q的阶为 o*o,则  $e(P,Q)^o&#x3D;1$</p></blockquote><h3 id="SU-signin"><a href="#SU-signin" class="headerlink" title="SU_signin"></a>SU_signin</h3><h1 id="SU-signin-1"><a href="#SU-signin-1" class="headerlink" title="SU_signin"></a>SU_signin</h1><p>题目源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>bit_length = <span class="hljs-built_in">len</span>(flag) * <span class="hljs-number">8</span><br><br>p = <span class="hljs-number">0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab</span><br>K = GF(p)<br>E = EllipticCurve(K, (<span class="hljs-number">0</span>, <span class="hljs-number">4</span>))<br>o = <span class="hljs-number">793479390729215512516507951283169066088130679960393952059283337873017453583023682367384822284289</span><br>n1, n2 = <span class="hljs-number">859267</span>, <span class="hljs-number">52437899</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    G1, G2 = E.random_element(), E.random_element()<br>    <span class="hljs-keyword">if</span>(G1.order() == o <span class="hljs-keyword">and</span> G2.order() == o):<br>        P1, P2 = (o//n1)*G1, (o//n2)*G2<br>        <span class="hljs-keyword">break</span><br><br>cs = [(randrange(<span class="hljs-number">0</span>, o) * P1 + randrange(<span class="hljs-number">0</span>, o) * G2).xy() <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-keyword">else</span> (randrange(<span class="hljs-number">0</span>, o) * G1 + randrange(<span class="hljs-number">0</span>, o) * P2).xy() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:].zfill(bit_length)]<br><span class="hljs-built_in">print</span>(cs)<br></code></pre></td></tr></table></figure><p>第一眼看上去就是普通的ECC，但是这里给了两组阶相容的G1，G2</p><p>然后生成P1和P2的阶分别为n1和n2</p><p>然后如果二进制位为1，(randrange(0, o) * P1 + randrange(0, o) * G2)&#x3D;w</p><p>如果二进制位为0，(randrange(0, o) * G1 + randrange(0, o) * P2)&#x3D;u</p><p>n1*w&#x3D;W,</p><p>n2*u&#x3D;U</p><blockquote><p>E(W,G2)&#x3D;1,E(U,G1)&#x3D;1</p></blockquote><p>所以可以利用G1和G2判断，这里G1和G2也是未知的，我们假设cs[0]&#x3D;0,cs[1]&#x3D;1</p><blockquote><p>G1&#x3D;n2*Cs[0] *</p><p><em>G2&#x3D;n1</em>Cs[1]</p></blockquote><p>最后如下脚本解出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">from</span> binteger <span class="hljs-keyword">import</span> Bin<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>p = <span class="hljs-number">0x1A0111EA397FE69A4B1BA7B6434BACD764774B84F38512BF6730D2A0F6B0F6241EABFFFEB153FFFFB9FEFFFFFFFFAAAB</span><br>K = GF(p)<br>E = EllipticCurve(K, (<span class="hljs-number">0</span>, <span class="hljs-number">4</span>))<br>n1, n2 = <span class="hljs-number">859267</span>, <span class="hljs-number">52437899</span><br>C1=E(<span class="hljs-number">3352313779859460801486003925032655136993856710790727105363441252341552956083285634840018349420910752791594969280380</span>, <span class="hljs-number">2427629935062136228505338781822031098060538648527098540077074467697895064173228853125697497410079713420476853660385</span>)<br>C2=E(<span class="hljs-number">2032510133375718031059693186824253736676017099152335002107480680688541061384422204257433121826049241452388039124165</span>, <span class="hljs-number">2686417581815542117120994330320923056212034586374942390097827699544930213612843423746022765194966762867963235937975</span>)<br>G1=n2*C1<br>G2=n1*C2<br>o=<span class="hljs-number">793479390729215512516507951283169066088130679960393952059283337873017453583023682367384822284289</span><br><br>P1, P2 = (o//n1)*G1, (o//n2)*G2<br>cs = []<br>a = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> cs:<br>    x,y=q<br>    Q=E(x,y)<br>    Q1=n1*Q<br>    <span class="hljs-keyword">if</span> Q1.weil_pairing(G2, o)==<span class="hljs-number">1</span>:<br>        a=a+<span class="hljs-string">b&#x27;1&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        a=a+<span class="hljs-string">b&#x27;0&#x27;</span><br><span class="hljs-built_in">print</span>(a)<br>flag = long_to_bytes(<span class="hljs-built_in">int</span>(a,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag)<br>‘’‘<br><span class="hljs-string">b&#x27;01010011010101010100001101010100010001100111101101010111011001010011000101100011011011110110110101100101010111110101111101010100001100000101111101011111010100110101010101000011010101000100011001011111010111110011001000110000001100100011010101111101&#x27;</span><br><span class="hljs-string">b&#x27;SUCTF&#123;We1come__T0__SUCTF__2025&#125;&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">’‘’</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
      <category>ecc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
