<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/12/23/DH%20%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="DH-密钥交换协议"><a href="#DH-密钥交换协议" class="headerlink" title="DH 密钥交换协议"></a>DH 密钥交换协议</h1><p>在基于<a href="https://zhida.zhihu.com/search?content_id=221358888&content_type=Article&match_order=1&q=%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&zhida_source=entity">对称加密</a>进行安全通信的过程中，通信双方需要持有一个共享的密钥。只有这样，由任何一方加密的信息才能由另一方使用相同的密钥解密。但是<strong>在能够安全的通信之前，通信双方应该如何约定一个共享的密钥呢？这就是安全中的经典问题：密钥配送问题（Key Distribution Problem</strong>[<a href="https://zhuanlan.zhihu.com/p/599518034#ref_1">1]</a><strong>）</strong>。</p><p>Diffe-Hellman密钥交换协议只是其中一种约定功能共享密钥的方式，</p><h2 id="DHKE协议简介"><a href="#DHKE协议简介" class="headerlink" title="DHKE协议简介"></a>DHKE协议简介</h2><p><strong>DHKE是一种通过公共通道安全地交换加密密钥的数学方法，以Whitfield Diffi</strong>e和Martin Hellman的名字命名。</p><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><blockquote><p>$c&#x3D;G^e mod P(0&lt;&#x3D;c&lt;P)$</p><p>G是P的原根，满足条件</p><p>{g1modp,g2modp,g3modp,…,gp−1modp}&#x3D;{1,2,3,…,p−1}</p></blockquote><h2 id="DHKE协议的过程"><a href="#DHKE协议的过程" class="headerlink" title="DHKE协议的过程"></a>DHKE协议的过程</h2><p><img src="https://rockfox0.github.io/picx-images-hosting/v2-39cb492c048f5f2a643368c135626925_1440w.175g9ciqha.webp"></p><ol><li><p>客户端和服务端生成协商大素数P及其原根G</p></li><li><p>客户端生成私钥和公钥a和A</p><blockquote><p>A&#x3D;G<sup>a</sup> mod p</p></blockquote></li><li><p>将公钥A发送给服务端</p></li><li><p>服务端生成私钥b和公钥B</p></li></ol><blockquote><p>$B&#x3D;G^b mod P$</p></blockquote><ol><li><p>服务端将公钥B发送给客户端</p></li><li><p>客户端已知G,P,A,a,B计算密钥S1</p></li><li><blockquote><p>$S1&#x3D;B^a mod P$ </p></blockquote></li><li><p>服务端已知A B b G P计算共享密钥</p></li></ol><blockquote><p>$S2&#x3D;A^b mod p$</p></blockquote><ol start="9"><li>客户端和服务端共享密钥S</li></ol><blockquote><p>$S&#x3D;S1&#x3D;B^a mod P&#x3D;(G^b) mod p&#x3D;A^b mod P&#x3D;S2$</p></blockquote><p>可以知道共享密钥的原理，</p>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLL算法</title>
    <link href="/2024/12/23/gege%E5%AF%86%E7%A0%81/"/>
    <url>/2024/12/23/gege%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="LLL算法"><a href="#LLL算法" class="headerlink" title="LLL算法"></a>LLL算法</h1><ol><li>简介：LLL算法用于解决最短向量问题的多项式时间复杂度算法。</li></ol><h2 id="LLL算法解释"><a href="#LLL算法解释" class="headerlink" title="LLL算法解释"></a>LLL算法解释</h2><h2 id="对格的认识"><a href="#对格的认识" class="headerlink" title="对格的认识"></a>对格的认识</h2><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/0368780808a7e1b750e955cf6b101d73.2yyf2pk3ws.webp" alt="0368780808a7e1b750e955cf6b101d73"></p><p>不同的基也可以生成同一个格。</p><p>例如一个基向量是（1,0)和（0，1）构成的格。该格用数学符号表示。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.5xap69j4x6.webp"></p><p><img src="https://www.helloimg.com/i/2024/12/17/6760eb205ecb2.png"></p><p>格的维数:即向量的个数，上述表示的是一个二维的格。</p><p>然后根据系数a的不同就能得到不同的L集合。</p><p>假定现在v1,v2,v3…vn(称为张空间) 是格L的基，让存在不同个集合属于L 即w1 w2 …,wm。</p><p><img src="https://github.com/rockfox0/picx-images-hosting/raw/master/846d4e43f4e7cc31174f75c9970be401.99tf0nbkwz.webp" alt="img"></p><p>可以转化位矩阵运算。</p><p>AV&#x3D;W</p><blockquote><p>线性无关（linearly independence）v1 , v2 , … , vn线性无关，当且仅当方程a1v1+…+anvn&#x3D;0的唯一解是a全部为0；否则线性相关（linearly dependent）</p><p>正交基（orthogonal basis）v1 , v2 , … , vn 中任意不同的两个v点积的结果为0</p><p>规范正交（orthonormal） 上面的每一个v的**欧几里得范数(类似于模 长度)**为1</p><p>据此在上面的w的||w||2 &#x3D; 所有系数a的平方和</p></blockquote><p>A(转置)&#x3D;(a1,a2…,an) V&#x3D;(v1,v2…,vn) w&#x3D;(w1,w2..,wn)</p><p>AV&#x3D;W;</p><p>示例一个有关向量的问题</p><p>选定基向量生成格L:</p><p><img src="https://rockfox0.github.io/picx-images-hosting/eaba6027147f175e55cc60cb4c6b0e6c.1lbw05nx6x.webp"></p><p>化作行矩阵<img src="https://rockfox0.github.io/picx-images-hosting/d333e18fcc3fa9fcd7c7939bdc22f328.7ax8bqja7e.webp"></p><p>将设L的某向量组：</p><p><img src="https://rockfox0.github.io/picx-images-hosting/ecdebf47b0420ef33e2e6ff92c32262d.39l8xcg9ch.webp"></p><p>其系数a形成向量组U&#x3D;</p><p><img src="https://rockfox0.github.io/picx-images-hosting/a5f5017c9499507f3eca6345e218dec0.8s3ddhost5.webp"></p><p>W(转置)&#x3D;（w1,w2,w3).</p><p>W&#x3D;A*U</p><p>操作代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#sage</span><br>v1 = <span class="hljs-selector-attr">[2, 1, 3]</span><br>v2 = <span class="hljs-selector-attr">[1, 2, 0]</span><br>v3 = <span class="hljs-selector-attr">[2, -3, -5]</span><br><br>A= <span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[v1, v2, v3]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(A)</span></span><br>U=<span class="hljs-built_in">matrix</span>(<span class="hljs-selector-attr">[[1, 0, 1]</span>, <span class="hljs-selector-attr">[1, -1, 2]</span>, <span class="hljs-selector-attr">[1, 2, 0]</span>])<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(U.det()</span></span>)<br>W=A*U<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(W)</span></span><br>int_U=U<span class="hljs-selector-class">.inverse</span>()#求矩阵的逆<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;.............&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(int_U)</span></span><br>assert int_U*W==A<br></code></pre></td></tr></table></figure><p>SVP(最短向量问题)</p><p>一个格会有无数多个向量集合v</p><p>最短向量问题，指的格L中最短的非零向量，即寻找一个v满足<em><strong>欧几里得范数</strong></em>最小（指的该集合每一个元素的平方和再开平方，类似于模的长度）范数就是长度。</p><blockquote><ol><li>基：</li></ol><p>在向量空间的每一个点，都可以通过对基的线性组合变化得到，叫做基向量</p><p>一个格可能会有很多个基 不唯一</p><ol start="2"><li>正交基：</li></ol><p>基相互垂直，就是正交基</p><ol start="3"><li><strong>格基约规</strong></li></ol><p><img src="https://rockfox0.github.io/picx-images-hosting/32a8129eef81a915f4b4f7ace6f8d010.361mzmnojh.webp"></p><p>random basis也是一组基，可以构成这个格子中的所有点 但是不是正交基</p><p>通过LLL或BKZ算法 得到正交基或者是最接近正交基，我们通过到他们，在之中</p></blockquote><p>Cvp(最近向量问题)—不是很能理解这里先留着</p><h2 id="接下来实战一些格的题"><a href="#接下来实战一些格的题" class="headerlink" title="接下来实战一些格的题"></a>接下来实战一些格的题</h2><h3 id="hermite-定理"><a href="#hermite-定理" class="headerlink" title="hermite 定理"></a>hermite 定理</h3><p><img src="https://rockfox0.github.io/picx-images-hosting/eae24001bbe299decdd775bef1ea1800.73u0gaysyt.webp"></p><p>给出最短向量的上限。</p><p>2024极客大挑战</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs 1c">from Crypto.Util.number import *<br><br>flag <span class="hljs-punctuation">=</span> b&#x27;******&#x27;<br>m <span class="hljs-punctuation">=</span> bytes_to_long<span class="hljs-punctuation">(</span>flag<span class="hljs-punctuation">)</span><br><br>assert m.bit_length<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">=</span><span class="hljs-punctuation">=</span> <span class="hljs-number">327</span><br>p <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>a <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">1024</span><span class="hljs-punctuation">)</span><br>c <span class="hljs-punctuation">=</span> getPrime<span class="hljs-punctuation">(</span><span class="hljs-number">400</span><span class="hljs-punctuation">)</span><br><br>b <span class="hljs-punctuation">=</span> <span class="hljs-punctuation">(</span>a*m <span class="hljs-punctuation">+</span> c<span class="hljs-punctuation">)</span> % p<br><br>print<span class="hljs-punctuation">(</span>f&#x27;a = &#123;a&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;b = &#123;b&#125;&#x27;<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>f&#x27;p = &#123;p&#125;&#x27;<span class="hljs-punctuation">)</span><br><br>&#x27;&#x27;&#x27;<br>a = <span class="hljs-number">16979084980432</span><span class="hljs-number">35409461972047</span><span class="hljs-number">08402762862586</span><span class="hljs-number">19760418310258</span><span class="hljs-number">92707418597085</span><span class="hljs-number">50301920348112</span><span class="hljs-number">94130599976409</span><span class="hljs-number">21979969292984</span><span class="hljs-number">74590062625556</span><span class="hljs-number">80679361326852</span><span class="hljs-number">77637740137726</span><span class="hljs-number">85954699561684</span><span class="hljs-number">24494543484365</span><span class="hljs-number">65153078018829</span><span class="hljs-number">95934869499880</span><span class="hljs-number">28859414291938</span><span class="hljs-number">15017964888150</span><span class="hljs-number">33294127591623</span><span class="hljs-number">26089476475021</span><span class="hljs-number">45889934568404</span><span class="hljs-number">04443515671353</span><span class="hljs-number">80261445041171</span>7<br>b = <span class="hljs-number">87985708831523</span><span class="hljs-number">23898094893816</span><span class="hljs-number">54149843183794</span><span class="hljs-number">59926002798504</span><span class="hljs-number">43596453820344</span><span class="hljs-number">38779885998886</span><span class="hljs-number">15810231215118</span><span class="hljs-number">82813830689557</span><span class="hljs-number">20628331079889</span><span class="hljs-number">65151522391460</span><span class="hljs-number">21683769192796</span><span class="hljs-number">02498745118188</span><span class="hljs-number">78134399363147</span><span class="hljs-number">00804256222291</span><span class="hljs-number">02347399406975</span><span class="hljs-number">53852540265617</span><span class="hljs-number">60348299509120</span><span class="hljs-number">31050401874604</span><span class="hljs-number">85673579382171</span><span class="hljs-number">26019729178374</span><span class="hljs-number">88867659293761</span><span class="hljs-number">79151804062085</span><br>p = <span class="hljs-number">13172449451206</span><span class="hljs-number">56588010397665</span><span class="hljs-number">46788821718063</span><span class="hljs-number">96314446781873</span><span class="hljs-number">57680406313670</span><span class="hljs-number">69153816254855</span><span class="hljs-number">22965544955909</span><span class="hljs-number">91886944032600</span><span class="hljs-number">44990366292026</span><span class="hljs-number">91608534025007</span><span class="hljs-number">71987352157741</span><span class="hljs-number">49087025577263</span><span class="hljs-number">76984665072859</span><span class="hljs-number">31801010739405</span><span class="hljs-number">07285459917860</span><span class="hljs-number">72655138522748</span><span class="hljs-number">17158735036126</span><span class="hljs-number">83249433020201</span><span class="hljs-number">72919086243047</span><span class="hljs-number">60548221028654</span><span class="hljs-number">41136763977415</span><span class="hljs-number">82433185880161</span>7<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><p>已知a,b,p。</p><p>接下来构造函数</p><blockquote><p>b&#x3D;am+c-kp</p><p>c&#x3D;b+kp-am</p><p>m&#x3D;0+m+0</p><p>1&#x3D;[1,0,0]</p><p>[1,m,k]*[1,0,b&#x2F;&#x2F;0,1,-a&#x2F;&#x2F;0,0,p]&#x3D;[1,m,c]</p><p>如果m和c远远小于a,b,p则[1,m,c]可视为最短向量,通过求出最短向量即可求出m和c。但是这里[1,0,b]不能确定是否一定比[1,m,c]大很多，所以我们可以先尝试</p></blockquote><img src="https://www.helloimg.com/i/2024/12/19/67642106d12f7.jpg" style="zoom:33%;" /><p>这里构造出来，$b-a*m +kp &#x3D; c$<br>$$(1\quad m\quad k )\begin{bmatrix}1&amp;0&amp;b\0&amp;1&amp;-<br>a\0&amp;0&amp;p\end{bmatrix}&#x3D;\begin{pmatrix}1&amp;m&amp;c\end{pmatrix}$$<br>$||\mathbf{v}||&#x3D;\sqrt{1+|m|2+|c|2}\approx2^{401}&gt;|p|{1&#x2F;3}&#x3D;2^{341}$<br>补个$2^{200}$<br>|V|&lt;&#x3D;|p|*1&#x2F;3，并且大小接近，但是为了它解决一些问题（我也不知道是啥），但是加了ZZ之后早格的范围变大了一些。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 1c">import libnum<br>h <span class="hljs-punctuation">=</span> <span class="hljs-number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span><br>p <span class="hljs-punctuation">=</span> <span class="hljs-number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span> <br><br>b <span class="hljs-punctuation">=</span> <span class="hljs-number">2</span>^<span class="hljs-number">256</span><br>print<span class="hljs-punctuation">(</span>b<span class="hljs-punctuation">)</span><br>Ge <span class="hljs-punctuation">=</span> Matrix<span class="hljs-punctuation">(</span>ZZ<span class="hljs-punctuation">,</span>[[<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>b*h]<span class="hljs-punctuation">,</span><br>                [<span class="hljs-number">0</span><span class="hljs-punctuation">,</span>b*p]]<span class="hljs-punctuation">)</span><br>print<span class="hljs-punctuation">(</span>Ge.LLL<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>f<span class="hljs-punctuation">,</span>g <span class="hljs-punctuation">=</span> Ge.LLL<span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>[<span class="hljs-number">0</span>]<br>f<span class="hljs-punctuation">,</span>g <span class="hljs-punctuation">=</span> abs<span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">)</span><span class="hljs-punctuation">,</span>abs<span class="hljs-punctuation">(</span>g<span class="hljs-punctuation">)</span><br><br>print<span class="hljs-punctuation">(</span>libnum.n2s<span class="hljs-punctuation">(</span>int<span class="hljs-punctuation">(</span>f<span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><span class="hljs-punctuation">)</span><br>&#x27;&#x27;&#x27;<br>[                                                               -<span class="hljs-number">16069380442589</span><span class="hljs-number">90275541962092</span><span class="hljs-number">34116260252220</span><span class="hljs-number">29937827928353</span><span class="hljs-number">0137</span>6                          -<span class="hljs-number">17803171261123</span><span class="hljs-number">85967312497437</span><span class="hljs-number">01069017647681</span><span class="hljs-number">19546924729039</span><span class="hljs-number">16861573886137</span><span class="hljs-number">50102558209749</span><span class="hljs-number">69017243849279</span>7    -<span class="hljs-number">14237146079883</span><span class="hljs-number">20513906940590</span><span class="hljs-number">90944467186180</span><span class="hljs-number">01757279284431</span><span class="hljs-number">22859897543424</span><span class="hljs-number">16920446590312</span><span class="hljs-number">00628997024895</span><span class="hljs-number">34790382025992</span><span class="hljs-number">64991178</span>1]<br>[-<span class="hljs-number">39523216145816</span><span class="hljs-number">11855285277046</span><span class="hljs-number">62406434840434</span><span class="hljs-number">69389020643465</span><span class="hljs-number">09461228630141</span><span class="hljs-number">01869711176457</span><span class="hljs-number">08732434626671</span><span class="hljs-number">47874514820918</span><span class="hljs-number">258171904000</span> <span class="hljs-number">11024770974241</span><span class="hljs-number">19435635141577</span><span class="hljs-number">83186588914047</span><span class="hljs-number">89741008888814</span><span class="hljs-number">33534521498532</span><span class="hljs-number">71203123279876</span><span class="hljs-number">61010446998349</span><span class="hljs-number">27340260293006</span><span class="hljs-number">408554479103</span>9      <span class="hljs-number">60725994239816</span><span class="hljs-number">48379958935496</span><span class="hljs-number">16923541657961</span><span class="hljs-number">15846766150293</span><span class="hljs-number">27257820303786</span><span class="hljs-number">85118977605128</span><span class="hljs-number">20398109578154</span><span class="hljs-number">72830263572101</span><span class="hljs-number">21196616</span>]<br>[<span class="hljs-number">12772335631029</span><span class="hljs-number">97334828428101</span><span class="hljs-number">25008648142220</span><span class="hljs-number">42824106124036</span><span class="hljs-number">07499844614901</span><span class="hljs-number">47840203023880</span><span class="hljs-number">21660678658812</span><span class="hljs-number">57603268015706</span><span class="hljs-number">730154426368</span>0  <span class="hljs-number">19898590683385</span><span class="hljs-number">76062737125779</span><span class="hljs-number">10272737300613</span><span class="hljs-number">95245384194421</span><span class="hljs-number">79364279037300</span><span class="hljs-number">72972868214516</span><span class="hljs-number">89398056863557</span><span class="hljs-number">31905541180681</span><span class="hljs-number">315283394820</span>      <span class="hljs-number">67036318636833</span><span class="hljs-number">82657736900625</span><span class="hljs-number">55164201128893</span><span class="hljs-number">16159558385281</span><span class="hljs-number">29309593883269</span><span class="hljs-number">15997828413278</span><span class="hljs-number">42304483529122</span><span class="hljs-number">71545768714368</span><span class="hljs-number">83176417</span>]<br>b&#x27;SYC&#123;<span class="hljs-number">1</span>e989433efffd767589e989ad0f091075c06&#125;&#x27;<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><h3 id="easyLattice"><a href="#easyLattice" class="headerlink" title="easyLattice"></a>easyLattice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">47</span><br><br>f = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>g = getPrime(<span class="hljs-number">128</span>)<br>h = (gmpy2.invert(f, p) * g %<br>     p)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;h =&#x27;</span>, h)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, p)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span><br><span class="hljs-string">p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://www.helloimg.com/i/2024/12/20/6765634b5c0e0.jpg"></p><p>造格，(2p)**1&#x2F;2&gt;&#x3D;(f^2+ g^2) ^1&#x2F;2  不成立，所以我们需要配平，对h和p同时乘256如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br>import gmpy2<br>h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443<br>p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     <br><span class="hljs-attribute">b</span>=2^256<br><span class="hljs-attribute">L</span>=matrix(ZZ,[[1,b*h],[0,b*p]])<br><span class="hljs-built_in">print</span>(L.LLL()[0])<br>f,<span class="hljs-attribute">g</span>=L.LLL()[0]<br><span class="hljs-attribute">f</span>=abs(f)<br><span class="hljs-built_in">print</span>(long_to_bytes(f)<br>’‘’<br>(-50073894085033274448337202692453522746880698077702322983028272289946704698284083256500537353714697134260425361796, -29555150073396592208680335494684523983684143293301981158157800432304888982432677680588686983225737089584138075242496)<br>b<span class="hljs-string">&#x27;SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;A\xf0\x89\x84&#x27;</span><br>‘’‘<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crypto</tag>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/23/hello-world/"/>
    <url>/2024/12/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
